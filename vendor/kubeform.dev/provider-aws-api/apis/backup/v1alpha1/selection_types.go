/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Selection struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SelectionSpec   `json:"spec,omitempty"`
	Status            SelectionStatus `json:"status,omitempty"`
}

type SelectionSpecConditionStringEquals struct {
	Key   *string `json:"key" tf:"key"`
	Value *string `json:"value" tf:"value"`
}

type SelectionSpecConditionStringLike struct {
	Key   *string `json:"key" tf:"key"`
	Value *string `json:"value" tf:"value"`
}

type SelectionSpecConditionStringNotEquals struct {
	Key   *string `json:"key" tf:"key"`
	Value *string `json:"value" tf:"value"`
}

type SelectionSpecConditionStringNotLike struct {
	Key   *string `json:"key" tf:"key"`
	Value *string `json:"value" tf:"value"`
}

type SelectionSpecCondition struct {
	// +optional
	StringEquals []SelectionSpecConditionStringEquals `json:"stringEquals,omitempty" tf:"string_equals"`
	// +optional
	StringLike []SelectionSpecConditionStringLike `json:"stringLike,omitempty" tf:"string_like"`
	// +optional
	StringNotEquals []SelectionSpecConditionStringNotEquals `json:"stringNotEquals,omitempty" tf:"string_not_equals"`
	// +optional
	StringNotLike []SelectionSpecConditionStringNotLike `json:"stringNotLike,omitempty" tf:"string_not_like"`
}

type SelectionSpecSelectionTag struct {
	Key   *string `json:"key" tf:"key"`
	Type  *string `json:"type" tf:"type"`
	Value *string `json:"value" tf:"value"`
}

type SelectionSpec struct {
	State *SelectionSpecResource `json:"state,omitempty" tf:"-"`

	Resource SelectionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type SelectionSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Condition  []SelectionSpecCondition `json:"condition,omitempty" tf:"condition"`
	IamRoleArn *string                  `json:"iamRoleArn" tf:"iam_role_arn"`
	Name       *string                  `json:"name" tf:"name"`
	// +optional
	NotResources []string `json:"notResources,omitempty" tf:"not_resources"`
	PlanID       *string  `json:"planID" tf:"plan_id"`
	// +optional
	Resources []string `json:"resources,omitempty" tf:"resources"`
	// +optional
	SelectionTag []SelectionSpecSelectionTag `json:"selectionTag,omitempty" tf:"selection_tag"`
}

type SelectionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SelectionList is a list of Selections
type SelectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Selection CRD objects
	Items []Selection `json:"items,omitempty"`
}
