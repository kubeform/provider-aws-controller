/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecEncryptionConfiguration{}).Type1()):                                                   ServiceSpecEncryptionConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecHealthCheckConfiguration{}).Type1()):                                                  ServiceSpecHealthCheckConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecInstanceConfiguration{}).Type1()):                                                     ServiceSpecInstanceConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNetworkConfiguration{}).Type1()):                                                      ServiceSpecNetworkConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNetworkConfigurationEgressConfiguration{}).Type1()):                                   ServiceSpecNetworkConfigurationEgressConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfiguration{}).Type1()):                                                       ServiceSpecSourceConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationAuthenticationConfiguration{}).Type1()):                            ServiceSpecSourceConfigurationAuthenticationConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepository{}).Type1()):                                         ServiceSpecSourceConfigurationCodeRepositoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration{}).Type1()):                        ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues{}).Type1()): ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion{}).Type1()):                        ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationImageRepository{}).Type1()):                                        ServiceSpecSourceConfigurationImageRepositoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationImageRepositoryImageConfiguration{}).Type1()):                      ServiceSpecSourceConfigurationImageRepositoryImageConfigurationCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecEncryptionConfiguration{}).Type1()):                                                   ServiceSpecEncryptionConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecHealthCheckConfiguration{}).Type1()):                                                  ServiceSpecHealthCheckConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecInstanceConfiguration{}).Type1()):                                                     ServiceSpecInstanceConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNetworkConfiguration{}).Type1()):                                                      ServiceSpecNetworkConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNetworkConfigurationEgressConfiguration{}).Type1()):                                   ServiceSpecNetworkConfigurationEgressConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfiguration{}).Type1()):                                                       ServiceSpecSourceConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationAuthenticationConfiguration{}).Type1()):                            ServiceSpecSourceConfigurationAuthenticationConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepository{}).Type1()):                                         ServiceSpecSourceConfigurationCodeRepositoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration{}).Type1()):                        ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues{}).Type1()): ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion{}).Type1()):                        ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationImageRepository{}).Type1()):                                        ServiceSpecSourceConfigurationImageRepositoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationImageRepositoryImageConfiguration{}).Type1()):                      ServiceSpecSourceConfigurationImageRepositoryImageConfigurationCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ServiceSpecEncryptionConfigurationCodec struct {
}

func (ServiceSpecEncryptionConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecEncryptionConfiguration)(ptr) == nil
}

func (ServiceSpecEncryptionConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecEncryptionConfiguration)(ptr)
	var objs []ServiceSpecEncryptionConfiguration
	if obj != nil {
		objs = []ServiceSpecEncryptionConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecEncryptionConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecEncryptionConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecEncryptionConfiguration)(ptr) = ServiceSpecEncryptionConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecEncryptionConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecEncryptionConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecEncryptionConfiguration)(ptr) = objs[0]
			} else {
				*(*ServiceSpecEncryptionConfiguration)(ptr) = ServiceSpecEncryptionConfiguration{}
			}
		} else {
			*(*ServiceSpecEncryptionConfiguration)(ptr) = ServiceSpecEncryptionConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecEncryptionConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecEncryptionConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecEncryptionConfiguration)(ptr) = obj
		} else {
			*(*ServiceSpecEncryptionConfiguration)(ptr) = ServiceSpecEncryptionConfiguration{}
		}
	default:
		iter.ReportError("decode ServiceSpecEncryptionConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecHealthCheckConfigurationCodec struct {
}

func (ServiceSpecHealthCheckConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecHealthCheckConfiguration)(ptr) == nil
}

func (ServiceSpecHealthCheckConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecHealthCheckConfiguration)(ptr)
	var objs []ServiceSpecHealthCheckConfiguration
	if obj != nil {
		objs = []ServiceSpecHealthCheckConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecHealthCheckConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecHealthCheckConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecHealthCheckConfiguration)(ptr) = ServiceSpecHealthCheckConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecHealthCheckConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecHealthCheckConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecHealthCheckConfiguration)(ptr) = objs[0]
			} else {
				*(*ServiceSpecHealthCheckConfiguration)(ptr) = ServiceSpecHealthCheckConfiguration{}
			}
		} else {
			*(*ServiceSpecHealthCheckConfiguration)(ptr) = ServiceSpecHealthCheckConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecHealthCheckConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecHealthCheckConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecHealthCheckConfiguration)(ptr) = obj
		} else {
			*(*ServiceSpecHealthCheckConfiguration)(ptr) = ServiceSpecHealthCheckConfiguration{}
		}
	default:
		iter.ReportError("decode ServiceSpecHealthCheckConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecInstanceConfigurationCodec struct {
}

func (ServiceSpecInstanceConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecInstanceConfiguration)(ptr) == nil
}

func (ServiceSpecInstanceConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecInstanceConfiguration)(ptr)
	var objs []ServiceSpecInstanceConfiguration
	if obj != nil {
		objs = []ServiceSpecInstanceConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecInstanceConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecInstanceConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecInstanceConfiguration)(ptr) = ServiceSpecInstanceConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecInstanceConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecInstanceConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecInstanceConfiguration)(ptr) = objs[0]
			} else {
				*(*ServiceSpecInstanceConfiguration)(ptr) = ServiceSpecInstanceConfiguration{}
			}
		} else {
			*(*ServiceSpecInstanceConfiguration)(ptr) = ServiceSpecInstanceConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecInstanceConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecInstanceConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecInstanceConfiguration)(ptr) = obj
		} else {
			*(*ServiceSpecInstanceConfiguration)(ptr) = ServiceSpecInstanceConfiguration{}
		}
	default:
		iter.ReportError("decode ServiceSpecInstanceConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecNetworkConfigurationCodec struct {
}

func (ServiceSpecNetworkConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecNetworkConfiguration)(ptr) == nil
}

func (ServiceSpecNetworkConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecNetworkConfiguration)(ptr)
	var objs []ServiceSpecNetworkConfiguration
	if obj != nil {
		objs = []ServiceSpecNetworkConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNetworkConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecNetworkConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecNetworkConfiguration)(ptr) = ServiceSpecNetworkConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecNetworkConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNetworkConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecNetworkConfiguration)(ptr) = objs[0]
			} else {
				*(*ServiceSpecNetworkConfiguration)(ptr) = ServiceSpecNetworkConfiguration{}
			}
		} else {
			*(*ServiceSpecNetworkConfiguration)(ptr) = ServiceSpecNetworkConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecNetworkConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNetworkConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecNetworkConfiguration)(ptr) = obj
		} else {
			*(*ServiceSpecNetworkConfiguration)(ptr) = ServiceSpecNetworkConfiguration{}
		}
	default:
		iter.ReportError("decode ServiceSpecNetworkConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecNetworkConfigurationEgressConfigurationCodec struct {
}

func (ServiceSpecNetworkConfigurationEgressConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecNetworkConfigurationEgressConfiguration)(ptr) == nil
}

func (ServiceSpecNetworkConfigurationEgressConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecNetworkConfigurationEgressConfiguration)(ptr)
	var objs []ServiceSpecNetworkConfigurationEgressConfiguration
	if obj != nil {
		objs = []ServiceSpecNetworkConfigurationEgressConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNetworkConfigurationEgressConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecNetworkConfigurationEgressConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecNetworkConfigurationEgressConfiguration)(ptr) = ServiceSpecNetworkConfigurationEgressConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecNetworkConfigurationEgressConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNetworkConfigurationEgressConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecNetworkConfigurationEgressConfiguration)(ptr) = objs[0]
			} else {
				*(*ServiceSpecNetworkConfigurationEgressConfiguration)(ptr) = ServiceSpecNetworkConfigurationEgressConfiguration{}
			}
		} else {
			*(*ServiceSpecNetworkConfigurationEgressConfiguration)(ptr) = ServiceSpecNetworkConfigurationEgressConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecNetworkConfigurationEgressConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecNetworkConfigurationEgressConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecNetworkConfigurationEgressConfiguration)(ptr) = obj
		} else {
			*(*ServiceSpecNetworkConfigurationEgressConfiguration)(ptr) = ServiceSpecNetworkConfigurationEgressConfiguration{}
		}
	default:
		iter.ReportError("decode ServiceSpecNetworkConfigurationEgressConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecSourceConfigurationCodec struct {
}

func (ServiceSpecSourceConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecSourceConfiguration)(ptr) == nil
}

func (ServiceSpecSourceConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecSourceConfiguration)(ptr)
	var objs []ServiceSpecSourceConfiguration
	if obj != nil {
		objs = []ServiceSpecSourceConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecSourceConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecSourceConfiguration)(ptr) = ServiceSpecSourceConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecSourceConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecSourceConfiguration)(ptr) = objs[0]
			} else {
				*(*ServiceSpecSourceConfiguration)(ptr) = ServiceSpecSourceConfiguration{}
			}
		} else {
			*(*ServiceSpecSourceConfiguration)(ptr) = ServiceSpecSourceConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecSourceConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecSourceConfiguration)(ptr) = obj
		} else {
			*(*ServiceSpecSourceConfiguration)(ptr) = ServiceSpecSourceConfiguration{}
		}
	default:
		iter.ReportError("decode ServiceSpecSourceConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecSourceConfigurationAuthenticationConfigurationCodec struct {
}

func (ServiceSpecSourceConfigurationAuthenticationConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecSourceConfigurationAuthenticationConfiguration)(ptr) == nil
}

func (ServiceSpecSourceConfigurationAuthenticationConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecSourceConfigurationAuthenticationConfiguration)(ptr)
	var objs []ServiceSpecSourceConfigurationAuthenticationConfiguration
	if obj != nil {
		objs = []ServiceSpecSourceConfigurationAuthenticationConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationAuthenticationConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecSourceConfigurationAuthenticationConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecSourceConfigurationAuthenticationConfiguration)(ptr) = ServiceSpecSourceConfigurationAuthenticationConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecSourceConfigurationAuthenticationConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationAuthenticationConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecSourceConfigurationAuthenticationConfiguration)(ptr) = objs[0]
			} else {
				*(*ServiceSpecSourceConfigurationAuthenticationConfiguration)(ptr) = ServiceSpecSourceConfigurationAuthenticationConfiguration{}
			}
		} else {
			*(*ServiceSpecSourceConfigurationAuthenticationConfiguration)(ptr) = ServiceSpecSourceConfigurationAuthenticationConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecSourceConfigurationAuthenticationConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationAuthenticationConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecSourceConfigurationAuthenticationConfiguration)(ptr) = obj
		} else {
			*(*ServiceSpecSourceConfigurationAuthenticationConfiguration)(ptr) = ServiceSpecSourceConfigurationAuthenticationConfiguration{}
		}
	default:
		iter.ReportError("decode ServiceSpecSourceConfigurationAuthenticationConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecSourceConfigurationCodeRepositoryCodec struct {
}

func (ServiceSpecSourceConfigurationCodeRepositoryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecSourceConfigurationCodeRepository)(ptr) == nil
}

func (ServiceSpecSourceConfigurationCodeRepositoryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecSourceConfigurationCodeRepository)(ptr)
	var objs []ServiceSpecSourceConfigurationCodeRepository
	if obj != nil {
		objs = []ServiceSpecSourceConfigurationCodeRepository{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepository{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecSourceConfigurationCodeRepositoryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecSourceConfigurationCodeRepository)(ptr) = ServiceSpecSourceConfigurationCodeRepository{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecSourceConfigurationCodeRepository

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepository{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecSourceConfigurationCodeRepository)(ptr) = objs[0]
			} else {
				*(*ServiceSpecSourceConfigurationCodeRepository)(ptr) = ServiceSpecSourceConfigurationCodeRepository{}
			}
		} else {
			*(*ServiceSpecSourceConfigurationCodeRepository)(ptr) = ServiceSpecSourceConfigurationCodeRepository{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecSourceConfigurationCodeRepository

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepository{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecSourceConfigurationCodeRepository)(ptr) = obj
		} else {
			*(*ServiceSpecSourceConfigurationCodeRepository)(ptr) = ServiceSpecSourceConfigurationCodeRepository{}
		}
	default:
		iter.ReportError("decode ServiceSpecSourceConfigurationCodeRepository", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodec struct {
}

func (ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration)(ptr) == nil
}

func (ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration)(ptr)
	var objs []ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration
	if obj != nil {
		objs = []ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration)(ptr) = ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration)(ptr) = objs[0]
			} else {
				*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration)(ptr) = ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration{}
			}
		} else {
			*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration)(ptr) = ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration)(ptr) = obj
		} else {
			*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration)(ptr) = ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration{}
		}
	default:
		iter.ReportError("decode ServiceSpecSourceConfigurationCodeRepositoryCodeConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesCodec struct {
}

func (ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues)(ptr) == nil
}

func (ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues)(ptr)
	var objs []ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues
	if obj != nil {
		objs = []ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues)(ptr) = ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues)(ptr) = objs[0]
			} else {
				*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues)(ptr) = ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues{}
			}
		} else {
			*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues)(ptr) = ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues)(ptr) = obj
		} else {
			*(*ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues)(ptr) = ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues{}
		}
	default:
		iter.ReportError("decode ServiceSpecSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersionCodec struct {
}

func (ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion)(ptr) == nil
}

func (ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion)(ptr)
	var objs []ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion
	if obj != nil {
		objs = []ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion)(ptr) = ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion)(ptr) = objs[0]
			} else {
				*(*ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion)(ptr) = ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion{}
			}
		} else {
			*(*ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion)(ptr) = ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion)(ptr) = obj
		} else {
			*(*ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion)(ptr) = ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion{}
		}
	default:
		iter.ReportError("decode ServiceSpecSourceConfigurationCodeRepositorySourceCodeVersion", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecSourceConfigurationImageRepositoryCodec struct {
}

func (ServiceSpecSourceConfigurationImageRepositoryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecSourceConfigurationImageRepository)(ptr) == nil
}

func (ServiceSpecSourceConfigurationImageRepositoryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecSourceConfigurationImageRepository)(ptr)
	var objs []ServiceSpecSourceConfigurationImageRepository
	if obj != nil {
		objs = []ServiceSpecSourceConfigurationImageRepository{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationImageRepository{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecSourceConfigurationImageRepositoryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecSourceConfigurationImageRepository)(ptr) = ServiceSpecSourceConfigurationImageRepository{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecSourceConfigurationImageRepository

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationImageRepository{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecSourceConfigurationImageRepository)(ptr) = objs[0]
			} else {
				*(*ServiceSpecSourceConfigurationImageRepository)(ptr) = ServiceSpecSourceConfigurationImageRepository{}
			}
		} else {
			*(*ServiceSpecSourceConfigurationImageRepository)(ptr) = ServiceSpecSourceConfigurationImageRepository{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecSourceConfigurationImageRepository

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationImageRepository{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecSourceConfigurationImageRepository)(ptr) = obj
		} else {
			*(*ServiceSpecSourceConfigurationImageRepository)(ptr) = ServiceSpecSourceConfigurationImageRepository{}
		}
	default:
		iter.ReportError("decode ServiceSpecSourceConfigurationImageRepository", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServiceSpecSourceConfigurationImageRepositoryImageConfigurationCodec struct {
}

func (ServiceSpecSourceConfigurationImageRepositoryImageConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServiceSpecSourceConfigurationImageRepositoryImageConfiguration)(ptr) == nil
}

func (ServiceSpecSourceConfigurationImageRepositoryImageConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServiceSpecSourceConfigurationImageRepositoryImageConfiguration)(ptr)
	var objs []ServiceSpecSourceConfigurationImageRepositoryImageConfiguration
	if obj != nil {
		objs = []ServiceSpecSourceConfigurationImageRepositoryImageConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationImageRepositoryImageConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServiceSpecSourceConfigurationImageRepositoryImageConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServiceSpecSourceConfigurationImageRepositoryImageConfiguration)(ptr) = ServiceSpecSourceConfigurationImageRepositoryImageConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServiceSpecSourceConfigurationImageRepositoryImageConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationImageRepositoryImageConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServiceSpecSourceConfigurationImageRepositoryImageConfiguration)(ptr) = objs[0]
			} else {
				*(*ServiceSpecSourceConfigurationImageRepositoryImageConfiguration)(ptr) = ServiceSpecSourceConfigurationImageRepositoryImageConfiguration{}
			}
		} else {
			*(*ServiceSpecSourceConfigurationImageRepositoryImageConfiguration)(ptr) = ServiceSpecSourceConfigurationImageRepositoryImageConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ServiceSpecSourceConfigurationImageRepositoryImageConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServiceSpecSourceConfigurationImageRepositoryImageConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ServiceSpecSourceConfigurationImageRepositoryImageConfiguration)(ptr) = obj
		} else {
			*(*ServiceSpecSourceConfigurationImageRepositoryImageConfiguration)(ptr) = ServiceSpecSourceConfigurationImageRepositoryImageConfiguration{}
		}
	default:
		iter.ReportError("decode ServiceSpecSourceConfigurationImageRepositoryImageConfiguration", "unexpected JSON type")
	}
}
