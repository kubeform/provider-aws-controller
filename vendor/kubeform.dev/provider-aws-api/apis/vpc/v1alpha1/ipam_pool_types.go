/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type IpamPool struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IpamPoolSpec   `json:"spec,omitempty"`
	Status            IpamPoolStatus `json:"status,omitempty"`
}

type IpamPoolSpec struct {
	State *IpamPoolSpecResource `json:"state,omitempty" tf:"-"`

	Resource IpamPoolSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type IpamPoolSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AddressFamily *string `json:"addressFamily" tf:"address_family"`
	// +optional
	AllocationDefaultNetmaskLength *int64 `json:"allocationDefaultNetmaskLength,omitempty" tf:"allocation_default_netmask_length"`
	// +optional
	AllocationMaxNetmaskLength *int64 `json:"allocationMaxNetmaskLength,omitempty" tf:"allocation_max_netmask_length"`
	// +optional
	AllocationMinNetmaskLength *int64 `json:"allocationMinNetmaskLength,omitempty" tf:"allocation_min_netmask_length"`
	// +optional
	AllocationResourceTags *map[string]string `json:"allocationResourceTags,omitempty" tf:"allocation_resource_tags"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AutoImport *bool `json:"autoImport,omitempty" tf:"auto_import"`
	// +optional
	AwsService *string `json:"awsService,omitempty" tf:"aws_service"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	IpamScopeID *string `json:"ipamScopeID" tf:"ipam_scope_id"`
	// +optional
	IpamScopeType *string `json:"ipamScopeType,omitempty" tf:"ipam_scope_type"`
	// +optional
	Locale *string `json:"locale,omitempty" tf:"locale"`
	// +optional
	PoolDepth *int64 `json:"poolDepth,omitempty" tf:"pool_depth"`
	// +optional
	PubliclyAdvertisable *bool `json:"publiclyAdvertisable,omitempty" tf:"publicly_advertisable"`
	// +optional
	SourceIpamPoolID *string `json:"sourceIpamPoolID,omitempty" tf:"source_ipam_pool_id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type IpamPoolStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// IpamPoolList is a list of IpamPools
type IpamPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of IpamPool CRD objects
	Items []IpamPool `json:"items,omitempty"`
}
