/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type UserHierarchyStructure struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserHierarchyStructureSpec   `json:"spec,omitempty"`
	Status            UserHierarchyStructureStatus `json:"status,omitempty"`
}

type UserHierarchyStructureSpecHierarchyStructureLevelFive struct {
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
}

type UserHierarchyStructureSpecHierarchyStructureLevelFour struct {
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
}

type UserHierarchyStructureSpecHierarchyStructureLevelOne struct {
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
}

type UserHierarchyStructureSpecHierarchyStructureLevelThree struct {
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
}

type UserHierarchyStructureSpecHierarchyStructureLevelTwo struct {
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
}

type UserHierarchyStructureSpecHierarchyStructure struct {
	// +optional
	LevelFive *UserHierarchyStructureSpecHierarchyStructureLevelFive `json:"levelFive,omitempty" tf:"level_five"`
	// +optional
	LevelFour *UserHierarchyStructureSpecHierarchyStructureLevelFour `json:"levelFour,omitempty" tf:"level_four"`
	// +optional
	LevelOne *UserHierarchyStructureSpecHierarchyStructureLevelOne `json:"levelOne,omitempty" tf:"level_one"`
	// +optional
	LevelThree *UserHierarchyStructureSpecHierarchyStructureLevelThree `json:"levelThree,omitempty" tf:"level_three"`
	// +optional
	LevelTwo *UserHierarchyStructureSpecHierarchyStructureLevelTwo `json:"levelTwo,omitempty" tf:"level_two"`
}

type UserHierarchyStructureSpec struct {
	State *UserHierarchyStructureSpecResource `json:"state,omitempty" tf:"-"`

	Resource UserHierarchyStructureSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type UserHierarchyStructureSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	HierarchyStructure *UserHierarchyStructureSpecHierarchyStructure `json:"hierarchyStructure" tf:"hierarchy_structure"`
	InstanceID         *string                                       `json:"instanceID" tf:"instance_id"`
}

type UserHierarchyStructureStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// UserHierarchyStructureList is a list of UserHierarchyStructures
type UserHierarchyStructureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of UserHierarchyStructure CRD objects
	Items []UserHierarchyStructure `json:"items,omitempty"`
}
