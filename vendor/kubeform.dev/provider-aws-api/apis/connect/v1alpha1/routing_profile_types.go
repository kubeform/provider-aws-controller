/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type RoutingProfile struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoutingProfileSpec   `json:"spec,omitempty"`
	Status            RoutingProfileStatus `json:"status,omitempty"`
}

type RoutingProfileSpecMediaConcurrencies struct {
	Channel     *string `json:"channel" tf:"channel"`
	Concurrency *int64  `json:"concurrency" tf:"concurrency"`
}

type RoutingProfileSpecQueueConfigs struct {
	Channel  *string `json:"channel" tf:"channel"`
	Delay    *int64  `json:"delay" tf:"delay"`
	Priority *int64  `json:"priority" tf:"priority"`
	// +optional
	QueueArn *string `json:"queueArn,omitempty" tf:"queue_arn"`
	QueueID  *string `json:"queueID" tf:"queue_id"`
	// +optional
	QueueName *string `json:"queueName,omitempty" tf:"queue_name"`
}

type RoutingProfileSpecQueueConfigsAssociated struct {
	// +optional
	Channel *string `json:"channel,omitempty" tf:"channel"`
	// +optional
	Delay *int64 `json:"delay,omitempty" tf:"delay"`
	// +optional
	Priority *int64 `json:"priority,omitempty" tf:"priority"`
	// +optional
	QueueArn *string `json:"queueArn,omitempty" tf:"queue_arn"`
	// +optional
	QueueID *string `json:"queueID,omitempty" tf:"queue_id"`
	// +optional
	QueueName *string `json:"queueName,omitempty" tf:"queue_name"`
}

type RoutingProfileSpec struct {
	State *RoutingProfileSpecResource `json:"state,omitempty" tf:"-"`

	Resource RoutingProfileSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type RoutingProfileSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn                    *string `json:"arn,omitempty" tf:"arn"`
	DefaultOutboundQueueID *string `json:"defaultOutboundQueueID" tf:"default_outbound_queue_id"`
	Description            *string `json:"description" tf:"description"`
	InstanceID             *string `json:"instanceID" tf:"instance_id"`
	// +kubebuilder:validation:MinItems=1
	MediaConcurrencies []RoutingProfileSpecMediaConcurrencies `json:"mediaConcurrencies" tf:"media_concurrencies"`
	Name               *string                                `json:"name" tf:"name"`
	// +optional
	// +kubebuilder:validation:MaxItems=10
	// +kubebuilder:validation:MinItems=1
	QueueConfigs []RoutingProfileSpecQueueConfigs `json:"queueConfigs,omitempty" tf:"queue_configs"`
	// +optional
	QueueConfigsAssociated []RoutingProfileSpecQueueConfigsAssociated `json:"queueConfigsAssociated,omitempty" tf:"queue_configs_associated"`
	// +optional
	RoutingProfileID *string `json:"routingProfileID,omitempty" tf:"routing_profile_id"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type RoutingProfileStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RoutingProfileList is a list of RoutingProfiles
type RoutingProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of RoutingProfile CRD objects
	Items []RoutingProfile `json:"items,omitempty"`
}
