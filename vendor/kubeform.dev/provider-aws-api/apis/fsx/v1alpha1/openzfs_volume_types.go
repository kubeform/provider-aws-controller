/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type OpenzfsVolume struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpenzfsVolumeSpec   `json:"spec,omitempty"`
	Status            OpenzfsVolumeStatus `json:"status,omitempty"`
}

type OpenzfsVolumeSpecNfsExportsClientConfigurations struct {
	Clients *string `json:"clients" tf:"clients"`
	// +kubebuilder:validation:MaxItems=20
	// +kubebuilder:validation:MinItems=1
	Options []string `json:"options" tf:"options"`
}

type OpenzfsVolumeSpecNfsExports struct {
	// +kubebuilder:validation:MaxItems=25
	ClientConfigurations []OpenzfsVolumeSpecNfsExportsClientConfigurations `json:"clientConfigurations" tf:"client_configurations"`
}

type OpenzfsVolumeSpecOriginSnapshot struct {
	CopyStrategy *string `json:"copyStrategy" tf:"copy_strategy"`
	SnapshotArn  *string `json:"snapshotArn" tf:"snapshot_arn"`
}

type OpenzfsVolumeSpecUserAndGroupQuotas struct {
	ID                      *int64  `json:"ID" tf:"id"`
	StorageCapacityQuotaGib *int64  `json:"storageCapacityQuotaGib" tf:"storage_capacity_quota_gib"`
	Type                    *string `json:"type" tf:"type"`
}

type OpenzfsVolumeSpec struct {
	State *OpenzfsVolumeSpecResource `json:"state,omitempty" tf:"-"`

	Resource OpenzfsVolumeSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type OpenzfsVolumeSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CopyTagsToSnapshots *bool `json:"copyTagsToSnapshots,omitempty" tf:"copy_tags_to_snapshots"`
	// +optional
	DataCompressionType *string `json:"dataCompressionType,omitempty" tf:"data_compression_type"`
	Name                *string `json:"name" tf:"name"`
	// +optional
	NfsExports *OpenzfsVolumeSpecNfsExports `json:"nfsExports,omitempty" tf:"nfs_exports"`
	// +optional
	OriginSnapshot *OpenzfsVolumeSpecOriginSnapshot `json:"originSnapshot,omitempty" tf:"origin_snapshot"`
	ParentVolumeID *string                          `json:"parentVolumeID" tf:"parent_volume_id"`
	// +optional
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only"`
	// +optional
	StorageCapacityQuotaGib *int64 `json:"storageCapacityQuotaGib,omitempty" tf:"storage_capacity_quota_gib"`
	// +optional
	StorageCapacityReservationGib *int64 `json:"storageCapacityReservationGib,omitempty" tf:"storage_capacity_reservation_gib"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	// +optional
	// +kubebuilder:validation:MaxItems=100
	UserAndGroupQuotas []OpenzfsVolumeSpecUserAndGroupQuotas `json:"userAndGroupQuotas,omitempty" tf:"user_and_group_quotas"`
	// +optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type OpenzfsVolumeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// OpenzfsVolumeList is a list of OpenzfsVolumes
type OpenzfsVolumeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of OpenzfsVolume CRD objects
	Items []OpenzfsVolume `json:"items,omitempty"`
}
