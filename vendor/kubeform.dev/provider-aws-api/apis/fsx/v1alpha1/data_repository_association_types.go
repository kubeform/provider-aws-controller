/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DataRepositoryAssociation struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataRepositoryAssociationSpec   `json:"spec,omitempty"`
	Status            DataRepositoryAssociationStatus `json:"status,omitempty"`
}

type DataRepositoryAssociationSpecS3AutoExportPolicy struct {
	// +optional
	// +kubebuilder:validation:MaxItems=3
	Events []string `json:"events,omitempty" tf:"events"`
}

type DataRepositoryAssociationSpecS3AutoImportPolicy struct {
	// +optional
	// +kubebuilder:validation:MaxItems=3
	Events []string `json:"events,omitempty" tf:"events"`
}

type DataRepositoryAssociationSpecS3 struct {
	// +optional
	AutoExportPolicy *DataRepositoryAssociationSpecS3AutoExportPolicy `json:"autoExportPolicy,omitempty" tf:"auto_export_policy"`
	// +optional
	AutoImportPolicy *DataRepositoryAssociationSpecS3AutoImportPolicy `json:"autoImportPolicy,omitempty" tf:"auto_import_policy"`
}

type DataRepositoryAssociationSpec struct {
	State *DataRepositoryAssociationSpecResource `json:"state,omitempty" tf:"-"`

	Resource DataRepositoryAssociationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DataRepositoryAssociationSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AssociationID *string `json:"associationID,omitempty" tf:"association_id"`
	// +optional
	BatchImportMetaDataOnCreate *bool   `json:"batchImportMetaDataOnCreate,omitempty" tf:"batch_import_meta_data_on_create"`
	DataRepositoryPath          *string `json:"dataRepositoryPath" tf:"data_repository_path"`
	// +optional
	DeleteDataInFilesystem *bool   `json:"deleteDataInFilesystem,omitempty" tf:"delete_data_in_filesystem"`
	FileSystemID           *string `json:"fileSystemID" tf:"file_system_id"`
	FileSystemPath         *string `json:"fileSystemPath" tf:"file_system_path"`
	// +optional
	ImportedFileChunkSize *int64 `json:"importedFileChunkSize,omitempty" tf:"imported_file_chunk_size"`
	// +optional
	S3 *DataRepositoryAssociationSpecS3 `json:"s3,omitempty" tf:"s3"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type DataRepositoryAssociationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DataRepositoryAssociationList is a list of DataRepositoryAssociations
type DataRepositoryAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DataRepositoryAssociation CRD objects
	Items []DataRepositoryAssociation `json:"items,omitempty"`
}
