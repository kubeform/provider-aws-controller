/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecInstanceRefresh{}).Type1()):                                                                                                          GroupSpecInstanceRefreshCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecInstanceRefreshPreferences{}).Type1()):                                                                                               GroupSpecInstanceRefreshPreferencesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecLaunchTemplate{}).Type1()):                                                                                                           GroupSpecLaunchTemplateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicy{}).Type1()):                                                                                                     GroupSpecMixedInstancesPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyInstancesDistribution{}).Type1()):                                                                                GroupSpecMixedInstancesPolicyInstancesDistributionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplate{}).Type1()):                                                                                       GroupSpecMixedInstancesPolicyLaunchTemplateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification{}).Type1()):                                                            GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification{}).Type1()):                                                    GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecWarmPool{}).Type1()):                                                                                                                 GroupSpecWarmPoolCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupTagSpecTag{}).Type1()):                                                                                                                   GroupTagSpecTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfiguration{}).Type1()):                                                                                          PolicySpecPredictiveScalingConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecification{}).Type1()):                                                                       PolicySpecPredictiveScalingConfigurationMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification{}).Type1()):                                  PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat{}).Type1()):       PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1()): PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification{}).Type1()):                                      PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat{}).Type1()):           PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1()):     PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification{}).Type1()):                                   PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat{}).Type1()):        PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1()):  PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification{}).Type1()):                                      PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification{}).Type1()):                                      PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification{}).Type1()):                                   PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfiguration{}).Type1()):                                                                                             PolicySpecTargetTrackingConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification{}).Type1()):                                                                PolicySpecTargetTrackingConfigurationCustomizedMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification{}).Type1()):                                                                PolicySpecTargetTrackingConfigurationPredefinedMetricSpecificationCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecInstanceRefresh{}).Type1()):                                                                                                          GroupSpecInstanceRefreshCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecInstanceRefreshPreferences{}).Type1()):                                                                                               GroupSpecInstanceRefreshPreferencesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecLaunchTemplate{}).Type1()):                                                                                                           GroupSpecLaunchTemplateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicy{}).Type1()):                                                                                                     GroupSpecMixedInstancesPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyInstancesDistribution{}).Type1()):                                                                                GroupSpecMixedInstancesPolicyInstancesDistributionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplate{}).Type1()):                                                                                       GroupSpecMixedInstancesPolicyLaunchTemplateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification{}).Type1()):                                                            GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification{}).Type1()):                                                    GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecWarmPool{}).Type1()):                                                                                                                 GroupSpecWarmPoolCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GroupTagSpecTag{}).Type1()):                                                                                                                   GroupTagSpecTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfiguration{}).Type1()):                                                                                          PolicySpecPredictiveScalingConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecification{}).Type1()):                                                                       PolicySpecPredictiveScalingConfigurationMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification{}).Type1()):                                  PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat{}).Type1()):       PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1()): PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification{}).Type1()):                                      PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat{}).Type1()):           PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1()):     PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification{}).Type1()):                                   PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat{}).Type1()):        PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1()):  PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification{}).Type1()):                                      PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification{}).Type1()):                                      PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification{}).Type1()):                                   PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfiguration{}).Type1()):                                                                                             PolicySpecTargetTrackingConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification{}).Type1()):                                                                PolicySpecTargetTrackingConfigurationCustomizedMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification{}).Type1()):                                                                PolicySpecTargetTrackingConfigurationPredefinedMetricSpecificationCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type GroupSpecInstanceRefreshCodec struct {
}

func (GroupSpecInstanceRefreshCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GroupSpecInstanceRefresh)(ptr) == nil
}

func (GroupSpecInstanceRefreshCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GroupSpecInstanceRefresh)(ptr)
	var objs []GroupSpecInstanceRefresh
	if obj != nil {
		objs = []GroupSpecInstanceRefresh{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecInstanceRefresh{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GroupSpecInstanceRefreshCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GroupSpecInstanceRefresh)(ptr) = GroupSpecInstanceRefresh{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GroupSpecInstanceRefresh

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecInstanceRefresh{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GroupSpecInstanceRefresh)(ptr) = objs[0]
			} else {
				*(*GroupSpecInstanceRefresh)(ptr) = GroupSpecInstanceRefresh{}
			}
		} else {
			*(*GroupSpecInstanceRefresh)(ptr) = GroupSpecInstanceRefresh{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GroupSpecInstanceRefresh

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecInstanceRefresh{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GroupSpecInstanceRefresh)(ptr) = obj
		} else {
			*(*GroupSpecInstanceRefresh)(ptr) = GroupSpecInstanceRefresh{}
		}
	default:
		iter.ReportError("decode GroupSpecInstanceRefresh", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GroupSpecInstanceRefreshPreferencesCodec struct {
}

func (GroupSpecInstanceRefreshPreferencesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GroupSpecInstanceRefreshPreferences)(ptr) == nil
}

func (GroupSpecInstanceRefreshPreferencesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GroupSpecInstanceRefreshPreferences)(ptr)
	var objs []GroupSpecInstanceRefreshPreferences
	if obj != nil {
		objs = []GroupSpecInstanceRefreshPreferences{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecInstanceRefreshPreferences{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GroupSpecInstanceRefreshPreferencesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GroupSpecInstanceRefreshPreferences)(ptr) = GroupSpecInstanceRefreshPreferences{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GroupSpecInstanceRefreshPreferences

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecInstanceRefreshPreferences{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GroupSpecInstanceRefreshPreferences)(ptr) = objs[0]
			} else {
				*(*GroupSpecInstanceRefreshPreferences)(ptr) = GroupSpecInstanceRefreshPreferences{}
			}
		} else {
			*(*GroupSpecInstanceRefreshPreferences)(ptr) = GroupSpecInstanceRefreshPreferences{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GroupSpecInstanceRefreshPreferences

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecInstanceRefreshPreferences{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GroupSpecInstanceRefreshPreferences)(ptr) = obj
		} else {
			*(*GroupSpecInstanceRefreshPreferences)(ptr) = GroupSpecInstanceRefreshPreferences{}
		}
	default:
		iter.ReportError("decode GroupSpecInstanceRefreshPreferences", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GroupSpecLaunchTemplateCodec struct {
}

func (GroupSpecLaunchTemplateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GroupSpecLaunchTemplate)(ptr) == nil
}

func (GroupSpecLaunchTemplateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GroupSpecLaunchTemplate)(ptr)
	var objs []GroupSpecLaunchTemplate
	if obj != nil {
		objs = []GroupSpecLaunchTemplate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecLaunchTemplate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GroupSpecLaunchTemplateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GroupSpecLaunchTemplate)(ptr) = GroupSpecLaunchTemplate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GroupSpecLaunchTemplate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecLaunchTemplate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GroupSpecLaunchTemplate)(ptr) = objs[0]
			} else {
				*(*GroupSpecLaunchTemplate)(ptr) = GroupSpecLaunchTemplate{}
			}
		} else {
			*(*GroupSpecLaunchTemplate)(ptr) = GroupSpecLaunchTemplate{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GroupSpecLaunchTemplate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecLaunchTemplate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GroupSpecLaunchTemplate)(ptr) = obj
		} else {
			*(*GroupSpecLaunchTemplate)(ptr) = GroupSpecLaunchTemplate{}
		}
	default:
		iter.ReportError("decode GroupSpecLaunchTemplate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GroupSpecMixedInstancesPolicyCodec struct {
}

func (GroupSpecMixedInstancesPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GroupSpecMixedInstancesPolicy)(ptr) == nil
}

func (GroupSpecMixedInstancesPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GroupSpecMixedInstancesPolicy)(ptr)
	var objs []GroupSpecMixedInstancesPolicy
	if obj != nil {
		objs = []GroupSpecMixedInstancesPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GroupSpecMixedInstancesPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GroupSpecMixedInstancesPolicy)(ptr) = GroupSpecMixedInstancesPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GroupSpecMixedInstancesPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GroupSpecMixedInstancesPolicy)(ptr) = objs[0]
			} else {
				*(*GroupSpecMixedInstancesPolicy)(ptr) = GroupSpecMixedInstancesPolicy{}
			}
		} else {
			*(*GroupSpecMixedInstancesPolicy)(ptr) = GroupSpecMixedInstancesPolicy{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GroupSpecMixedInstancesPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GroupSpecMixedInstancesPolicy)(ptr) = obj
		} else {
			*(*GroupSpecMixedInstancesPolicy)(ptr) = GroupSpecMixedInstancesPolicy{}
		}
	default:
		iter.ReportError("decode GroupSpecMixedInstancesPolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GroupSpecMixedInstancesPolicyInstancesDistributionCodec struct {
}

func (GroupSpecMixedInstancesPolicyInstancesDistributionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GroupSpecMixedInstancesPolicyInstancesDistribution)(ptr) == nil
}

func (GroupSpecMixedInstancesPolicyInstancesDistributionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GroupSpecMixedInstancesPolicyInstancesDistribution)(ptr)
	var objs []GroupSpecMixedInstancesPolicyInstancesDistribution
	if obj != nil {
		objs = []GroupSpecMixedInstancesPolicyInstancesDistribution{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyInstancesDistribution{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GroupSpecMixedInstancesPolicyInstancesDistributionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GroupSpecMixedInstancesPolicyInstancesDistribution)(ptr) = GroupSpecMixedInstancesPolicyInstancesDistribution{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GroupSpecMixedInstancesPolicyInstancesDistribution

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyInstancesDistribution{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GroupSpecMixedInstancesPolicyInstancesDistribution)(ptr) = objs[0]
			} else {
				*(*GroupSpecMixedInstancesPolicyInstancesDistribution)(ptr) = GroupSpecMixedInstancesPolicyInstancesDistribution{}
			}
		} else {
			*(*GroupSpecMixedInstancesPolicyInstancesDistribution)(ptr) = GroupSpecMixedInstancesPolicyInstancesDistribution{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GroupSpecMixedInstancesPolicyInstancesDistribution

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyInstancesDistribution{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GroupSpecMixedInstancesPolicyInstancesDistribution)(ptr) = obj
		} else {
			*(*GroupSpecMixedInstancesPolicyInstancesDistribution)(ptr) = GroupSpecMixedInstancesPolicyInstancesDistribution{}
		}
	default:
		iter.ReportError("decode GroupSpecMixedInstancesPolicyInstancesDistribution", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GroupSpecMixedInstancesPolicyLaunchTemplateCodec struct {
}

func (GroupSpecMixedInstancesPolicyLaunchTemplateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GroupSpecMixedInstancesPolicyLaunchTemplate)(ptr) == nil
}

func (GroupSpecMixedInstancesPolicyLaunchTemplateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GroupSpecMixedInstancesPolicyLaunchTemplate)(ptr)
	var objs []GroupSpecMixedInstancesPolicyLaunchTemplate
	if obj != nil {
		objs = []GroupSpecMixedInstancesPolicyLaunchTemplate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GroupSpecMixedInstancesPolicyLaunchTemplateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GroupSpecMixedInstancesPolicyLaunchTemplate)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GroupSpecMixedInstancesPolicyLaunchTemplate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GroupSpecMixedInstancesPolicyLaunchTemplate)(ptr) = objs[0]
			} else {
				*(*GroupSpecMixedInstancesPolicyLaunchTemplate)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplate{}
			}
		} else {
			*(*GroupSpecMixedInstancesPolicyLaunchTemplate)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplate{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GroupSpecMixedInstancesPolicyLaunchTemplate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GroupSpecMixedInstancesPolicyLaunchTemplate)(ptr) = obj
		} else {
			*(*GroupSpecMixedInstancesPolicyLaunchTemplate)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplate{}
		}
	default:
		iter.ReportError("decode GroupSpecMixedInstancesPolicyLaunchTemplate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationCodec struct {
}

func (GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification)(ptr) == nil
}

func (GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification)(ptr)
	var objs []GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification
	if obj != nil {
		objs = []GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification)(ptr) = objs[0]
			} else {
				*(*GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification{}
			}
		} else {
			*(*GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification)(ptr) = obj
		} else {
			*(*GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification{}
		}
	default:
		iter.ReportError("decode GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationCodec struct {
}

func (GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification)(ptr) == nil
}

func (GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification)(ptr)
	var objs []GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification
	if obj != nil {
		objs = []GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification)(ptr) = objs[0]
			} else {
				*(*GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification{}
			}
		} else {
			*(*GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification)(ptr) = obj
		} else {
			*(*GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification)(ptr) = GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification{}
		}
	default:
		iter.ReportError("decode GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GroupSpecWarmPoolCodec struct {
}

func (GroupSpecWarmPoolCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GroupSpecWarmPool)(ptr) == nil
}

func (GroupSpecWarmPoolCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GroupSpecWarmPool)(ptr)
	var objs []GroupSpecWarmPool
	if obj != nil {
		objs = []GroupSpecWarmPool{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecWarmPool{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GroupSpecWarmPoolCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GroupSpecWarmPool)(ptr) = GroupSpecWarmPool{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GroupSpecWarmPool

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecWarmPool{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GroupSpecWarmPool)(ptr) = objs[0]
			} else {
				*(*GroupSpecWarmPool)(ptr) = GroupSpecWarmPool{}
			}
		} else {
			*(*GroupSpecWarmPool)(ptr) = GroupSpecWarmPool{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GroupSpecWarmPool

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupSpecWarmPool{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GroupSpecWarmPool)(ptr) = obj
		} else {
			*(*GroupSpecWarmPool)(ptr) = GroupSpecWarmPool{}
		}
	default:
		iter.ReportError("decode GroupSpecWarmPool", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GroupTagSpecTagCodec struct {
}

func (GroupTagSpecTagCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GroupTagSpecTag)(ptr) == nil
}

func (GroupTagSpecTagCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GroupTagSpecTag)(ptr)
	var objs []GroupTagSpecTag
	if obj != nil {
		objs = []GroupTagSpecTag{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupTagSpecTag{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GroupTagSpecTagCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GroupTagSpecTag)(ptr) = GroupTagSpecTag{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GroupTagSpecTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupTagSpecTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GroupTagSpecTag)(ptr) = objs[0]
			} else {
				*(*GroupTagSpecTag)(ptr) = GroupTagSpecTag{}
			}
		} else {
			*(*GroupTagSpecTag)(ptr) = GroupTagSpecTag{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj GroupTagSpecTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GroupTagSpecTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*GroupTagSpecTag)(ptr) = obj
		} else {
			*(*GroupTagSpecTag)(ptr) = GroupTagSpecTag{}
		}
	default:
		iter.ReportError("decode GroupTagSpecTag", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfiguration)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfiguration)(ptr)
	var objs []PolicySpecPredictiveScalingConfiguration
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfiguration)(ptr) = PolicySpecPredictiveScalingConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfiguration)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfiguration)(ptr) = PolicySpecPredictiveScalingConfiguration{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfiguration)(ptr) = PolicySpecPredictiveScalingConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfiguration)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfiguration)(ptr) = PolicySpecPredictiveScalingConfiguration{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecification)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecification)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecification
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecification{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecification)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStat", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetricCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedCapacityMetricSpecificationMetricDataQueriesMetricStatMetric", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStat", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetricCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedLoadMetricSpecificationMetricDataQueriesMetricStatMetric", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStat", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetricCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationCustomizedScalingMetricSpecificationMetricDataQueriesMetricStatMetric", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecificationCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedLoadMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecificationCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedMetricPairSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecificationCodec struct {
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification)(ptr) == nil
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification)(ptr)
	var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification
	if obj != nil {
		objs = []PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification{}
			}
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification)(ptr) = obj
		} else {
			*(*PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification)(ptr) = PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecPredictiveScalingConfigurationMetricSpecificationPredefinedScalingMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecTargetTrackingConfigurationCodec struct {
}

func (PolicySpecTargetTrackingConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecTargetTrackingConfiguration)(ptr) == nil
}

func (PolicySpecTargetTrackingConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecTargetTrackingConfiguration)(ptr)
	var objs []PolicySpecTargetTrackingConfiguration
	if obj != nil {
		objs = []PolicySpecTargetTrackingConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecTargetTrackingConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecTargetTrackingConfiguration)(ptr) = PolicySpecTargetTrackingConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecTargetTrackingConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecTargetTrackingConfiguration)(ptr) = objs[0]
			} else {
				*(*PolicySpecTargetTrackingConfiguration)(ptr) = PolicySpecTargetTrackingConfiguration{}
			}
		} else {
			*(*PolicySpecTargetTrackingConfiguration)(ptr) = PolicySpecTargetTrackingConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecTargetTrackingConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecTargetTrackingConfiguration)(ptr) = obj
		} else {
			*(*PolicySpecTargetTrackingConfiguration)(ptr) = PolicySpecTargetTrackingConfiguration{}
		}
	default:
		iter.ReportError("decode PolicySpecTargetTrackingConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecTargetTrackingConfigurationCustomizedMetricSpecificationCodec struct {
}

func (PolicySpecTargetTrackingConfigurationCustomizedMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification)(ptr) == nil
}

func (PolicySpecTargetTrackingConfigurationCustomizedMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification)(ptr)
	var objs []PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification
	if obj != nil {
		objs = []PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecTargetTrackingConfigurationCustomizedMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification)(ptr) = PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification)(ptr) = PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification{}
			}
		} else {
			*(*PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification)(ptr) = PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification)(ptr) = obj
		} else {
			*(*PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification)(ptr) = PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecTargetTrackingConfigurationCustomizedMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecTargetTrackingConfigurationPredefinedMetricSpecificationCodec struct {
}

func (PolicySpecTargetTrackingConfigurationPredefinedMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification)(ptr) == nil
}

func (PolicySpecTargetTrackingConfigurationPredefinedMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification)(ptr)
	var objs []PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification
	if obj != nil {
		objs = []PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecTargetTrackingConfigurationPredefinedMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification)(ptr) = PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification)(ptr) = PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification{}
			}
		} else {
			*(*PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification)(ptr) = PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification)(ptr) = obj
		} else {
			*(*PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification)(ptr) = PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecTargetTrackingConfigurationPredefinedMetricSpecification", "unexpected JSON type")
	}
}
