/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ScheduledAction struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ScheduledActionSpec   `json:"spec,omitempty"`
	Status            ScheduledActionStatus `json:"status,omitempty"`
}

type ScheduledActionSpecTargetActionPauseCluster struct {
	ClusterIdentifier *string `json:"clusterIdentifier" tf:"cluster_identifier"`
}

type ScheduledActionSpecTargetActionResizeCluster struct {
	// +optional
	Classic           *bool   `json:"classic,omitempty" tf:"classic"`
	ClusterIdentifier *string `json:"clusterIdentifier" tf:"cluster_identifier"`
	// +optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type"`
	// +optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type"`
	// +optional
	NumberOfNodes *int64 `json:"numberOfNodes,omitempty" tf:"number_of_nodes"`
}

type ScheduledActionSpecTargetActionResumeCluster struct {
	ClusterIdentifier *string `json:"clusterIdentifier" tf:"cluster_identifier"`
}

type ScheduledActionSpecTargetAction struct {
	// +optional
	PauseCluster *ScheduledActionSpecTargetActionPauseCluster `json:"pauseCluster,omitempty" tf:"pause_cluster"`
	// +optional
	ResizeCluster *ScheduledActionSpecTargetActionResizeCluster `json:"resizeCluster,omitempty" tf:"resize_cluster"`
	// +optional
	ResumeCluster *ScheduledActionSpecTargetActionResumeCluster `json:"resumeCluster,omitempty" tf:"resume_cluster"`
}

type ScheduledActionSpec struct {
	State *ScheduledActionSpecResource `json:"state,omitempty" tf:"-"`

	Resource ScheduledActionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ScheduledActionSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Enable *bool `json:"enable,omitempty" tf:"enable"`
	// +optional
	EndTime  *string `json:"endTime,omitempty" tf:"end_time"`
	IamRole  *string `json:"iamRole" tf:"iam_role"`
	Name     *string `json:"name" tf:"name"`
	Schedule *string `json:"schedule" tf:"schedule"`
	// +optional
	StartTime    *string                          `json:"startTime,omitempty" tf:"start_time"`
	TargetAction *ScheduledActionSpecTargetAction `json:"targetAction" tf:"target_action"`
}

type ScheduledActionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ScheduledActionList is a list of ScheduledActions
type ScheduledActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ScheduledAction CRD objects
	Items []ScheduledAction `json:"items,omitempty"`
}
