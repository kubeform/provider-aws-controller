/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type EventConnection struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventConnectionSpec   `json:"spec,omitempty"`
	Status            EventConnectionStatus `json:"status,omitempty"`
}

type EventConnectionSpecAuthParametersApiKey struct {
	Key   *string `json:"key" tf:"key"`
	Value *string `json:"-" sensitive:"true" tf:"value"`
}

type EventConnectionSpecAuthParametersBasic struct {
	Password *string `json:"-" sensitive:"true" tf:"password"`
	Username *string `json:"username" tf:"username"`
}

type EventConnectionSpecAuthParametersInvocationHTTPParametersBody struct {
	// +optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret"`
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"-" sensitive:"true" tf:"value"`
}

type EventConnectionSpecAuthParametersInvocationHTTPParametersHeader struct {
	// +optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret"`
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"-" sensitive:"true" tf:"value"`
}

type EventConnectionSpecAuthParametersInvocationHTTPParametersQueryString struct {
	// +optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret"`
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"-" sensitive:"true" tf:"value"`
}

type EventConnectionSpecAuthParametersInvocationHTTPParameters struct {
	// +optional
	Body []EventConnectionSpecAuthParametersInvocationHTTPParametersBody `json:"body,omitempty" tf:"body"`
	// +optional
	Header []EventConnectionSpecAuthParametersInvocationHTTPParametersHeader `json:"header,omitempty" tf:"header"`
	// +optional
	QueryString []EventConnectionSpecAuthParametersInvocationHTTPParametersQueryString `json:"queryString,omitempty" tf:"query_string"`
}

type EventConnectionSpecAuthParametersOauthClientParameters struct {
	ClientID     *string `json:"clientID" tf:"client_id"`
	ClientSecret *string `json:"-" sensitive:"true" tf:"client_secret"`
}

type EventConnectionSpecAuthParametersOauthOauthHTTPParametersBody struct {
	// +optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret"`
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"-" sensitive:"true" tf:"value"`
}

type EventConnectionSpecAuthParametersOauthOauthHTTPParametersHeader struct {
	// +optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret"`
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"-" sensitive:"true" tf:"value"`
}

type EventConnectionSpecAuthParametersOauthOauthHTTPParametersQueryString struct {
	// +optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret"`
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"-" sensitive:"true" tf:"value"`
}

type EventConnectionSpecAuthParametersOauthOauthHTTPParameters struct {
	// +optional
	Body []EventConnectionSpecAuthParametersOauthOauthHTTPParametersBody `json:"body,omitempty" tf:"body"`
	// +optional
	Header []EventConnectionSpecAuthParametersOauthOauthHTTPParametersHeader `json:"header,omitempty" tf:"header"`
	// +optional
	QueryString []EventConnectionSpecAuthParametersOauthOauthHTTPParametersQueryString `json:"queryString,omitempty" tf:"query_string"`
}

type EventConnectionSpecAuthParametersOauth struct {
	AuthorizationEndpoint *string `json:"authorizationEndpoint" tf:"authorization_endpoint"`
	// +optional
	ClientParameters    *EventConnectionSpecAuthParametersOauthClientParameters    `json:"clientParameters,omitempty" tf:"client_parameters"`
	HttpMethod          *string                                                    `json:"httpMethod" tf:"http_method"`
	OauthHTTPParameters *EventConnectionSpecAuthParametersOauthOauthHTTPParameters `json:"oauthHTTPParameters" tf:"oauth_http_parameters"`
}

type EventConnectionSpecAuthParameters struct {
	// +optional
	ApiKey *EventConnectionSpecAuthParametersApiKey `json:"apiKey,omitempty" tf:"api_key"`
	// +optional
	Basic *EventConnectionSpecAuthParametersBasic `json:"basic,omitempty" tf:"basic"`
	// +optional
	InvocationHTTPParameters *EventConnectionSpecAuthParametersInvocationHTTPParameters `json:"invocationHTTPParameters,omitempty" tf:"invocation_http_parameters"`
	// +optional
	Oauth *EventConnectionSpecAuthParametersOauth `json:"oauth,omitempty" tf:"oauth"`
}

type EventConnectionSpec struct {
	State *EventConnectionSpecResource `json:"state,omitempty" tf:"-"`

	Resource EventConnectionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type EventConnectionSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn               *string                            `json:"arn,omitempty" tf:"arn"`
	AuthParameters    *EventConnectionSpecAuthParameters `json:"authParameters" tf:"auth_parameters"`
	AuthorizationType *string                            `json:"authorizationType" tf:"authorization_type"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	Name        *string `json:"name" tf:"name"`
	// +optional
	SecretArn *string `json:"secretArn,omitempty" tf:"secret_arn"`
}

type EventConnectionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EventConnectionList is a list of EventConnections
type EventConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of EventConnection CRD objects
	Items []EventConnection `json:"items,omitempty"`
}
