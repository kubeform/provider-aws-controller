/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DataSource struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataSourceSpec   `json:"spec,omitempty"`
	Status            DataSourceStatus `json:"status,omitempty"`
}

type DataSourceSpecCredentialsCredentialPair struct {
	Password *string `json:"-" sensitive:"true" tf:"password"`
	Username *string `json:"-" sensitive:"true" tf:"username"`
}

type DataSourceSpecCredentials struct {
	// +optional
	CopySourceArn *string `json:"copySourceArn,omitempty" tf:"copy_source_arn"`
	// +optional
	CredentialPair *DataSourceSpecCredentialsCredentialPair `json:"credentialPair,omitempty" tf:"credential_pair"`
}

type DataSourceSpecParametersAmazonElasticsearch struct {
	Domain *string `json:"domain" tf:"domain"`
}

type DataSourceSpecParametersAthena struct {
	// +optional
	WorkGroup *string `json:"workGroup,omitempty" tf:"work_group"`
}

type DataSourceSpecParametersAurora struct {
	Database *string `json:"database" tf:"database"`
	Host     *string `json:"host" tf:"host"`
	Port     *int64  `json:"port" tf:"port"`
}

type DataSourceSpecParametersAuroraPostgresql struct {
	Database *string `json:"database" tf:"database"`
	Host     *string `json:"host" tf:"host"`
	Port     *int64  `json:"port" tf:"port"`
}

type DataSourceSpecParametersAwsIotAnalytics struct {
	DataSetName *string `json:"dataSetName" tf:"data_set_name"`
}

type DataSourceSpecParametersJira struct {
	SiteBaseURL *string `json:"siteBaseURL" tf:"site_base_url"`
}

type DataSourceSpecParametersMariaDb struct {
	Database *string `json:"database" tf:"database"`
	Host     *string `json:"host" tf:"host"`
	Port     *int64  `json:"port" tf:"port"`
}

type DataSourceSpecParametersMysql struct {
	Database *string `json:"database" tf:"database"`
	Host     *string `json:"host" tf:"host"`
	Port     *int64  `json:"port" tf:"port"`
}

type DataSourceSpecParametersOracle struct {
	Database *string `json:"database" tf:"database"`
	Host     *string `json:"host" tf:"host"`
	Port     *int64  `json:"port" tf:"port"`
}

type DataSourceSpecParametersPostgresql struct {
	Database *string `json:"database" tf:"database"`
	Host     *string `json:"host" tf:"host"`
	Port     *int64  `json:"port" tf:"port"`
}

type DataSourceSpecParametersPresto struct {
	Catalog *string `json:"catalog" tf:"catalog"`
	Host    *string `json:"host" tf:"host"`
	Port    *int64  `json:"port" tf:"port"`
}

type DataSourceSpecParametersRds struct {
	Database   *string `json:"database" tf:"database"`
	InstanceID *string `json:"instanceID" tf:"instance_id"`
}

type DataSourceSpecParametersRedshift struct {
	// +optional
	ClusterID *string `json:"clusterID,omitempty" tf:"cluster_id"`
	Database  *string `json:"database" tf:"database"`
	// +optional
	Host *string `json:"host,omitempty" tf:"host"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
}

type DataSourceSpecParametersS3ManifestFileLocation struct {
	Bucket *string `json:"bucket" tf:"bucket"`
	Key    *string `json:"key" tf:"key"`
}

type DataSourceSpecParametersS3 struct {
	ManifestFileLocation *DataSourceSpecParametersS3ManifestFileLocation `json:"manifestFileLocation" tf:"manifest_file_location"`
}

type DataSourceSpecParametersServiceNow struct {
	SiteBaseURL *string `json:"siteBaseURL" tf:"site_base_url"`
}

type DataSourceSpecParametersSnowflake struct {
	Database  *string `json:"database" tf:"database"`
	Host      *string `json:"host" tf:"host"`
	Warehouse *string `json:"warehouse" tf:"warehouse"`
}

type DataSourceSpecParametersSpark struct {
	Host *string `json:"host" tf:"host"`
	Port *int64  `json:"port" tf:"port"`
}

type DataSourceSpecParametersSqlServer struct {
	Database *string `json:"database" tf:"database"`
	Host     *string `json:"host" tf:"host"`
	Port     *int64  `json:"port" tf:"port"`
}

type DataSourceSpecParametersTeradata struct {
	Database *string `json:"database" tf:"database"`
	Host     *string `json:"host" tf:"host"`
	Port     *int64  `json:"port" tf:"port"`
}

type DataSourceSpecParametersTwitter struct {
	MaxRows *int64  `json:"maxRows" tf:"max_rows"`
	Query   *string `json:"query" tf:"query"`
}

type DataSourceSpecParameters struct {
	// +optional
	AmazonElasticsearch *DataSourceSpecParametersAmazonElasticsearch `json:"amazonElasticsearch,omitempty" tf:"amazon_elasticsearch"`
	// +optional
	Athena *DataSourceSpecParametersAthena `json:"athena,omitempty" tf:"athena"`
	// +optional
	Aurora *DataSourceSpecParametersAurora `json:"aurora,omitempty" tf:"aurora"`
	// +optional
	AuroraPostgresql *DataSourceSpecParametersAuroraPostgresql `json:"auroraPostgresql,omitempty" tf:"aurora_postgresql"`
	// +optional
	AwsIotAnalytics *DataSourceSpecParametersAwsIotAnalytics `json:"awsIotAnalytics,omitempty" tf:"aws_iot_analytics"`
	// +optional
	Jira *DataSourceSpecParametersJira `json:"jira,omitempty" tf:"jira"`
	// +optional
	MariaDb *DataSourceSpecParametersMariaDb `json:"mariaDb,omitempty" tf:"maria_db"`
	// +optional
	Mysql *DataSourceSpecParametersMysql `json:"mysql,omitempty" tf:"mysql"`
	// +optional
	Oracle *DataSourceSpecParametersOracle `json:"oracle,omitempty" tf:"oracle"`
	// +optional
	Postgresql *DataSourceSpecParametersPostgresql `json:"postgresql,omitempty" tf:"postgresql"`
	// +optional
	Presto *DataSourceSpecParametersPresto `json:"presto,omitempty" tf:"presto"`
	// +optional
	Rds *DataSourceSpecParametersRds `json:"rds,omitempty" tf:"rds"`
	// +optional
	Redshift *DataSourceSpecParametersRedshift `json:"redshift,omitempty" tf:"redshift"`
	// +optional
	S3 *DataSourceSpecParametersS3 `json:"s3,omitempty" tf:"s3"`
	// +optional
	ServiceNow *DataSourceSpecParametersServiceNow `json:"serviceNow,omitempty" tf:"service_now"`
	// +optional
	Snowflake *DataSourceSpecParametersSnowflake `json:"snowflake,omitempty" tf:"snowflake"`
	// +optional
	Spark *DataSourceSpecParametersSpark `json:"spark,omitempty" tf:"spark"`
	// +optional
	SqlServer *DataSourceSpecParametersSqlServer `json:"sqlServer,omitempty" tf:"sql_server"`
	// +optional
	Teradata *DataSourceSpecParametersTeradata `json:"teradata,omitempty" tf:"teradata"`
	// +optional
	Twitter *DataSourceSpecParametersTwitter `json:"twitter,omitempty" tf:"twitter"`
}

type DataSourceSpecPermission struct {
	// +kubebuilder:validation:MaxItems=16
	// +kubebuilder:validation:MinItems=1
	Actions   []string `json:"actions" tf:"actions"`
	Principal *string  `json:"principal" tf:"principal"`
}

type DataSourceSpecSslProperties struct {
	DisableSsl *bool `json:"disableSsl" tf:"disable_ssl"`
}

type DataSourceSpecVpcConnectionProperties struct {
	VpcConnectionArn *string `json:"vpcConnectionArn" tf:"vpc_connection_arn"`
}

type DataSourceSpec struct {
	State *DataSourceSpecResource `json:"state,omitempty" tf:"-"`

	Resource DataSourceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DataSourceSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AwsAccountID *string `json:"awsAccountID,omitempty" tf:"aws_account_id"`
	// +optional
	Credentials  *DataSourceSpecCredentials `json:"credentials,omitempty" tf:"credentials"`
	DataSourceID *string                    `json:"dataSourceID" tf:"data_source_id"`
	Name         *string                    `json:"name" tf:"name"`
	Parameters   *DataSourceSpecParameters  `json:"parameters" tf:"parameters"`
	// +optional
	// +kubebuilder:validation:MaxItems=64
	// +kubebuilder:validation:MinItems=1
	Permission []DataSourceSpecPermission `json:"permission,omitempty" tf:"permission"`
	// +optional
	SslProperties *DataSourceSpecSslProperties `json:"sslProperties,omitempty" tf:"ssl_properties"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	Type    *string            `json:"type" tf:"type"`
	// +optional
	VpcConnectionProperties *DataSourceSpecVpcConnectionProperties `json:"vpcConnectionProperties,omitempty" tf:"vpc_connection_properties"`
}

type DataSourceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DataSourceList is a list of DataSources
type DataSourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DataSource CRD objects
	Items []DataSource `json:"items,omitempty"`
}
