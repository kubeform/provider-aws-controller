/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type LocationHdfs struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LocationHdfsSpec   `json:"spec,omitempty"`
	Status            LocationHdfsStatus `json:"status,omitempty"`
}

type LocationHdfsSpecNameNode struct {
	Hostname *string `json:"hostname" tf:"hostname"`
	Port     *int64  `json:"port" tf:"port"`
}

type LocationHdfsSpecQopConfiguration struct {
	// +optional
	DataTransferProtection *string `json:"dataTransferProtection,omitempty" tf:"data_transfer_protection"`
	// +optional
	RpcProtection *string `json:"rpcProtection,omitempty" tf:"rpc_protection"`
}

type LocationHdfsSpec struct {
	State *LocationHdfsSpecResource `json:"state,omitempty" tf:"-"`

	Resource LocationHdfsSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type LocationHdfsSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AgentArns []string `json:"agentArns" tf:"agent_arns"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AuthenticationType *string `json:"authenticationType,omitempty" tf:"authentication_type"`
	// +optional
	BlockSize *int64 `json:"blockSize,omitempty" tf:"block_size"`
	// +optional
	KerberosKeytab *string `json:"kerberosKeytab,omitempty" tf:"kerberos_keytab"`
	// +optional
	KerberosKrb5Conf *string `json:"kerberosKrb5Conf,omitempty" tf:"kerberos_krb5_conf"`
	// +optional
	KerberosPrincipal *string `json:"kerberosPrincipal,omitempty" tf:"kerberos_principal"`
	// +optional
	KmsKeyProviderURI *string `json:"kmsKeyProviderURI,omitempty" tf:"kms_key_provider_uri"`
	// +kubebuilder:validation:MinItems=1
	NameNode []LocationHdfsSpecNameNode `json:"nameNode" tf:"name_node"`
	// +optional
	QopConfiguration *LocationHdfsSpecQopConfiguration `json:"qopConfiguration,omitempty" tf:"qop_configuration"`
	// +optional
	ReplicationFactor *int64 `json:"replicationFactor,omitempty" tf:"replication_factor"`
	// +optional
	SimpleUser *string `json:"simpleUser,omitempty" tf:"simple_user"`
	// +optional
	Subdirectory *string `json:"subdirectory,omitempty" tf:"subdirectory"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	// +optional
	Uri *string `json:"uri,omitempty" tf:"uri"`
}

type LocationHdfsStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// LocationHdfsList is a list of LocationHdfss
type LocationHdfsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of LocationHdfs CRD objects
	Items []LocationHdfs `json:"items,omitempty"`
}
