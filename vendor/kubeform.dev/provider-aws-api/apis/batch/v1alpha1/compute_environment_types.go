/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ComputeEnvironment struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ComputeEnvironmentSpec   `json:"spec,omitempty"`
	Status            ComputeEnvironmentStatus `json:"status,omitempty"`
}

type ComputeEnvironmentSpecComputeResourcesEc2Configuration struct {
	// +optional
	ImageIDOverride *string `json:"imageIDOverride,omitempty" tf:"image_id_override"`
	// +optional
	ImageType *string `json:"imageType,omitempty" tf:"image_type"`
}

type ComputeEnvironmentSpecComputeResourcesLaunchTemplate struct {
	// +optional
	LaunchTemplateID *string `json:"launchTemplateID,omitempty" tf:"launch_template_id"`
	// +optional
	LaunchTemplateName *string `json:"launchTemplateName,omitempty" tf:"launch_template_name"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type ComputeEnvironmentSpecComputeResources struct {
	// +optional
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy"`
	// +optional
	BidPercentage *int64 `json:"bidPercentage,omitempty" tf:"bid_percentage"`
	// +optional
	DesiredVcpus *int64 `json:"desiredVcpus,omitempty" tf:"desired_vcpus"`
	// +optional
	Ec2Configuration *ComputeEnvironmentSpecComputeResourcesEc2Configuration `json:"ec2Configuration,omitempty" tf:"ec2_configuration"`
	// +optional
	Ec2KeyPair *string `json:"ec2KeyPair,omitempty" tf:"ec2_key_pair"`
	// +optional
	ImageID *string `json:"imageID,omitempty" tf:"image_id"`
	// +optional
	InstanceRole *string `json:"instanceRole,omitempty" tf:"instance_role"`
	// +optional
	InstanceType []string `json:"instanceType,omitempty" tf:"instance_type"`
	// +optional
	LaunchTemplate *ComputeEnvironmentSpecComputeResourcesLaunchTemplate `json:"launchTemplate,omitempty" tf:"launch_template"`
	MaxVcpus       *int64                                                `json:"maxVcpus" tf:"max_vcpus"`
	// +optional
	MinVcpus         *int64   `json:"minVcpus,omitempty" tf:"min_vcpus"`
	SecurityGroupIDS []string `json:"securityGroupIDS" tf:"security_group_ids"`
	// +optional
	SpotIamFleetRole *string  `json:"spotIamFleetRole,omitempty" tf:"spot_iam_fleet_role"`
	Subnets          []string `json:"subnets" tf:"subnets"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	Type *string            `json:"type" tf:"type"`
}

type ComputeEnvironmentSpec struct {
	State *ComputeEnvironmentSpecResource `json:"state,omitempty" tf:"-"`

	Resource ComputeEnvironmentSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ComputeEnvironmentSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	ComputeEnvironmentName *string `json:"computeEnvironmentName,omitempty" tf:"compute_environment_name"`
	// +optional
	ComputeEnvironmentNamePrefix *string `json:"computeEnvironmentNamePrefix,omitempty" tf:"compute_environment_name_prefix"`
	// +optional
	ComputeResources *ComputeEnvironmentSpecComputeResources `json:"computeResources,omitempty" tf:"compute_resources"`
	// +optional
	EcsClusterArn *string `json:"ecsClusterArn,omitempty" tf:"ecs_cluster_arn"`
	// +optional
	ServiceRole *string `json:"serviceRole,omitempty" tf:"service_role"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	StatusReason *string `json:"statusReason,omitempty" tf:"status_reason"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	Type    *string            `json:"type" tf:"type"`
}

type ComputeEnvironmentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ComputeEnvironmentList is a list of ComputeEnvironments
type ComputeEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ComputeEnvironment CRD objects
	Items []ComputeEnvironment `json:"items,omitempty"`
}
