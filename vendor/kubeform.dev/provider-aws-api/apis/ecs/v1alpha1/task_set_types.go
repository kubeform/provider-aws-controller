/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type TaskSet struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TaskSetSpec   `json:"spec,omitempty"`
	Status            TaskSetStatus `json:"status,omitempty"`
}

type TaskSetSpecCapacityProviderStrategy struct {
	// +optional
	Base             *int64  `json:"base,omitempty" tf:"base"`
	CapacityProvider *string `json:"capacityProvider" tf:"capacity_provider"`
	Weight           *int64  `json:"weight" tf:"weight"`
}

type TaskSetSpecLoadBalancer struct {
	ContainerName *string `json:"containerName" tf:"container_name"`
	// +optional
	ContainerPort *int64 `json:"containerPort,omitempty" tf:"container_port"`
	// +optional
	LoadBalancerName *string `json:"loadBalancerName,omitempty" tf:"load_balancer_name"`
	// +optional
	TargetGroupArn *string `json:"targetGroupArn,omitempty" tf:"target_group_arn"`
}

type TaskSetSpecNetworkConfiguration struct {
	// +optional
	AssignPublicIP *bool `json:"assignPublicIP,omitempty" tf:"assign_public_ip"`
	// +optional
	// +kubebuilder:validation:MaxItems=5
	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`
	// +kubebuilder:validation:MaxItems=16
	Subnets []string `json:"subnets" tf:"subnets"`
}

type TaskSetSpecScale struct {
	// +optional
	Unit *string `json:"unit,omitempty" tf:"unit"`
	// +optional
	Value *float64 `json:"value,omitempty" tf:"value"`
}

type TaskSetSpecServiceRegistries struct {
	// +optional
	ContainerName *string `json:"containerName,omitempty" tf:"container_name"`
	// +optional
	ContainerPort *int64 `json:"containerPort,omitempty" tf:"container_port"`
	// +optional
	Port        *int64  `json:"port,omitempty" tf:"port"`
	RegistryArn *string `json:"registryArn" tf:"registry_arn"`
}

type TaskSetSpec struct {
	State *TaskSetSpecResource `json:"state,omitempty" tf:"-"`

	Resource TaskSetSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type TaskSetSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CapacityProviderStrategy []TaskSetSpecCapacityProviderStrategy `json:"capacityProviderStrategy,omitempty" tf:"capacity_provider_strategy"`
	Cluster                  *string                               `json:"cluster" tf:"cluster"`
	// +optional
	ExternalID *string `json:"externalID,omitempty" tf:"external_id"`
	// +optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete"`
	// +optional
	LaunchType *string `json:"launchType,omitempty" tf:"launch_type"`
	// +optional
	LoadBalancer []TaskSetSpecLoadBalancer `json:"loadBalancer,omitempty" tf:"load_balancer"`
	// +optional
	NetworkConfiguration *TaskSetSpecNetworkConfiguration `json:"networkConfiguration,omitempty" tf:"network_configuration"`
	// +optional
	PlatformVersion *string `json:"platformVersion,omitempty" tf:"platform_version"`
	// +optional
	Scale   *TaskSetSpecScale `json:"scale,omitempty" tf:"scale"`
	Service *string           `json:"service" tf:"service"`
	// +optional
	ServiceRegistries *TaskSetSpecServiceRegistries `json:"serviceRegistries,omitempty" tf:"service_registries"`
	// +optional
	StabilityStatus *string `json:"stabilityStatus,omitempty" tf:"stability_status"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll        *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	TaskDefinition *string            `json:"taskDefinition" tf:"task_definition"`
	// +optional
	TaskSetID *string `json:"taskSetID,omitempty" tf:"task_set_id"`
	// +optional
	WaitUntilStable *bool `json:"waitUntilStable,omitempty" tf:"wait_until_stable"`
	// +optional
	WaitUntilStableTimeout *string `json:"waitUntilStableTimeout,omitempty" tf:"wait_until_stable_timeout"`
}

type TaskSetStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// TaskSetList is a list of TaskSets
type TaskSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of TaskSet CRD objects
	Items []TaskSet `json:"items,omitempty"`
}
