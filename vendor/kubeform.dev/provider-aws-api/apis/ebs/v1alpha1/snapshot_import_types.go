/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type SnapshotImport struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotImportSpec   `json:"spec,omitempty"`
	Status            SnapshotImportStatus `json:"status,omitempty"`
}

type SnapshotImportSpecClientData struct {
	// +optional
	Comment *string `json:"comment,omitempty" tf:"comment"`
	// +optional
	UploadEnd *string `json:"uploadEnd,omitempty" tf:"upload_end"`
	// +optional
	UploadSize *float64 `json:"uploadSize,omitempty" tf:"upload_size"`
	// +optional
	UploadStart *string `json:"uploadStart,omitempty" tf:"upload_start"`
}

type SnapshotImportSpecDiskContainerUserBucket struct {
	S3Bucket *string `json:"s3Bucket" tf:"s3_bucket"`
	S3Key    *string `json:"s3Key" tf:"s3_key"`
}

type SnapshotImportSpecDiskContainer struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	Format      *string `json:"format" tf:"format"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
	// +optional
	UserBucket *SnapshotImportSpecDiskContainerUserBucket `json:"userBucket,omitempty" tf:"user_bucket"`
}

type SnapshotImportSpec struct {
	State *SnapshotImportSpecResource `json:"state,omitempty" tf:"-"`

	Resource SnapshotImportSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type SnapshotImportSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	ClientData *SnapshotImportSpecClientData `json:"clientData,omitempty" tf:"client_data"`
	// +optional
	DataEncryptionKeyID *string `json:"dataEncryptionKeyID,omitempty" tf:"data_encryption_key_id"`
	// +optional
	Description   *string                          `json:"description,omitempty" tf:"description"`
	DiskContainer *SnapshotImportSpecDiskContainer `json:"diskContainer" tf:"disk_container"`
	// +optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`
	// +optional
	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
	// +optional
	OutpostArn *string `json:"outpostArn,omitempty" tf:"outpost_arn"`
	// +optional
	OwnerAlias *string `json:"ownerAlias,omitempty" tf:"owner_alias"`
	// +optional
	OwnerID *string `json:"ownerID,omitempty" tf:"owner_id"`
	// +optional
	PermanentRestore *bool `json:"permanentRestore,omitempty" tf:"permanent_restore"`
	// +optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name"`
	// +optional
	StorageTier *string `json:"storageTier,omitempty" tf:"storage_tier"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	// +optional
	TemporaryRestoreDays *int64 `json:"temporaryRestoreDays,omitempty" tf:"temporary_restore_days"`
	// +optional
	VolumeID *string `json:"volumeID,omitempty" tf:"volume_id"`
	// +optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`
}

type SnapshotImportStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SnapshotImportList is a list of SnapshotImports
type SnapshotImportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of SnapshotImport CRD objects
	Items []SnapshotImport `json:"items,omitempty"`
}
