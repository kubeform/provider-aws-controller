/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ProvisionedProduct struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProvisionedProductSpec   `json:"spec,omitempty"`
	Status            ProvisionedProductStatus `json:"status,omitempty"`
}

type ProvisionedProductSpecOutputs struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Key *string `json:"key,omitempty" tf:"key"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type ProvisionedProductSpecProvisioningParameters struct {
	Key *string `json:"key" tf:"key"`
	// +optional
	UsePreviousValue *bool `json:"usePreviousValue,omitempty" tf:"use_previous_value"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type ProvisionedProductSpecStackSetProvisioningPreferences struct {
	// +optional
	Accounts []string `json:"accounts,omitempty" tf:"accounts"`
	// +optional
	FailureToleranceCount *int64 `json:"failureToleranceCount,omitempty" tf:"failure_tolerance_count"`
	// +optional
	FailureTolerancePercentage *int64 `json:"failureTolerancePercentage,omitempty" tf:"failure_tolerance_percentage"`
	// +optional
	MaxConcurrencyCount *int64 `json:"maxConcurrencyCount,omitempty" tf:"max_concurrency_count"`
	// +optional
	MaxConcurrencyPercentage *int64 `json:"maxConcurrencyPercentage,omitempty" tf:"max_concurrency_percentage"`
	// +optional
	Regions []string `json:"regions,omitempty" tf:"regions"`
}

type ProvisionedProductSpec struct {
	State *ProvisionedProductSpecResource `json:"state,omitempty" tf:"-"`

	Resource ProvisionedProductSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ProvisionedProductSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AcceptLanguage *string `json:"acceptLanguage,omitempty" tf:"accept_language"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CloudwatchDashboardNames []string `json:"cloudwatchDashboardNames,omitempty" tf:"cloudwatch_dashboard_names"`
	// +optional
	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time"`
	// +optional
	IgnoreErrors *bool `json:"ignoreErrors,omitempty" tf:"ignore_errors"`
	// +optional
	LastProvisioningRecordID *string `json:"lastProvisioningRecordID,omitempty" tf:"last_provisioning_record_id"`
	// +optional
	LastRecordID *string `json:"lastRecordID,omitempty" tf:"last_record_id"`
	// +optional
	LastSuccessfulProvisioningRecordID *string `json:"lastSuccessfulProvisioningRecordID,omitempty" tf:"last_successful_provisioning_record_id"`
	// +optional
	LaunchRoleArn *string `json:"launchRoleArn,omitempty" tf:"launch_role_arn"`
	Name          *string `json:"name" tf:"name"`
	// +optional
	NotificationArns []string `json:"notificationArns,omitempty" tf:"notification_arns"`
	// +optional
	Outputs []ProvisionedProductSpecOutputs `json:"outputs,omitempty" tf:"outputs"`
	// +optional
	PathID *string `json:"pathID,omitempty" tf:"path_id"`
	// +optional
	PathName *string `json:"pathName,omitempty" tf:"path_name"`
	// +optional
	ProductID *string `json:"productID,omitempty" tf:"product_id"`
	// +optional
	ProductName *string `json:"productName,omitempty" tf:"product_name"`
	// +optional
	ProvisioningArtifactID *string `json:"provisioningArtifactID,omitempty" tf:"provisioning_artifact_id"`
	// +optional
	ProvisioningArtifactName *string `json:"provisioningArtifactName,omitempty" tf:"provisioning_artifact_name"`
	// +optional
	ProvisioningParameters []ProvisionedProductSpecProvisioningParameters `json:"provisioningParameters,omitempty" tf:"provisioning_parameters"`
	// +optional
	RetainPhysicalResources *bool `json:"retainPhysicalResources,omitempty" tf:"retain_physical_resources"`
	// +optional
	StackSetProvisioningPreferences *ProvisionedProductSpecStackSetProvisioningPreferences `json:"stackSetProvisioningPreferences,omitempty" tf:"stack_set_provisioning_preferences"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	StatusMessage *string `json:"statusMessage,omitempty" tf:"status_message"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ProvisionedProductStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ProvisionedProductList is a list of ProvisionedProducts
type ProvisionedProductList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ProvisionedProduct CRD objects
	Items []ProvisionedProduct `json:"items,omitempty"`
}
