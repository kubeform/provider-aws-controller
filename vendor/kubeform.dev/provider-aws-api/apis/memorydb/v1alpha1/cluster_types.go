/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Cluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec,omitempty"`
	Status            ClusterStatus `json:"status,omitempty"`
}

type ClusterSpecClusterEndpoint struct {
	// +optional
	Address *string `json:"address,omitempty" tf:"address"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
}

type ClusterSpecShardsNodesEndpoint struct {
	// +optional
	Address *string `json:"address,omitempty" tf:"address"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
}

type ClusterSpecShardsNodes struct {
	// +optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// +optional
	Endpoint []ClusterSpecShardsNodesEndpoint `json:"endpoint,omitempty" tf:"endpoint"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type ClusterSpecShards struct {
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Nodes []ClusterSpecShardsNodes `json:"nodes,omitempty" tf:"nodes"`
	// +optional
	NumNodes *int64 `json:"numNodes,omitempty" tf:"num_nodes"`
	// +optional
	Slots *string `json:"slots,omitempty" tf:"slots"`
}

type ClusterSpec struct {
	State *ClusterSpecResource `json:"state,omitempty" tf:"-"`

	Resource ClusterSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ClusterSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AclName *string `json:"aclName" tf:"acl_name"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AutoMinorVersionUpgrade *bool `json:"autoMinorVersionUpgrade,omitempty" tf:"auto_minor_version_upgrade"`
	// +optional
	ClusterEndpoint []ClusterSpecClusterEndpoint `json:"clusterEndpoint,omitempty" tf:"cluster_endpoint"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	EnginePatchVersion *string `json:"enginePatchVersion,omitempty" tf:"engine_patch_version"`
	// +optional
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version"`
	// +optional
	FinalSnapshotName *string `json:"finalSnapshotName,omitempty" tf:"final_snapshot_name"`
	// +optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`
	// +optional
	MaintenanceWindow *string `json:"maintenanceWindow,omitempty" tf:"maintenance_window"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`
	NodeType   *string `json:"nodeType" tf:"node_type"`
	// +optional
	NumReplicasPerShard *int64 `json:"numReplicasPerShard,omitempty" tf:"num_replicas_per_shard"`
	// +optional
	NumShards *int64 `json:"numShards,omitempty" tf:"num_shards"`
	// +optional
	ParameterGroupName *string `json:"parameterGroupName,omitempty" tf:"parameter_group_name"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	SecurityGroupIDS []string `json:"securityGroupIDS,omitempty" tf:"security_group_ids"`
	// +optional
	Shards []ClusterSpecShards `json:"shards,omitempty" tf:"shards"`
	// +optional
	SnapshotArns []string `json:"snapshotArns,omitempty" tf:"snapshot_arns"`
	// +optional
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name"`
	// +optional
	SnapshotRetentionLimit *int64 `json:"snapshotRetentionLimit,omitempty" tf:"snapshot_retention_limit"`
	// +optional
	SnapshotWindow *string `json:"snapshotWindow,omitempty" tf:"snapshot_window"`
	// +optional
	SnsTopicArn *string `json:"snsTopicArn,omitempty" tf:"sns_topic_arn"`
	// +optional
	SubnetGroupName *string `json:"subnetGroupName,omitempty" tf:"subnet_group_name"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	// +optional
	TlsEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled"`
}

type ClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ClusterList is a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Cluster CRD objects
	Items []Cluster `json:"items,omitempty"`
}
