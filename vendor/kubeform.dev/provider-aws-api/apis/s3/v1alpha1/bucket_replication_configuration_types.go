/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BucketReplicationConfiguration struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketReplicationConfigurationSpec   `json:"spec,omitempty"`
	Status            BucketReplicationConfigurationStatus `json:"status,omitempty"`
}

type BucketReplicationConfigurationSpecRuleDeleteMarkerReplication struct {
	Status *string `json:"status" tf:"status"`
}

type BucketReplicationConfigurationSpecRuleDestinationAccessControlTranslation struct {
	Owner *string `json:"owner" tf:"owner"`
}

type BucketReplicationConfigurationSpecRuleDestinationEncryptionConfiguration struct {
	ReplicaKmsKeyID *string `json:"replicaKmsKeyID" tf:"replica_kms_key_id"`
}

type BucketReplicationConfigurationSpecRuleDestinationMetricsEventThreshold struct {
	Minutes *int64 `json:"minutes" tf:"minutes"`
}

type BucketReplicationConfigurationSpecRuleDestinationMetrics struct {
	// +optional
	EventThreshold *BucketReplicationConfigurationSpecRuleDestinationMetricsEventThreshold `json:"eventThreshold,omitempty" tf:"event_threshold"`
	Status         *string                                                                 `json:"status" tf:"status"`
}

type BucketReplicationConfigurationSpecRuleDestinationReplicationTimeTime struct {
	Minutes *int64 `json:"minutes" tf:"minutes"`
}

type BucketReplicationConfigurationSpecRuleDestinationReplicationTime struct {
	Status *string                                                               `json:"status" tf:"status"`
	Time   *BucketReplicationConfigurationSpecRuleDestinationReplicationTimeTime `json:"time" tf:"time"`
}

type BucketReplicationConfigurationSpecRuleDestination struct {
	// +optional
	AccessControlTranslation *BucketReplicationConfigurationSpecRuleDestinationAccessControlTranslation `json:"accessControlTranslation,omitempty" tf:"access_control_translation"`
	// +optional
	Account *string `json:"account,omitempty" tf:"account"`
	Bucket  *string `json:"bucket" tf:"bucket"`
	// +optional
	EncryptionConfiguration *BucketReplicationConfigurationSpecRuleDestinationEncryptionConfiguration `json:"encryptionConfiguration,omitempty" tf:"encryption_configuration"`
	// +optional
	Metrics *BucketReplicationConfigurationSpecRuleDestinationMetrics `json:"metrics,omitempty" tf:"metrics"`
	// +optional
	ReplicationTime *BucketReplicationConfigurationSpecRuleDestinationReplicationTime `json:"replicationTime,omitempty" tf:"replication_time"`
	// +optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class"`
}

type BucketReplicationConfigurationSpecRuleExistingObjectReplication struct {
	Status *string `json:"status" tf:"status"`
}

type BucketReplicationConfigurationSpecRuleFilterAnd struct {
	// +optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type BucketReplicationConfigurationSpecRuleFilterTag struct {
	Key   *string `json:"key" tf:"key"`
	Value *string `json:"value" tf:"value"`
}

type BucketReplicationConfigurationSpecRuleFilter struct {
	// +optional
	And *BucketReplicationConfigurationSpecRuleFilterAnd `json:"and,omitempty" tf:"and"`
	// +optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`
	// +optional
	Tag *BucketReplicationConfigurationSpecRuleFilterTag `json:"tag,omitempty" tf:"tag"`
}

type BucketReplicationConfigurationSpecRuleSourceSelectionCriteriaReplicaModifications struct {
	Status *string `json:"status" tf:"status"`
}

type BucketReplicationConfigurationSpecRuleSourceSelectionCriteriaSseKmsEncryptedObjects struct {
	Status *string `json:"status" tf:"status"`
}

type BucketReplicationConfigurationSpecRuleSourceSelectionCriteria struct {
	// +optional
	ReplicaModifications *BucketReplicationConfigurationSpecRuleSourceSelectionCriteriaReplicaModifications `json:"replicaModifications,omitempty" tf:"replica_modifications"`
	// +optional
	SseKmsEncryptedObjects *BucketReplicationConfigurationSpecRuleSourceSelectionCriteriaSseKmsEncryptedObjects `json:"sseKmsEncryptedObjects,omitempty" tf:"sse_kms_encrypted_objects"`
}

type BucketReplicationConfigurationSpecRule struct {
	// +optional
	DeleteMarkerReplication *BucketReplicationConfigurationSpecRuleDeleteMarkerReplication `json:"deleteMarkerReplication,omitempty" tf:"delete_marker_replication"`
	Destination             *BucketReplicationConfigurationSpecRuleDestination             `json:"destination" tf:"destination"`
	// +optional
	ExistingObjectReplication *BucketReplicationConfigurationSpecRuleExistingObjectReplication `json:"existingObjectReplication,omitempty" tf:"existing_object_replication"`
	// +optional
	Filter *BucketReplicationConfigurationSpecRuleFilter `json:"filter,omitempty" tf:"filter"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`
	// +optional
	Priority *int64 `json:"priority,omitempty" tf:"priority"`
	// +optional
	SourceSelectionCriteria *BucketReplicationConfigurationSpecRuleSourceSelectionCriteria `json:"sourceSelectionCriteria,omitempty" tf:"source_selection_criteria"`
	Status                  *string                                                        `json:"status" tf:"status"`
}

type BucketReplicationConfigurationSpec struct {
	State *BucketReplicationConfigurationSpecResource `json:"state,omitempty" tf:"-"`

	Resource BucketReplicationConfigurationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type BucketReplicationConfigurationSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Bucket *string `json:"bucket" tf:"bucket"`
	Role   *string `json:"role" tf:"role"`
	// +kubebuilder:validation:MaxItems=1000
	Rule []BucketReplicationConfigurationSpecRule `json:"rule" tf:"rule"`
}

type BucketReplicationConfigurationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BucketReplicationConfigurationList is a list of BucketReplicationConfigurations
type BucketReplicationConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of BucketReplicationConfiguration CRD objects
	Items []BucketReplicationConfiguration `json:"items,omitempty"`
}
