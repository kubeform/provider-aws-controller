/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type EventDataStore struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventDataStoreSpec   `json:"spec,omitempty"`
	Status            EventDataStoreStatus `json:"status,omitempty"`
}

type EventDataStoreSpecAdvancedEventSelectorFieldSelector struct {
	// +optional
	// +kubebuilder:validation:MinItems=1
	EndsWith []string `json:"endsWith,omitempty" tf:"ends_with"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	Equals []string `json:"equals,omitempty" tf:"equals"`
	// +optional
	Field *string `json:"field,omitempty" tf:"field"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	NotEndsWith []string `json:"notEndsWith,omitempty" tf:"not_ends_with"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	NotEquals []string `json:"notEquals,omitempty" tf:"not_equals"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	NotStartsWith []string `json:"notStartsWith,omitempty" tf:"not_starts_with"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	StartsWith []string `json:"startsWith,omitempty" tf:"starts_with"`
}

type EventDataStoreSpecAdvancedEventSelector struct {
	// +optional
	// +kubebuilder:validation:MinItems=1
	FieldSelector []EventDataStoreSpecAdvancedEventSelectorFieldSelector `json:"fieldSelector,omitempty" tf:"field_selector"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type EventDataStoreSpec struct {
	State *EventDataStoreSpecResource `json:"state,omitempty" tf:"-"`

	Resource EventDataStoreSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type EventDataStoreSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AdvancedEventSelector []EventDataStoreSpecAdvancedEventSelector `json:"advancedEventSelector,omitempty" tf:"advanced_event_selector"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	MultiRegionEnabled *bool   `json:"multiRegionEnabled,omitempty" tf:"multi_region_enabled"`
	Name               *string `json:"name" tf:"name"`
	// +optional
	OrganizationEnabled *bool `json:"organizationEnabled,omitempty" tf:"organization_enabled"`
	// +optional
	RetentionPeriod *int64 `json:"retentionPeriod,omitempty" tf:"retention_period"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	// +optional
	TerminationProtectionEnabled *bool `json:"terminationProtectionEnabled,omitempty" tf:"termination_protection_enabled"`
}

type EventDataStoreStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EventDataStoreList is a list of EventDataStores
type EventDataStoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of EventDataStore CRD objects
	Items []EventDataStore `json:"items,omitempty"`
}
