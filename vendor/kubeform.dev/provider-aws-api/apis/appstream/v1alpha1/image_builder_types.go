/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ImageBuilder struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageBuilderSpec   `json:"spec,omitempty"`
	Status            ImageBuilderStatus `json:"status,omitempty"`
}

type ImageBuilderSpecAccessEndpoint struct {
	EndpointType *string `json:"endpointType" tf:"endpoint_type"`
	// +optional
	VpceID *string `json:"vpceID,omitempty" tf:"vpce_id"`
}

type ImageBuilderSpecDomainJoinInfo struct {
	// +optional
	DirectoryName *string `json:"directoryName,omitempty" tf:"directory_name"`
	// +optional
	OrganizationalUnitDistinguishedName *string `json:"organizationalUnitDistinguishedName,omitempty" tf:"organizational_unit_distinguished_name"`
}

type ImageBuilderSpecVpcConfig struct {
	// +optional
	SecurityGroupIDS []string `json:"securityGroupIDS,omitempty" tf:"security_group_ids"`
	// +optional
	SubnetIDS []string `json:"subnetIDS,omitempty" tf:"subnet_ids"`
}

type ImageBuilderSpec struct {
	State *ImageBuilderSpecResource `json:"state,omitempty" tf:"-"`

	Resource ImageBuilderSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ImageBuilderSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	// +kubebuilder:validation:MaxItems=4
	// +kubebuilder:validation:MinItems=1
	AccessEndpoint []ImageBuilderSpecAccessEndpoint `json:"accessEndpoint,omitempty" tf:"access_endpoint"`
	// +optional
	AppstreamAgentVersion *string `json:"appstreamAgentVersion,omitempty" tf:"appstream_agent_version"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	DomainJoinInfo *ImageBuilderSpecDomainJoinInfo `json:"domainJoinInfo,omitempty" tf:"domain_join_info"`
	// +optional
	EnableDefaultInternetAccess *bool `json:"enableDefaultInternetAccess,omitempty" tf:"enable_default_internet_access"`
	// +optional
	IamRoleArn *string `json:"iamRoleArn,omitempty" tf:"iam_role_arn"`
	// +optional
	ImageArn *string `json:"imageArn,omitempty" tf:"image_arn"`
	// +optional
	ImageName    *string `json:"imageName,omitempty" tf:"image_name"`
	InstanceType *string `json:"instanceType" tf:"instance_type"`
	Name         *string `json:"name" tf:"name"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	// +optional
	VpcConfig *ImageBuilderSpecVpcConfig `json:"vpcConfig,omitempty" tf:"vpc_config"`
}

type ImageBuilderStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ImageBuilderList is a list of ImageBuilders
type ImageBuilderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ImageBuilder CRD objects
	Items []ImageBuilder `json:"items,omitempty"`
}
