/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Stack struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackSpec   `json:"spec,omitempty"`
	Status            StackStatus `json:"status,omitempty"`
}

type StackSpecAccessEndpoints struct {
	EndpointType *string `json:"endpointType" tf:"endpoint_type"`
	// +optional
	VpceID *string `json:"vpceID,omitempty" tf:"vpce_id"`
}

type StackSpecApplicationSettings struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	SettingsGroup *string `json:"settingsGroup,omitempty" tf:"settings_group"`
}

type StackSpecStorageConnectors struct {
	ConnectorType *string `json:"connectorType" tf:"connector_type"`
	// +optional
	// +kubebuilder:validation:MaxItems=50
	Domains []string `json:"domains,omitempty" tf:"domains"`
	// +optional
	ResourceIdentifier *string `json:"resourceIdentifier,omitempty" tf:"resource_identifier"`
}

type StackSpecUserSettings struct {
	Action     *string `json:"action" tf:"action"`
	Permission *string `json:"permission" tf:"permission"`
}

type StackSpec struct {
	State *StackSpecResource `json:"state,omitempty" tf:"-"`

	Resource StackSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type StackSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	// +kubebuilder:validation:MaxItems=4
	// +kubebuilder:validation:MinItems=1
	AccessEndpoints []StackSpecAccessEndpoints `json:"accessEndpoints,omitempty" tf:"access_endpoints"`
	// +optional
	ApplicationSettings *StackSpecApplicationSettings `json:"applicationSettings,omitempty" tf:"application_settings"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	// +kubebuilder:validation:MaxItems=20
	// +kubebuilder:validation:MinItems=1
	EmbedHostDomains []string `json:"embedHostDomains,omitempty" tf:"embed_host_domains"`
	// +optional
	FeedbackURL *string `json:"feedbackURL,omitempty" tf:"feedback_url"`
	Name        *string `json:"name" tf:"name"`
	// +optional
	RedirectURL *string `json:"redirectURL,omitempty" tf:"redirect_url"`
	// +optional
	StorageConnectors []StackSpecStorageConnectors `json:"storageConnectors,omitempty" tf:"storage_connectors"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	UserSettings []StackSpecUserSettings `json:"userSettings,omitempty" tf:"user_settings"`
}

type StackStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StackList is a list of Stacks
type StackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Stack CRD objects
	Items []Stack `json:"items,omitempty"`
}
