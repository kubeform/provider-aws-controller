/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DirectoryConfigSpecServiceAccountCredentials{}).Type1()): DirectoryConfigSpecServiceAccountCredentialsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecComputeCapacity{}).Type1()):                     FleetSpecComputeCapacityCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecDomainJoinInfo{}).Type1()):                      FleetSpecDomainJoinInfoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecVpcConfig{}).Type1()):                           FleetSpecVpcConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImageBuilderSpecDomainJoinInfo{}).Type1()):               ImageBuilderSpecDomainJoinInfoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImageBuilderSpecVpcConfig{}).Type1()):                    ImageBuilderSpecVpcConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(StackSpecApplicationSettings{}).Type1()):                 StackSpecApplicationSettingsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DirectoryConfigSpecServiceAccountCredentials{}).Type1()): DirectoryConfigSpecServiceAccountCredentialsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecComputeCapacity{}).Type1()):                     FleetSpecComputeCapacityCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecDomainJoinInfo{}).Type1()):                      FleetSpecDomainJoinInfoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecVpcConfig{}).Type1()):                           FleetSpecVpcConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImageBuilderSpecDomainJoinInfo{}).Type1()):               ImageBuilderSpecDomainJoinInfoCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImageBuilderSpecVpcConfig{}).Type1()):                    ImageBuilderSpecVpcConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(StackSpecApplicationSettings{}).Type1()):                 StackSpecApplicationSettingsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DirectoryConfigSpecServiceAccountCredentialsCodec struct {
}

func (DirectoryConfigSpecServiceAccountCredentialsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DirectoryConfigSpecServiceAccountCredentials)(ptr) == nil
}

func (DirectoryConfigSpecServiceAccountCredentialsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DirectoryConfigSpecServiceAccountCredentials)(ptr)
	var objs []DirectoryConfigSpecServiceAccountCredentials
	if obj != nil {
		objs = []DirectoryConfigSpecServiceAccountCredentials{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DirectoryConfigSpecServiceAccountCredentials{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DirectoryConfigSpecServiceAccountCredentialsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DirectoryConfigSpecServiceAccountCredentials)(ptr) = DirectoryConfigSpecServiceAccountCredentials{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DirectoryConfigSpecServiceAccountCredentials

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DirectoryConfigSpecServiceAccountCredentials{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DirectoryConfigSpecServiceAccountCredentials)(ptr) = objs[0]
			} else {
				*(*DirectoryConfigSpecServiceAccountCredentials)(ptr) = DirectoryConfigSpecServiceAccountCredentials{}
			}
		} else {
			*(*DirectoryConfigSpecServiceAccountCredentials)(ptr) = DirectoryConfigSpecServiceAccountCredentials{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DirectoryConfigSpecServiceAccountCredentials

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DirectoryConfigSpecServiceAccountCredentials{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DirectoryConfigSpecServiceAccountCredentials)(ptr) = obj
		} else {
			*(*DirectoryConfigSpecServiceAccountCredentials)(ptr) = DirectoryConfigSpecServiceAccountCredentials{}
		}
	default:
		iter.ReportError("decode DirectoryConfigSpecServiceAccountCredentials", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FleetSpecComputeCapacityCodec struct {
}

func (FleetSpecComputeCapacityCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FleetSpecComputeCapacity)(ptr) == nil
}

func (FleetSpecComputeCapacityCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FleetSpecComputeCapacity)(ptr)
	var objs []FleetSpecComputeCapacity
	if obj != nil {
		objs = []FleetSpecComputeCapacity{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecComputeCapacity{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FleetSpecComputeCapacityCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FleetSpecComputeCapacity)(ptr) = FleetSpecComputeCapacity{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FleetSpecComputeCapacity

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecComputeCapacity{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FleetSpecComputeCapacity)(ptr) = objs[0]
			} else {
				*(*FleetSpecComputeCapacity)(ptr) = FleetSpecComputeCapacity{}
			}
		} else {
			*(*FleetSpecComputeCapacity)(ptr) = FleetSpecComputeCapacity{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj FleetSpecComputeCapacity

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecComputeCapacity{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*FleetSpecComputeCapacity)(ptr) = obj
		} else {
			*(*FleetSpecComputeCapacity)(ptr) = FleetSpecComputeCapacity{}
		}
	default:
		iter.ReportError("decode FleetSpecComputeCapacity", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FleetSpecDomainJoinInfoCodec struct {
}

func (FleetSpecDomainJoinInfoCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FleetSpecDomainJoinInfo)(ptr) == nil
}

func (FleetSpecDomainJoinInfoCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FleetSpecDomainJoinInfo)(ptr)
	var objs []FleetSpecDomainJoinInfo
	if obj != nil {
		objs = []FleetSpecDomainJoinInfo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecDomainJoinInfo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FleetSpecDomainJoinInfoCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FleetSpecDomainJoinInfo)(ptr) = FleetSpecDomainJoinInfo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FleetSpecDomainJoinInfo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecDomainJoinInfo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FleetSpecDomainJoinInfo)(ptr) = objs[0]
			} else {
				*(*FleetSpecDomainJoinInfo)(ptr) = FleetSpecDomainJoinInfo{}
			}
		} else {
			*(*FleetSpecDomainJoinInfo)(ptr) = FleetSpecDomainJoinInfo{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj FleetSpecDomainJoinInfo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecDomainJoinInfo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*FleetSpecDomainJoinInfo)(ptr) = obj
		} else {
			*(*FleetSpecDomainJoinInfo)(ptr) = FleetSpecDomainJoinInfo{}
		}
	default:
		iter.ReportError("decode FleetSpecDomainJoinInfo", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FleetSpecVpcConfigCodec struct {
}

func (FleetSpecVpcConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FleetSpecVpcConfig)(ptr) == nil
}

func (FleetSpecVpcConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FleetSpecVpcConfig)(ptr)
	var objs []FleetSpecVpcConfig
	if obj != nil {
		objs = []FleetSpecVpcConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecVpcConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FleetSpecVpcConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FleetSpecVpcConfig)(ptr) = FleetSpecVpcConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FleetSpecVpcConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecVpcConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FleetSpecVpcConfig)(ptr) = objs[0]
			} else {
				*(*FleetSpecVpcConfig)(ptr) = FleetSpecVpcConfig{}
			}
		} else {
			*(*FleetSpecVpcConfig)(ptr) = FleetSpecVpcConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj FleetSpecVpcConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FleetSpecVpcConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*FleetSpecVpcConfig)(ptr) = obj
		} else {
			*(*FleetSpecVpcConfig)(ptr) = FleetSpecVpcConfig{}
		}
	default:
		iter.ReportError("decode FleetSpecVpcConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ImageBuilderSpecDomainJoinInfoCodec struct {
}

func (ImageBuilderSpecDomainJoinInfoCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ImageBuilderSpecDomainJoinInfo)(ptr) == nil
}

func (ImageBuilderSpecDomainJoinInfoCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ImageBuilderSpecDomainJoinInfo)(ptr)
	var objs []ImageBuilderSpecDomainJoinInfo
	if obj != nil {
		objs = []ImageBuilderSpecDomainJoinInfo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImageBuilderSpecDomainJoinInfo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ImageBuilderSpecDomainJoinInfoCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ImageBuilderSpecDomainJoinInfo)(ptr) = ImageBuilderSpecDomainJoinInfo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ImageBuilderSpecDomainJoinInfo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImageBuilderSpecDomainJoinInfo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ImageBuilderSpecDomainJoinInfo)(ptr) = objs[0]
			} else {
				*(*ImageBuilderSpecDomainJoinInfo)(ptr) = ImageBuilderSpecDomainJoinInfo{}
			}
		} else {
			*(*ImageBuilderSpecDomainJoinInfo)(ptr) = ImageBuilderSpecDomainJoinInfo{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ImageBuilderSpecDomainJoinInfo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImageBuilderSpecDomainJoinInfo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ImageBuilderSpecDomainJoinInfo)(ptr) = obj
		} else {
			*(*ImageBuilderSpecDomainJoinInfo)(ptr) = ImageBuilderSpecDomainJoinInfo{}
		}
	default:
		iter.ReportError("decode ImageBuilderSpecDomainJoinInfo", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ImageBuilderSpecVpcConfigCodec struct {
}

func (ImageBuilderSpecVpcConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ImageBuilderSpecVpcConfig)(ptr) == nil
}

func (ImageBuilderSpecVpcConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ImageBuilderSpecVpcConfig)(ptr)
	var objs []ImageBuilderSpecVpcConfig
	if obj != nil {
		objs = []ImageBuilderSpecVpcConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImageBuilderSpecVpcConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ImageBuilderSpecVpcConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ImageBuilderSpecVpcConfig)(ptr) = ImageBuilderSpecVpcConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ImageBuilderSpecVpcConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImageBuilderSpecVpcConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ImageBuilderSpecVpcConfig)(ptr) = objs[0]
			} else {
				*(*ImageBuilderSpecVpcConfig)(ptr) = ImageBuilderSpecVpcConfig{}
			}
		} else {
			*(*ImageBuilderSpecVpcConfig)(ptr) = ImageBuilderSpecVpcConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ImageBuilderSpecVpcConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImageBuilderSpecVpcConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ImageBuilderSpecVpcConfig)(ptr) = obj
		} else {
			*(*ImageBuilderSpecVpcConfig)(ptr) = ImageBuilderSpecVpcConfig{}
		}
	default:
		iter.ReportError("decode ImageBuilderSpecVpcConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type StackSpecApplicationSettingsCodec struct {
}

func (StackSpecApplicationSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*StackSpecApplicationSettings)(ptr) == nil
}

func (StackSpecApplicationSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*StackSpecApplicationSettings)(ptr)
	var objs []StackSpecApplicationSettings
	if obj != nil {
		objs = []StackSpecApplicationSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StackSpecApplicationSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (StackSpecApplicationSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*StackSpecApplicationSettings)(ptr) = StackSpecApplicationSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []StackSpecApplicationSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StackSpecApplicationSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*StackSpecApplicationSettings)(ptr) = objs[0]
			} else {
				*(*StackSpecApplicationSettings)(ptr) = StackSpecApplicationSettings{}
			}
		} else {
			*(*StackSpecApplicationSettings)(ptr) = StackSpecApplicationSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj StackSpecApplicationSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StackSpecApplicationSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*StackSpecApplicationSettings)(ptr) = obj
		} else {
			*(*StackSpecApplicationSettings)(ptr) = StackSpecApplicationSettings{}
		}
	default:
		iter.ReportError("decode StackSpecApplicationSettings", "unexpected JSON type")
	}
}
