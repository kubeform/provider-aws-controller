/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type WebACLLoggingConfiguration struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WebACLLoggingConfigurationSpec   `json:"spec,omitempty"`
	Status            WebACLLoggingConfigurationStatus `json:"status,omitempty"`
}

type WebACLLoggingConfigurationSpecLoggingFilterFilterConditionActionCondition struct {
	Action *string `json:"action" tf:"action"`
}

type WebACLLoggingConfigurationSpecLoggingFilterFilterConditionLabelNameCondition struct {
	LabelName *string `json:"labelName" tf:"label_name"`
}

type WebACLLoggingConfigurationSpecLoggingFilterFilterCondition struct {
	// +optional
	ActionCondition *WebACLLoggingConfigurationSpecLoggingFilterFilterConditionActionCondition `json:"actionCondition,omitempty" tf:"action_condition"`
	// +optional
	LabelNameCondition *WebACLLoggingConfigurationSpecLoggingFilterFilterConditionLabelNameCondition `json:"labelNameCondition,omitempty" tf:"label_name_condition"`
}

type WebACLLoggingConfigurationSpecLoggingFilterFilter struct {
	Behavior *string `json:"behavior" tf:"behavior"`
	// +kubebuilder:validation:MinItems=1
	Condition   []WebACLLoggingConfigurationSpecLoggingFilterFilterCondition `json:"condition" tf:"condition"`
	Requirement *string                                                      `json:"requirement" tf:"requirement"`
}

type WebACLLoggingConfigurationSpecLoggingFilter struct {
	DefaultBehavior *string                                             `json:"defaultBehavior" tf:"default_behavior"`
	Filter          []WebACLLoggingConfigurationSpecLoggingFilterFilter `json:"filter" tf:"filter"`
}

type WebACLLoggingConfigurationSpecRedactedFieldsAllQueryArguments struct{}

type WebACLLoggingConfigurationSpecRedactedFieldsBody struct{}

type WebACLLoggingConfigurationSpecRedactedFieldsMethod struct{}

type WebACLLoggingConfigurationSpecRedactedFieldsQueryString struct{}

type WebACLLoggingConfigurationSpecRedactedFieldsSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type WebACLLoggingConfigurationSpecRedactedFieldsSingleQueryArgument struct {
	// Deprecated
	Name *string `json:"name" tf:"name"`
}

type WebACLLoggingConfigurationSpecRedactedFieldsUriPath struct{}

type WebACLLoggingConfigurationSpecRedactedFields struct {
	// +optional
	// Deprecated
	AllQueryArguments *WebACLLoggingConfigurationSpecRedactedFieldsAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	// Deprecated
	Body *WebACLLoggingConfigurationSpecRedactedFieldsBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *WebACLLoggingConfigurationSpecRedactedFieldsMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *WebACLLoggingConfigurationSpecRedactedFieldsQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *WebACLLoggingConfigurationSpecRedactedFieldsSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	// Deprecated
	SingleQueryArgument *WebACLLoggingConfigurationSpecRedactedFieldsSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *WebACLLoggingConfigurationSpecRedactedFieldsUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type WebACLLoggingConfigurationSpec struct {
	State *WebACLLoggingConfigurationSpecResource `json:"state,omitempty" tf:"-"`

	Resource WebACLLoggingConfigurationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type WebACLLoggingConfigurationSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// AWS Kinesis Firehose Delivery Stream ARNs
	// +kubebuilder:validation:MaxItems=100
	// +kubebuilder:validation:MinItems=1
	LogDestinationConfigs []string `json:"logDestinationConfigs" tf:"log_destination_configs"`
	// +optional
	LoggingFilter *WebACLLoggingConfigurationSpecLoggingFilter `json:"loggingFilter,omitempty" tf:"logging_filter"`
	// Parts of the request to exclude from logs
	// +optional
	// +kubebuilder:validation:MaxItems=100
	RedactedFields []WebACLLoggingConfigurationSpecRedactedFields `json:"redactedFields,omitempty" tf:"redacted_fields"`
	// AWS WebACL ARN
	ResourceArn *string `json:"resourceArn" tf:"resource_arn"`
}

type WebACLLoggingConfigurationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// WebACLLoggingConfigurationList is a list of WebACLLoggingConfigurations
type WebACLLoggingConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of WebACLLoggingConfiguration CRD objects
	Items []WebACLLoggingConfiguration `json:"items,omitempty"`
}
