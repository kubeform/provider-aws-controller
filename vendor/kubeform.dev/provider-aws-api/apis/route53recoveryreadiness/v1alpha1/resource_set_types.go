/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ResourceSet struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResourceSetSpec   `json:"spec,omitempty"`
	Status            ResourceSetStatus `json:"status,omitempty"`
}

type ResourceSetSpecResourcesDnsTargetResourceTargetResourceNlbResource struct {
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
}

type ResourceSetSpecResourcesDnsTargetResourceTargetResourceR53Resource struct {
	// +optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name"`
	// +optional
	RecordSetID *string `json:"recordSetID,omitempty" tf:"record_set_id"`
}

type ResourceSetSpecResourcesDnsTargetResourceTargetResource struct {
	// +optional
	NlbResource *ResourceSetSpecResourcesDnsTargetResourceTargetResourceNlbResource `json:"nlbResource,omitempty" tf:"nlb_resource"`
	// +optional
	R53Resource *ResourceSetSpecResourcesDnsTargetResourceTargetResourceR53Resource `json:"r53Resource,omitempty" tf:"r53_resource"`
}

type ResourceSetSpecResourcesDnsTargetResource struct {
	DomainName *string `json:"domainName" tf:"domain_name"`
	// +optional
	HostedZoneArn *string `json:"hostedZoneArn,omitempty" tf:"hosted_zone_arn"`
	// +optional
	RecordSetID *string `json:"recordSetID,omitempty" tf:"record_set_id"`
	// +optional
	RecordType *string `json:"recordType,omitempty" tf:"record_type"`
	// +optional
	TargetResource *ResourceSetSpecResourcesDnsTargetResourceTargetResource `json:"targetResource,omitempty" tf:"target_resource"`
}

type ResourceSetSpecResources struct {
	// +optional
	ComponentID *string `json:"componentID,omitempty" tf:"component_id"`
	// +optional
	DnsTargetResource *ResourceSetSpecResourcesDnsTargetResource `json:"dnsTargetResource,omitempty" tf:"dns_target_resource"`
	// +optional
	ReadinessScopes []string `json:"readinessScopes,omitempty" tf:"readiness_scopes"`
	// +optional
	ResourceArn *string `json:"resourceArn,omitempty" tf:"resource_arn"`
}

type ResourceSetSpec struct {
	State *ResourceSetSpecResource `json:"state,omitempty" tf:"-"`

	Resource ResourceSetSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ResourceSetSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn             *string                    `json:"arn,omitempty" tf:"arn"`
	ResourceSetName *string                    `json:"resourceSetName" tf:"resource_set_name"`
	ResourceSetType *string                    `json:"resourceSetType" tf:"resource_set_type"`
	Resources       []ResourceSetSpecResources `json:"resources" tf:"resources"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type ResourceSetStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ResourceSetList is a list of ResourceSets
type ResourceSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ResourceSet CRD objects
	Items []ResourceSet `json:"items,omitempty"`
}
