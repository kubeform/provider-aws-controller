/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecAdminContact{}).Type1()):      RegisteredDomainSpecAdminContactCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecRegistrantContact{}).Type1()): RegisteredDomainSpecRegistrantContactCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecTechContact{}).Type1()):       RegisteredDomainSpecTechContactCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecAdminContact{}).Type1()):      RegisteredDomainSpecAdminContactCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecRegistrantContact{}).Type1()): RegisteredDomainSpecRegistrantContactCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecTechContact{}).Type1()):       RegisteredDomainSpecTechContactCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type RegisteredDomainSpecAdminContactCodec struct {
}

func (RegisteredDomainSpecAdminContactCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*RegisteredDomainSpecAdminContact)(ptr) == nil
}

func (RegisteredDomainSpecAdminContactCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*RegisteredDomainSpecAdminContact)(ptr)
	var objs []RegisteredDomainSpecAdminContact
	if obj != nil {
		objs = []RegisteredDomainSpecAdminContact{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecAdminContact{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (RegisteredDomainSpecAdminContactCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*RegisteredDomainSpecAdminContact)(ptr) = RegisteredDomainSpecAdminContact{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []RegisteredDomainSpecAdminContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecAdminContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*RegisteredDomainSpecAdminContact)(ptr) = objs[0]
			} else {
				*(*RegisteredDomainSpecAdminContact)(ptr) = RegisteredDomainSpecAdminContact{}
			}
		} else {
			*(*RegisteredDomainSpecAdminContact)(ptr) = RegisteredDomainSpecAdminContact{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj RegisteredDomainSpecAdminContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecAdminContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*RegisteredDomainSpecAdminContact)(ptr) = obj
		} else {
			*(*RegisteredDomainSpecAdminContact)(ptr) = RegisteredDomainSpecAdminContact{}
		}
	default:
		iter.ReportError("decode RegisteredDomainSpecAdminContact", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type RegisteredDomainSpecRegistrantContactCodec struct {
}

func (RegisteredDomainSpecRegistrantContactCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*RegisteredDomainSpecRegistrantContact)(ptr) == nil
}

func (RegisteredDomainSpecRegistrantContactCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*RegisteredDomainSpecRegistrantContact)(ptr)
	var objs []RegisteredDomainSpecRegistrantContact
	if obj != nil {
		objs = []RegisteredDomainSpecRegistrantContact{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecRegistrantContact{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (RegisteredDomainSpecRegistrantContactCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*RegisteredDomainSpecRegistrantContact)(ptr) = RegisteredDomainSpecRegistrantContact{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []RegisteredDomainSpecRegistrantContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecRegistrantContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*RegisteredDomainSpecRegistrantContact)(ptr) = objs[0]
			} else {
				*(*RegisteredDomainSpecRegistrantContact)(ptr) = RegisteredDomainSpecRegistrantContact{}
			}
		} else {
			*(*RegisteredDomainSpecRegistrantContact)(ptr) = RegisteredDomainSpecRegistrantContact{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj RegisteredDomainSpecRegistrantContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecRegistrantContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*RegisteredDomainSpecRegistrantContact)(ptr) = obj
		} else {
			*(*RegisteredDomainSpecRegistrantContact)(ptr) = RegisteredDomainSpecRegistrantContact{}
		}
	default:
		iter.ReportError("decode RegisteredDomainSpecRegistrantContact", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type RegisteredDomainSpecTechContactCodec struct {
}

func (RegisteredDomainSpecTechContactCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*RegisteredDomainSpecTechContact)(ptr) == nil
}

func (RegisteredDomainSpecTechContactCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*RegisteredDomainSpecTechContact)(ptr)
	var objs []RegisteredDomainSpecTechContact
	if obj != nil {
		objs = []RegisteredDomainSpecTechContact{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecTechContact{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (RegisteredDomainSpecTechContactCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*RegisteredDomainSpecTechContact)(ptr) = RegisteredDomainSpecTechContact{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []RegisteredDomainSpecTechContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecTechContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*RegisteredDomainSpecTechContact)(ptr) = objs[0]
			} else {
				*(*RegisteredDomainSpecTechContact)(ptr) = RegisteredDomainSpecTechContact{}
			}
		} else {
			*(*RegisteredDomainSpecTechContact)(ptr) = RegisteredDomainSpecTechContact{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj RegisteredDomainSpecTechContact

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegisteredDomainSpecTechContact{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*RegisteredDomainSpecTechContact)(ptr) = obj
		} else {
			*(*RegisteredDomainSpecTechContact)(ptr) = RegisteredDomainSpecTechContact{}
		}
	default:
		iter.ReportError("decode RegisteredDomainSpecTechContact", "unexpected JSON type")
	}
}
