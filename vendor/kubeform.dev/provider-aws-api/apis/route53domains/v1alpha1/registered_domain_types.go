/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type RegisteredDomain struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegisteredDomainSpec   `json:"spec,omitempty"`
	Status            RegisteredDomainStatus `json:"status,omitempty"`
}

type RegisteredDomainSpecAdminContact struct {
	// +optional
	AddressLine1 *string `json:"addressLine1,omitempty" tf:"address_line_1"`
	// +optional
	AddressLine2 *string `json:"addressLine2,omitempty" tf:"address_line_2"`
	// +optional
	City *string `json:"city,omitempty" tf:"city"`
	// +optional
	ContactType *string `json:"contactType,omitempty" tf:"contact_type"`
	// +optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code"`
	// +optional
	Email *string `json:"email,omitempty" tf:"email"`
	// +optional
	ExtraParams *map[string]string `json:"extraParams,omitempty" tf:"extra_params"`
	// +optional
	Fax *string `json:"fax,omitempty" tf:"fax"`
	// +optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name"`
	// +optional
	LastName *string `json:"lastName,omitempty" tf:"last_name"`
	// +optional
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name"`
	// +optional
	PhoneNumber *string `json:"phoneNumber,omitempty" tf:"phone_number"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	ZipCode *string `json:"zipCode,omitempty" tf:"zip_code"`
}

type RegisteredDomainSpecNameServer struct {
	// +optional
	// +kubebuilder:validation:MaxItems=2
	GlueIPS []string `json:"glueIPS,omitempty" tf:"glue_ips"`
	Name    *string  `json:"name" tf:"name"`
}

type RegisteredDomainSpecRegistrantContact struct {
	// +optional
	AddressLine1 *string `json:"addressLine1,omitempty" tf:"address_line_1"`
	// +optional
	AddressLine2 *string `json:"addressLine2,omitempty" tf:"address_line_2"`
	// +optional
	City *string `json:"city,omitempty" tf:"city"`
	// +optional
	ContactType *string `json:"contactType,omitempty" tf:"contact_type"`
	// +optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code"`
	// +optional
	Email *string `json:"email,omitempty" tf:"email"`
	// +optional
	ExtraParams *map[string]string `json:"extraParams,omitempty" tf:"extra_params"`
	// +optional
	Fax *string `json:"fax,omitempty" tf:"fax"`
	// +optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name"`
	// +optional
	LastName *string `json:"lastName,omitempty" tf:"last_name"`
	// +optional
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name"`
	// +optional
	PhoneNumber *string `json:"phoneNumber,omitempty" tf:"phone_number"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	ZipCode *string `json:"zipCode,omitempty" tf:"zip_code"`
}

type RegisteredDomainSpecTechContact struct {
	// +optional
	AddressLine1 *string `json:"addressLine1,omitempty" tf:"address_line_1"`
	// +optional
	AddressLine2 *string `json:"addressLine2,omitempty" tf:"address_line_2"`
	// +optional
	City *string `json:"city,omitempty" tf:"city"`
	// +optional
	ContactType *string `json:"contactType,omitempty" tf:"contact_type"`
	// +optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code"`
	// +optional
	Email *string `json:"email,omitempty" tf:"email"`
	// +optional
	ExtraParams *map[string]string `json:"extraParams,omitempty" tf:"extra_params"`
	// +optional
	Fax *string `json:"fax,omitempty" tf:"fax"`
	// +optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name"`
	// +optional
	LastName *string `json:"lastName,omitempty" tf:"last_name"`
	// +optional
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name"`
	// +optional
	PhoneNumber *string `json:"phoneNumber,omitempty" tf:"phone_number"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	ZipCode *string `json:"zipCode,omitempty" tf:"zip_code"`
}

type RegisteredDomainSpec struct {
	State *RegisteredDomainSpecResource `json:"state,omitempty" tf:"-"`

	Resource RegisteredDomainSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type RegisteredDomainSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AbuseContactEmail *string `json:"abuseContactEmail,omitempty" tf:"abuse_contact_email"`
	// +optional
	AbuseContactPhone *string `json:"abuseContactPhone,omitempty" tf:"abuse_contact_phone"`
	// +optional
	AdminContact *RegisteredDomainSpecAdminContact `json:"adminContact,omitempty" tf:"admin_contact"`
	// +optional
	AdminPrivacy *bool `json:"adminPrivacy,omitempty" tf:"admin_privacy"`
	// +optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew"`
	// +optional
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date"`
	DomainName   *string `json:"domainName" tf:"domain_name"`
	// +optional
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date"`
	// +optional
	// +kubebuilder:validation:MaxItems=6
	NameServer []RegisteredDomainSpecNameServer `json:"nameServer,omitempty" tf:"name_server"`
	// +optional
	RegistrantContact *RegisteredDomainSpecRegistrantContact `json:"registrantContact,omitempty" tf:"registrant_contact"`
	// +optional
	RegistrantPrivacy *bool `json:"registrantPrivacy,omitempty" tf:"registrant_privacy"`
	// +optional
	RegistrarName *string `json:"registrarName,omitempty" tf:"registrar_name"`
	// +optional
	RegistrarURL *string `json:"registrarURL,omitempty" tf:"registrar_url"`
	// +optional
	Reseller *string `json:"reseller,omitempty" tf:"reseller"`
	// +optional
	StatusList []string `json:"statusList,omitempty" tf:"status_list"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TagsAll *map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
	// +optional
	TechContact *RegisteredDomainSpecTechContact `json:"techContact,omitempty" tf:"tech_contact"`
	// +optional
	TechPrivacy *bool `json:"techPrivacy,omitempty" tf:"tech_privacy"`
	// +optional
	TransferLock *bool `json:"transferLock,omitempty" tf:"transfer_lock"`
	// +optional
	UpdatedDate *string `json:"updatedDate,omitempty" tf:"updated_date"`
	// +optional
	WhoisServer *string `json:"whoisServer,omitempty" tf:"whois_server"`
}

type RegisteredDomainStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RegisteredDomainList is a list of RegisteredDomains
type RegisteredDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of RegisteredDomain CRD objects
	Items []RegisteredDomain `json:"items,omitempty"`
}
