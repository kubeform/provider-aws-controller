/*
Copyright AppsCode Inc. and Contributors

Licensed under the AppsCode Free Trial License 1.0.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://github.com/appscode/licenses/raw/1.0.0/AppsCode-Free-Trial-1.0.0.md

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/gobuffalo/flect"
	aws "github.com/terraform-providers/terraform-provider-aws/aws"
	auditlib "go.bytebuilders.dev/audit/lib"
	arv1 "k8s.io/api/admissionregistration/v1"
	"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	informers "k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	admissionregistrationv1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"
	"k8s.io/client-go/tools/cache"
	"k8s.io/klog/v2"
	accessanalyzerv1alpha1 "kubeform.dev/provider-aws-api/apis/accessanalyzer/v1alpha1"
	acmv1alpha1 "kubeform.dev/provider-aws-api/apis/acm/v1alpha1"
	acmpcav1alpha1 "kubeform.dev/provider-aws-api/apis/acmpca/v1alpha1"
	albv1alpha1 "kubeform.dev/provider-aws-api/apis/alb/v1alpha1"
	amiv1alpha1 "kubeform.dev/provider-aws-api/apis/ami/v1alpha1"
	amplifyv1alpha1 "kubeform.dev/provider-aws-api/apis/amplify/v1alpha1"
	apigatewayv1alpha1 "kubeform.dev/provider-aws-api/apis/apigateway/v1alpha1"
	apigatewayv2v1alpha1 "kubeform.dev/provider-aws-api/apis/apigatewayv2/v1alpha1"
	appv1alpha1 "kubeform.dev/provider-aws-api/apis/app/v1alpha1"
	appautoscalingv1alpha1 "kubeform.dev/provider-aws-api/apis/appautoscaling/v1alpha1"
	appmeshv1alpha1 "kubeform.dev/provider-aws-api/apis/appmesh/v1alpha1"
	apprunnerv1alpha1 "kubeform.dev/provider-aws-api/apis/apprunner/v1alpha1"
	appsyncv1alpha1 "kubeform.dev/provider-aws-api/apis/appsync/v1alpha1"
	athenav1alpha1 "kubeform.dev/provider-aws-api/apis/athena/v1alpha1"
	autoscalingv1alpha1 "kubeform.dev/provider-aws-api/apis/autoscaling/v1alpha1"
	autoscalingplansv1alpha1 "kubeform.dev/provider-aws-api/apis/autoscalingplans/v1alpha1"
	backupv1alpha1 "kubeform.dev/provider-aws-api/apis/backup/v1alpha1"
	batchv1alpha1 "kubeform.dev/provider-aws-api/apis/batch/v1alpha1"
	budgetsv1alpha1 "kubeform.dev/provider-aws-api/apis/budgets/v1alpha1"
	cloud9v1alpha1 "kubeform.dev/provider-aws-api/apis/cloud9/v1alpha1"
	cloudformationstackv1alpha1 "kubeform.dev/provider-aws-api/apis/cloudformationstack/v1alpha1"
	cloudformationtypev1alpha1 "kubeform.dev/provider-aws-api/apis/cloudformationtype/v1alpha1"
	cloudfrontv1alpha1 "kubeform.dev/provider-aws-api/apis/cloudfront/v1alpha1"
	cloudhsmv2v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudhsmv2/v1alpha1"
	cloudtrailv1alpha1 "kubeform.dev/provider-aws-api/apis/cloudtrail/v1alpha1"
	cloudwatchv1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"
	codeartifactv1alpha1 "kubeform.dev/provider-aws-api/apis/codeartifact/v1alpha1"
	codebuildv1alpha1 "kubeform.dev/provider-aws-api/apis/codebuild/v1alpha1"
	codecommitv1alpha1 "kubeform.dev/provider-aws-api/apis/codecommit/v1alpha1"
	codedeployv1alpha1 "kubeform.dev/provider-aws-api/apis/codedeploy/v1alpha1"
	codepipelinev1alpha1 "kubeform.dev/provider-aws-api/apis/codepipeline/v1alpha1"
	codestarconnectionsv1alpha1 "kubeform.dev/provider-aws-api/apis/codestarconnections/v1alpha1"
	codestarnotificationsv1alpha1 "kubeform.dev/provider-aws-api/apis/codestarnotifications/v1alpha1"
	cognitov1alpha1 "kubeform.dev/provider-aws-api/apis/cognito/v1alpha1"
	configv1alpha1 "kubeform.dev/provider-aws-api/apis/config/v1alpha1"
	curv1alpha1 "kubeform.dev/provider-aws-api/apis/cur/v1alpha1"
	customerv1alpha1 "kubeform.dev/provider-aws-api/apis/customer/v1alpha1"
	datapipelinev1alpha1 "kubeform.dev/provider-aws-api/apis/datapipeline/v1alpha1"
	datasyncv1alpha1 "kubeform.dev/provider-aws-api/apis/datasync/v1alpha1"
	daxv1alpha1 "kubeform.dev/provider-aws-api/apis/dax/v1alpha1"
	dbv1alpha1 "kubeform.dev/provider-aws-api/apis/db/v1alpha1"
	defaultv1alpha1 "kubeform.dev/provider-aws-api/apis/default/v1alpha1"
	devicefarmv1alpha1 "kubeform.dev/provider-aws-api/apis/devicefarm/v1alpha1"
	directoryservicev1alpha1 "kubeform.dev/provider-aws-api/apis/directoryservice/v1alpha1"
	dlmv1alpha1 "kubeform.dev/provider-aws-api/apis/dlm/v1alpha1"
	dmsv1alpha1 "kubeform.dev/provider-aws-api/apis/dms/v1alpha1"
	docdbv1alpha1 "kubeform.dev/provider-aws-api/apis/docdb/v1alpha1"
	dxv1alpha1 "kubeform.dev/provider-aws-api/apis/dx/v1alpha1"
	dynamodbv1alpha1 "kubeform.dev/provider-aws-api/apis/dynamodb/v1alpha1"
	ebsv1alpha1 "kubeform.dev/provider-aws-api/apis/ebs/v1alpha1"
	ec2v1alpha1 "kubeform.dev/provider-aws-api/apis/ec2/v1alpha1"
	ecrv1alpha1 "kubeform.dev/provider-aws-api/apis/ecr/v1alpha1"
	ecrpublicv1alpha1 "kubeform.dev/provider-aws-api/apis/ecrpublic/v1alpha1"
	ecsv1alpha1 "kubeform.dev/provider-aws-api/apis/ecs/v1alpha1"
	efsv1alpha1 "kubeform.dev/provider-aws-api/apis/efs/v1alpha1"
	egressv1alpha1 "kubeform.dev/provider-aws-api/apis/egress/v1alpha1"
	eipv1alpha1 "kubeform.dev/provider-aws-api/apis/eip/v1alpha1"
	eksv1alpha1 "kubeform.dev/provider-aws-api/apis/eks/v1alpha1"
	elasticachev1alpha1 "kubeform.dev/provider-aws-api/apis/elasticache/v1alpha1"
	elasticbeanstalkv1alpha1 "kubeform.dev/provider-aws-api/apis/elasticbeanstalk/v1alpha1"
	elasticsearchdomainv1alpha1 "kubeform.dev/provider-aws-api/apis/elasticsearchdomain/v1alpha1"
	elastictranscoderv1alpha1 "kubeform.dev/provider-aws-api/apis/elastictranscoder/v1alpha1"
	elbv1alpha1 "kubeform.dev/provider-aws-api/apis/elb/v1alpha1"
	emrv1alpha1 "kubeform.dev/provider-aws-api/apis/emr/v1alpha1"
	flowv1alpha1 "kubeform.dev/provider-aws-api/apis/flow/v1alpha1"
	fmsv1alpha1 "kubeform.dev/provider-aws-api/apis/fms/v1alpha1"
	fsxv1alpha1 "kubeform.dev/provider-aws-api/apis/fsx/v1alpha1"
	gameliftv1alpha1 "kubeform.dev/provider-aws-api/apis/gamelift/v1alpha1"
	glaciervaultv1alpha1 "kubeform.dev/provider-aws-api/apis/glaciervault/v1alpha1"
	globalacceleratorv1alpha1 "kubeform.dev/provider-aws-api/apis/globalaccelerator/v1alpha1"
	gluev1alpha1 "kubeform.dev/provider-aws-api/apis/glue/v1alpha1"
	guarddutyv1alpha1 "kubeform.dev/provider-aws-api/apis/guardduty/v1alpha1"
	iamv1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"
	imagebuilderv1alpha1 "kubeform.dev/provider-aws-api/apis/imagebuilder/v1alpha1"
	inspectorv1alpha1 "kubeform.dev/provider-aws-api/apis/inspector/v1alpha1"
	instancev1alpha1 "kubeform.dev/provider-aws-api/apis/instance/v1alpha1"
	internetv1alpha1 "kubeform.dev/provider-aws-api/apis/internet/v1alpha1"
	iotv1alpha1 "kubeform.dev/provider-aws-api/apis/iot/v1alpha1"
	keyv1alpha1 "kubeform.dev/provider-aws-api/apis/key/v1alpha1"
	kinesisv1alpha1 "kubeform.dev/provider-aws-api/apis/kinesis/v1alpha1"
	kinesisanalyticsv2v1alpha1 "kubeform.dev/provider-aws-api/apis/kinesisanalyticsv2/v1alpha1"
	kmsv1alpha1 "kubeform.dev/provider-aws-api/apis/kms/v1alpha1"
	lakeformationv1alpha1 "kubeform.dev/provider-aws-api/apis/lakeformation/v1alpha1"
	lambdav1alpha1 "kubeform.dev/provider-aws-api/apis/lambda/v1alpha1"
	launchv1alpha1 "kubeform.dev/provider-aws-api/apis/launch/v1alpha1"
	lbv1alpha1 "kubeform.dev/provider-aws-api/apis/lb/v1alpha1"
	lexv1alpha1 "kubeform.dev/provider-aws-api/apis/lex/v1alpha1"
	licensemanagerv1alpha1 "kubeform.dev/provider-aws-api/apis/licensemanager/v1alpha1"
	lightsailv1alpha1 "kubeform.dev/provider-aws-api/apis/lightsail/v1alpha1"
	loadbalancerv1alpha1 "kubeform.dev/provider-aws-api/apis/loadbalancer/v1alpha1"
	maciev1alpha1 "kubeform.dev/provider-aws-api/apis/macie/v1alpha1"
	macie2v1alpha1 "kubeform.dev/provider-aws-api/apis/macie2/v1alpha1"
	mainv1alpha1 "kubeform.dev/provider-aws-api/apis/main/v1alpha1"
	mediav1alpha1 "kubeform.dev/provider-aws-api/apis/media/v1alpha1"
	mqv1alpha1 "kubeform.dev/provider-aws-api/apis/mq/v1alpha1"
	mskv1alpha1 "kubeform.dev/provider-aws-api/apis/msk/v1alpha1"
	mwaav1alpha1 "kubeform.dev/provider-aws-api/apis/mwaa/v1alpha1"
	natv1alpha1 "kubeform.dev/provider-aws-api/apis/nat/v1alpha1"
	neptunev1alpha1 "kubeform.dev/provider-aws-api/apis/neptune/v1alpha1"
	networkv1alpha1 "kubeform.dev/provider-aws-api/apis/network/v1alpha1"
	networkfirewallv1alpha1 "kubeform.dev/provider-aws-api/apis/networkfirewall/v1alpha1"
	opsworksv1alpha1 "kubeform.dev/provider-aws-api/apis/opsworks/v1alpha1"
	organizationsv1alpha1 "kubeform.dev/provider-aws-api/apis/organizations/v1alpha1"
	pinpointv1alpha1 "kubeform.dev/provider-aws-api/apis/pinpoint/v1alpha1"
	placementv1alpha1 "kubeform.dev/provider-aws-api/apis/placement/v1alpha1"
	prometheusv1alpha1 "kubeform.dev/provider-aws-api/apis/prometheus/v1alpha1"
	proxyv1alpha1 "kubeform.dev/provider-aws-api/apis/proxy/v1alpha1"
	qldbv1alpha1 "kubeform.dev/provider-aws-api/apis/qldb/v1alpha1"
	quicksightv1alpha1 "kubeform.dev/provider-aws-api/apis/quicksight/v1alpha1"
	ramv1alpha1 "kubeform.dev/provider-aws-api/apis/ram/v1alpha1"
	rdsv1alpha1 "kubeform.dev/provider-aws-api/apis/rds/v1alpha1"
	redshiftv1alpha1 "kubeform.dev/provider-aws-api/apis/redshift/v1alpha1"
	resourcegroupsv1alpha1 "kubeform.dev/provider-aws-api/apis/resourcegroups/v1alpha1"
	routev1alpha1 "kubeform.dev/provider-aws-api/apis/route/v1alpha1"
	route53v1alpha1 "kubeform.dev/provider-aws-api/apis/route53/v1alpha1"
	s3v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"
	s3controlv1alpha1 "kubeform.dev/provider-aws-api/apis/s3control/v1alpha1"
	s3outpostsv1alpha1 "kubeform.dev/provider-aws-api/apis/s3outposts/v1alpha1"
	sagemakerv1alpha1 "kubeform.dev/provider-aws-api/apis/sagemaker/v1alpha1"
	schemasv1alpha1 "kubeform.dev/provider-aws-api/apis/schemas/v1alpha1"
	secretsmanagerv1alpha1 "kubeform.dev/provider-aws-api/apis/secretsmanager/v1alpha1"
	securityv1alpha1 "kubeform.dev/provider-aws-api/apis/security/v1alpha1"
	securityhubv1alpha1 "kubeform.dev/provider-aws-api/apis/securityhub/v1alpha1"
	serverlessapplicationrepositoryv1alpha1 "kubeform.dev/provider-aws-api/apis/serverlessapplicationrepository/v1alpha1"
	servicecatalogv1alpha1 "kubeform.dev/provider-aws-api/apis/servicecatalog/v1alpha1"
	servicediscoveryv1alpha1 "kubeform.dev/provider-aws-api/apis/servicediscovery/v1alpha1"
	servicequotasv1alpha1 "kubeform.dev/provider-aws-api/apis/servicequotas/v1alpha1"
	sesv1alpha1 "kubeform.dev/provider-aws-api/apis/ses/v1alpha1"
	sfnv1alpha1 "kubeform.dev/provider-aws-api/apis/sfn/v1alpha1"
	shieldv1alpha1 "kubeform.dev/provider-aws-api/apis/shield/v1alpha1"
	signerv1alpha1 "kubeform.dev/provider-aws-api/apis/signer/v1alpha1"
	simpledbv1alpha1 "kubeform.dev/provider-aws-api/apis/simpledb/v1alpha1"
	snapshotv1alpha1 "kubeform.dev/provider-aws-api/apis/snapshot/v1alpha1"
	snsv1alpha1 "kubeform.dev/provider-aws-api/apis/sns/v1alpha1"
	spotv1alpha1 "kubeform.dev/provider-aws-api/apis/spot/v1alpha1"
	sqsqueuev1alpha1 "kubeform.dev/provider-aws-api/apis/sqsqueue/v1alpha1"
	ssmv1alpha1 "kubeform.dev/provider-aws-api/apis/ssm/v1alpha1"
	ssoadminv1alpha1 "kubeform.dev/provider-aws-api/apis/ssoadmin/v1alpha1"
	storagegatewayv1alpha1 "kubeform.dev/provider-aws-api/apis/storagegateway/v1alpha1"
	subnetv1alpha1 "kubeform.dev/provider-aws-api/apis/subnet/v1alpha1"
	swfv1alpha1 "kubeform.dev/provider-aws-api/apis/swf/v1alpha1"
	syntheticsv1alpha1 "kubeform.dev/provider-aws-api/apis/synthetics/v1alpha1"
	timestreamwritev1alpha1 "kubeform.dev/provider-aws-api/apis/timestreamwrite/v1alpha1"
	transferv1alpha1 "kubeform.dev/provider-aws-api/apis/transfer/v1alpha1"
	volumev1alpha1 "kubeform.dev/provider-aws-api/apis/volume/v1alpha1"
	vpcv1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"
	vpnv1alpha1 "kubeform.dev/provider-aws-api/apis/vpn/v1alpha1"
	wafv1alpha1 "kubeform.dev/provider-aws-api/apis/waf/v1alpha1"
	wafregionalv1alpha1 "kubeform.dev/provider-aws-api/apis/wafregional/v1alpha1"
	wafv2v1alpha1 "kubeform.dev/provider-aws-api/apis/wafv2/v1alpha1"
	worklinkv1alpha1 "kubeform.dev/provider-aws-api/apis/worklink/v1alpha1"
	workspacesv1alpha1 "kubeform.dev/provider-aws-api/apis/workspaces/v1alpha1"
	xrayv1alpha1 "kubeform.dev/provider-aws-api/apis/xray/v1alpha1"
	controllersaccessanalyzer "kubeform.dev/provider-aws-controller/controllers/accessanalyzer"
	controllersacm "kubeform.dev/provider-aws-controller/controllers/acm"
	controllersacmpca "kubeform.dev/provider-aws-controller/controllers/acmpca"
	controllersalb "kubeform.dev/provider-aws-controller/controllers/alb"
	controllersami "kubeform.dev/provider-aws-controller/controllers/ami"
	controllersamplify "kubeform.dev/provider-aws-controller/controllers/amplify"
	controllersapigateway "kubeform.dev/provider-aws-controller/controllers/apigateway"
	controllersapigatewayv2 "kubeform.dev/provider-aws-controller/controllers/apigatewayv2"
	controllersapp "kubeform.dev/provider-aws-controller/controllers/app"
	controllersappautoscaling "kubeform.dev/provider-aws-controller/controllers/appautoscaling"
	controllersappmesh "kubeform.dev/provider-aws-controller/controllers/appmesh"
	controllersapprunner "kubeform.dev/provider-aws-controller/controllers/apprunner"
	controllersappsync "kubeform.dev/provider-aws-controller/controllers/appsync"
	controllersathena "kubeform.dev/provider-aws-controller/controllers/athena"
	controllersautoscaling "kubeform.dev/provider-aws-controller/controllers/autoscaling"
	controllersautoscalingplans "kubeform.dev/provider-aws-controller/controllers/autoscalingplans"
	controllersbackup "kubeform.dev/provider-aws-controller/controllers/backup"
	controllersbatch "kubeform.dev/provider-aws-controller/controllers/batch"
	controllersbudgets "kubeform.dev/provider-aws-controller/controllers/budgets"
	controllerscloud9 "kubeform.dev/provider-aws-controller/controllers/cloud9"
	controllerscloudformationstack "kubeform.dev/provider-aws-controller/controllers/cloudformationstack"
	controllerscloudformationtype "kubeform.dev/provider-aws-controller/controllers/cloudformationtype"
	controllerscloudfront "kubeform.dev/provider-aws-controller/controllers/cloudfront"
	controllerscloudhsmv2 "kubeform.dev/provider-aws-controller/controllers/cloudhsmv2"
	controllerscloudtrail "kubeform.dev/provider-aws-controller/controllers/cloudtrail"
	controllerscloudwatch "kubeform.dev/provider-aws-controller/controllers/cloudwatch"
	controllerscodeartifact "kubeform.dev/provider-aws-controller/controllers/codeartifact"
	controllerscodebuild "kubeform.dev/provider-aws-controller/controllers/codebuild"
	controllerscodecommit "kubeform.dev/provider-aws-controller/controllers/codecommit"
	controllerscodedeploy "kubeform.dev/provider-aws-controller/controllers/codedeploy"
	controllerscodepipeline "kubeform.dev/provider-aws-controller/controllers/codepipeline"
	controllerscodestarconnections "kubeform.dev/provider-aws-controller/controllers/codestarconnections"
	controllerscodestarnotifications "kubeform.dev/provider-aws-controller/controllers/codestarnotifications"
	controllerscognito "kubeform.dev/provider-aws-controller/controllers/cognito"
	controllersconfig "kubeform.dev/provider-aws-controller/controllers/config"
	controllerscur "kubeform.dev/provider-aws-controller/controllers/cur"
	controllerscustomer "kubeform.dev/provider-aws-controller/controllers/customer"
	controllersdatapipeline "kubeform.dev/provider-aws-controller/controllers/datapipeline"
	controllersdatasync "kubeform.dev/provider-aws-controller/controllers/datasync"
	controllersdax "kubeform.dev/provider-aws-controller/controllers/dax"
	controllersdb "kubeform.dev/provider-aws-controller/controllers/db"
	controllersdefault "kubeform.dev/provider-aws-controller/controllers/default"
	controllersdevicefarm "kubeform.dev/provider-aws-controller/controllers/devicefarm"
	controllersdirectoryservice "kubeform.dev/provider-aws-controller/controllers/directoryservice"
	controllersdlm "kubeform.dev/provider-aws-controller/controllers/dlm"
	controllersdms "kubeform.dev/provider-aws-controller/controllers/dms"
	controllersdocdb "kubeform.dev/provider-aws-controller/controllers/docdb"
	controllersdx "kubeform.dev/provider-aws-controller/controllers/dx"
	controllersdynamodb "kubeform.dev/provider-aws-controller/controllers/dynamodb"
	controllersebs "kubeform.dev/provider-aws-controller/controllers/ebs"
	controllersec2 "kubeform.dev/provider-aws-controller/controllers/ec2"
	controllersecr "kubeform.dev/provider-aws-controller/controllers/ecr"
	controllersecrpublic "kubeform.dev/provider-aws-controller/controllers/ecrpublic"
	controllersecs "kubeform.dev/provider-aws-controller/controllers/ecs"
	controllersefs "kubeform.dev/provider-aws-controller/controllers/efs"
	controllersegress "kubeform.dev/provider-aws-controller/controllers/egress"
	controllerseip "kubeform.dev/provider-aws-controller/controllers/eip"
	controllerseks "kubeform.dev/provider-aws-controller/controllers/eks"
	controllerselasticache "kubeform.dev/provider-aws-controller/controllers/elasticache"
	controllerselasticbeanstalk "kubeform.dev/provider-aws-controller/controllers/elasticbeanstalk"
	controllerselasticsearchdomain "kubeform.dev/provider-aws-controller/controllers/elasticsearchdomain"
	controllerselastictranscoder "kubeform.dev/provider-aws-controller/controllers/elastictranscoder"
	controllerselb "kubeform.dev/provider-aws-controller/controllers/elb"
	controllersemr "kubeform.dev/provider-aws-controller/controllers/emr"
	controllersflow "kubeform.dev/provider-aws-controller/controllers/flow"
	controllersfms "kubeform.dev/provider-aws-controller/controllers/fms"
	controllersfsx "kubeform.dev/provider-aws-controller/controllers/fsx"
	controllersgamelift "kubeform.dev/provider-aws-controller/controllers/gamelift"
	controllersglaciervault "kubeform.dev/provider-aws-controller/controllers/glaciervault"
	controllersglobalaccelerator "kubeform.dev/provider-aws-controller/controllers/globalaccelerator"
	controllersglue "kubeform.dev/provider-aws-controller/controllers/glue"
	controllersguardduty "kubeform.dev/provider-aws-controller/controllers/guardduty"
	controllersiam "kubeform.dev/provider-aws-controller/controllers/iam"
	controllersimagebuilder "kubeform.dev/provider-aws-controller/controllers/imagebuilder"
	controllersinspector "kubeform.dev/provider-aws-controller/controllers/inspector"
	controllersinstance "kubeform.dev/provider-aws-controller/controllers/instance"
	controllersinternet "kubeform.dev/provider-aws-controller/controllers/internet"
	controllersiot "kubeform.dev/provider-aws-controller/controllers/iot"
	controllerskey "kubeform.dev/provider-aws-controller/controllers/key"
	controllerskinesis "kubeform.dev/provider-aws-controller/controllers/kinesis"
	controllerskinesisanalyticsv2 "kubeform.dev/provider-aws-controller/controllers/kinesisanalyticsv2"
	controllerskms "kubeform.dev/provider-aws-controller/controllers/kms"
	controllerslakeformation "kubeform.dev/provider-aws-controller/controllers/lakeformation"
	controllerslambda "kubeform.dev/provider-aws-controller/controllers/lambda"
	controllerslaunch "kubeform.dev/provider-aws-controller/controllers/launch"
	controllerslb "kubeform.dev/provider-aws-controller/controllers/lb"
	controllerslex "kubeform.dev/provider-aws-controller/controllers/lex"
	controllerslicensemanager "kubeform.dev/provider-aws-controller/controllers/licensemanager"
	controllerslightsail "kubeform.dev/provider-aws-controller/controllers/lightsail"
	controllersloadbalancer "kubeform.dev/provider-aws-controller/controllers/loadbalancer"
	controllersmacie "kubeform.dev/provider-aws-controller/controllers/macie"
	controllersmacie2 "kubeform.dev/provider-aws-controller/controllers/macie2"
	controllersmain "kubeform.dev/provider-aws-controller/controllers/main"
	controllersmedia "kubeform.dev/provider-aws-controller/controllers/media"
	controllersmq "kubeform.dev/provider-aws-controller/controllers/mq"
	controllersmsk "kubeform.dev/provider-aws-controller/controllers/msk"
	controllersmwaa "kubeform.dev/provider-aws-controller/controllers/mwaa"
	controllersnat "kubeform.dev/provider-aws-controller/controllers/nat"
	controllersneptune "kubeform.dev/provider-aws-controller/controllers/neptune"
	controllersnetwork "kubeform.dev/provider-aws-controller/controllers/network"
	controllersnetworkfirewall "kubeform.dev/provider-aws-controller/controllers/networkfirewall"
	controllersopsworks "kubeform.dev/provider-aws-controller/controllers/opsworks"
	controllersorganizations "kubeform.dev/provider-aws-controller/controllers/organizations"
	controllerspinpoint "kubeform.dev/provider-aws-controller/controllers/pinpoint"
	controllersplacement "kubeform.dev/provider-aws-controller/controllers/placement"
	controllersprometheus "kubeform.dev/provider-aws-controller/controllers/prometheus"
	controllersproxy "kubeform.dev/provider-aws-controller/controllers/proxy"
	controllersqldb "kubeform.dev/provider-aws-controller/controllers/qldb"
	controllersquicksight "kubeform.dev/provider-aws-controller/controllers/quicksight"
	controllersram "kubeform.dev/provider-aws-controller/controllers/ram"
	controllersrds "kubeform.dev/provider-aws-controller/controllers/rds"
	controllersredshift "kubeform.dev/provider-aws-controller/controllers/redshift"
	controllersresourcegroups "kubeform.dev/provider-aws-controller/controllers/resourcegroups"
	controllersroute "kubeform.dev/provider-aws-controller/controllers/route"
	controllersroute53 "kubeform.dev/provider-aws-controller/controllers/route53"
	controllerss3 "kubeform.dev/provider-aws-controller/controllers/s3"
	controllerss3control "kubeform.dev/provider-aws-controller/controllers/s3control"
	controllerss3outposts "kubeform.dev/provider-aws-controller/controllers/s3outposts"
	controllerssagemaker "kubeform.dev/provider-aws-controller/controllers/sagemaker"
	controllersschemas "kubeform.dev/provider-aws-controller/controllers/schemas"
	controllerssecretsmanager "kubeform.dev/provider-aws-controller/controllers/secretsmanager"
	controllerssecurity "kubeform.dev/provider-aws-controller/controllers/security"
	controllerssecurityhub "kubeform.dev/provider-aws-controller/controllers/securityhub"
	controllersserverlessapplicationrepository "kubeform.dev/provider-aws-controller/controllers/serverlessapplicationrepository"
	controllersservicecatalog "kubeform.dev/provider-aws-controller/controllers/servicecatalog"
	controllersservicediscovery "kubeform.dev/provider-aws-controller/controllers/servicediscovery"
	controllersservicequotas "kubeform.dev/provider-aws-controller/controllers/servicequotas"
	controllersses "kubeform.dev/provider-aws-controller/controllers/ses"
	controllerssfn "kubeform.dev/provider-aws-controller/controllers/sfn"
	controllersshield "kubeform.dev/provider-aws-controller/controllers/shield"
	controllerssigner "kubeform.dev/provider-aws-controller/controllers/signer"
	controllerssimpledb "kubeform.dev/provider-aws-controller/controllers/simpledb"
	controllerssnapshot "kubeform.dev/provider-aws-controller/controllers/snapshot"
	controllerssns "kubeform.dev/provider-aws-controller/controllers/sns"
	controllersspot "kubeform.dev/provider-aws-controller/controllers/spot"
	controllerssqsqueue "kubeform.dev/provider-aws-controller/controllers/sqsqueue"
	controllersssm "kubeform.dev/provider-aws-controller/controllers/ssm"
	controllersssoadmin "kubeform.dev/provider-aws-controller/controllers/ssoadmin"
	controllersstoragegateway "kubeform.dev/provider-aws-controller/controllers/storagegateway"
	controllerssubnet "kubeform.dev/provider-aws-controller/controllers/subnet"
	controllersswf "kubeform.dev/provider-aws-controller/controllers/swf"
	controllerssynthetics "kubeform.dev/provider-aws-controller/controllers/synthetics"
	controllerstimestreamwrite "kubeform.dev/provider-aws-controller/controllers/timestreamwrite"
	controllerstransfer "kubeform.dev/provider-aws-controller/controllers/transfer"
	controllersvolume "kubeform.dev/provider-aws-controller/controllers/volume"
	controllersvpc "kubeform.dev/provider-aws-controller/controllers/vpc"
	controllersvpn "kubeform.dev/provider-aws-controller/controllers/vpn"
	controllerswaf "kubeform.dev/provider-aws-controller/controllers/waf"
	controllerswafregional "kubeform.dev/provider-aws-controller/controllers/wafregional"
	controllerswafv2 "kubeform.dev/provider-aws-controller/controllers/wafv2"
	controllersworklink "kubeform.dev/provider-aws-controller/controllers/worklink"
	controllersworkspaces "kubeform.dev/provider-aws-controller/controllers/workspaces"
	controllersxray "kubeform.dev/provider-aws-controller/controllers/xray"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
)

var runningControllers = struct {
	sync.RWMutex
	mp map[schema.GroupVersionKind]bool
}{mp: make(map[schema.GroupVersionKind]bool)}

func watchCRD(ctx context.Context, crdClient *clientset.Clientset, vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, stopCh <-chan struct{}, mgr manager.Manager, auditor *auditlib.EventPublisher, watchOnlyDefault bool) error {
	informerFactory := informers.NewSharedInformerFactory(crdClient, time.Second*30)
	i := informerFactory.Apiextensions().V1().CustomResourceDefinitions().Informer()
	l := informerFactory.Apiextensions().V1().CustomResourceDefinitions().Lister()

	i.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			var key string
			key, err := cache.MetaNamespaceKeyFunc(obj)
			if err != nil {
				klog.Error(err)
				return
			}

			_, name, err := cache.SplitMetaNamespaceKey(key)
			if err != nil {
				klog.Error(err)
				return
			}

			crd, err := l.Get(name)
			if err != nil {
				klog.Error(err)
				return
			}
			if strings.Contains(crd.Spec.Group, "aws.kubeform.com") {
				gvk := schema.GroupVersionKind{
					Group:   crd.Spec.Group,
					Version: crd.Spec.Versions[0].Name,
					Kind:    crd.Spec.Names.Kind,
				}

				// check whether this gvk came before, if no then start the controller
				runningControllers.RLock()
				_, ok := runningControllers.mp[gvk]
				runningControllers.RUnlock()

				if !ok {
					runningControllers.Lock()
					runningControllers.mp[gvk] = true
					runningControllers.Unlock()

					if enableValidatingWebhook {
						// add dynamic ValidatingWebhookConfiguration

						// create empty VWC if the group has come for the first time
						err := createEmptyVWC(vwcClient, gvk)
						if err != nil {
							klog.Error(err)
							return
						}

						// update
						err = updateVWC(vwcClient, gvk)
						if err != nil {
							klog.Error(err)
							return
						}

						err = SetupWebhook(mgr, gvk)
						if err != nil {
							setupLog.Error(err, "unable to enable webhook")
							os.Exit(1)
						}
					}

					err = SetupManager(ctx, mgr, gvk, auditor, watchOnlyDefault)
					if err != nil {
						setupLog.Error(err, "unable to start manager")
						os.Exit(1)
					}
				}
			}
		},
	})

	informerFactory.Start(stopCh)

	return nil
}

func createEmptyVWC(vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, gvk schema.GroupVersionKind) error {
	vwcName := strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-")
	_, err := vwcClient.ValidatingWebhookConfigurations().Get(context.TODO(), vwcName, metav1.GetOptions{})
	if err == nil || !(errors.IsNotFound(err)) {
		return err
	}

	emptyVWC := &arv1.ValidatingWebhookConfiguration{
		TypeMeta: metav1.TypeMeta{
			Kind:       "ValidatingWebhookConfiguration",
			APIVersion: "admissionregistration.k8s.io/v1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-"),
			Labels: map[string]string{
				"app.kubernetes.io/instance": "aws.kubeform.com",
				"app.kubernetes.io/part-of":  "kubeform.com",
			},
		},
	}
	_, err = vwcClient.ValidatingWebhookConfigurations().Create(context.TODO(), emptyVWC, metav1.CreateOptions{})
	if err != nil {
		return err
	}

	return nil
}

func updateVWC(vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, gvk schema.GroupVersionKind) error {
	vwcName := strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-")
	vwc, err := vwcClient.ValidatingWebhookConfigurations().Get(context.TODO(), vwcName, metav1.GetOptions{})
	if err != nil {
		return err
	}

	path := "/validate-" + strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-") + "-v1alpha1-" + strings.ToLower(gvk.Kind)
	fail := arv1.Fail
	sideEffects := arv1.SideEffectClassNone
	admissionReviewVersions := []string{"v1beta1"}

	rules := []arv1.RuleWithOperations{
		{
			Operations: []arv1.OperationType{
				arv1.Delete,
			},
			Rule: arv1.Rule{
				APIGroups:   []string{strings.ToLower(gvk.Group)},
				APIVersions: []string{gvk.Version},
				Resources:   []string{strings.ToLower(flect.Pluralize(gvk.Kind))},
			},
		},
	}

	data, err := ioutil.ReadFile("/tmp/k8s-webhook-server/serving-certs/ca.crt")
	if err != nil {
		return err
	}

	name := strings.ToLower(gvk.Kind) + "." + gvk.Group
	for _, webhook := range vwc.Webhooks {
		if webhook.Name == name {
			return nil
		}
	}

	newWebhook := arv1.ValidatingWebhook{
		Name: name,
		ClientConfig: arv1.WebhookClientConfig{
			Service: &arv1.ServiceReference{
				Namespace: webhookNamespace,
				Name:      webhookName,
				Path:      &path,
			},
			CABundle: data,
		},
		Rules:                   rules,
		FailurePolicy:           &fail,
		SideEffects:             &sideEffects,
		AdmissionReviewVersions: admissionReviewVersions,
	}

	vwc.Webhooks = append(vwc.Webhooks, newWebhook)

	_, err = vwcClient.ValidatingWebhookConfigurations().Update(context.TODO(), vwc, metav1.UpdateOptions{})
	if err != nil {
		return err
	}

	return nil
}

func SetupManager(ctx context.Context, mgr manager.Manager, gvk schema.GroupVersionKind, auditor *auditlib.EventPublisher, watchOnlyDefault bool) error {
	switch gvk {
	case schema.GroupVersionKind{
		Group:   "accessanalyzer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Analyzer",
	}:
		if err := (&controllersaccessanalyzer.AnalyzerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Analyzer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_accessanalyzer_analyzer"],
			TypeName:         "aws_accessanalyzer_analyzer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Analyzer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "acm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&controllersacm.CertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Certificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_acm_certificate"],
			TypeName:         "aws_acm_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "acm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CertificateValidation",
	}:
		if err := (&controllersacm.CertificateValidationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CertificateValidation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_acm_certificate_validation"],
			TypeName:         "aws_acm_certificate_validation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CertificateValidation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "acmpca.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&controllersacmpca.CertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Certificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_acmpca_certificate"],
			TypeName:         "aws_acmpca_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "acmpca.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CertificateAuthority",
	}:
		if err := (&controllersacmpca.CertificateAuthorityReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CertificateAuthority"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_acmpca_certificate_authority"],
			TypeName:         "aws_acmpca_certificate_authority",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CertificateAuthority")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "acmpca.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CertificateAuthorityCertificate",
	}:
		if err := (&controllersacmpca.CertificateAuthorityCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CertificateAuthorityCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_acmpca_certificate_authority_certificate"],
			TypeName:         "aws_acmpca_certificate_authority_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CertificateAuthorityCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alb",
	}:
		if err := (&controllersalb.AlbReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Alb"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_alb"],
			TypeName:         "aws_alb",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Alb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&controllersalb.ListenerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Listener"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_alb_listener"],
			TypeName:         "aws_alb_listener",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ListenerCertificate",
	}:
		if err := (&controllersalb.ListenerCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ListenerCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_alb_listener_certificate"],
			TypeName:         "aws_alb_listener_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ListenerCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ListenerRule",
	}:
		if err := (&controllersalb.ListenerRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ListenerRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_alb_listener_rule"],
			TypeName:         "aws_alb_listener_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ListenerRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetGroup",
	}:
		if err := (&controllersalb.TargetGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_alb_target_group"],
			TypeName:         "aws_alb_target_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetGroupAttachment",
	}:
		if err := (&controllersalb.TargetGroupAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetGroupAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_alb_target_group_attachment"],
			TypeName:         "aws_alb_target_group_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetGroupAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ami.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ami",
	}:
		if err := (&controllersami.AmiReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Ami"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ami"],
			TypeName:         "aws_ami",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Ami")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ami.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Copy",
	}:
		if err := (&controllersami.CopyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Copy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ami_copy"],
			TypeName:         "aws_ami_copy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Copy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ami.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FromInstance",
	}:
		if err := (&controllersami.FromInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FromInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ami_from_instance"],
			TypeName:         "aws_ami_from_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FromInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ami.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LaunchPermission",
	}:
		if err := (&controllersami.LaunchPermissionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LaunchPermission"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ami_launch_permission"],
			TypeName:         "aws_ami_launch_permission",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LaunchPermission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amplify.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&controllersamplify.AppReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("App"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_amplify_app"],
			TypeName:         "aws_amplify_app",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amplify.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendEnvironment",
	}:
		if err := (&controllersamplify.BackendEnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BackendEnvironment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_amplify_backend_environment"],
			TypeName:         "aws_amplify_backend_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackendEnvironment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amplify.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Branch",
	}:
		if err := (&controllersamplify.BranchReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Branch"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_amplify_branch"],
			TypeName:         "aws_amplify_branch",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Branch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amplify.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainAssociation",
	}:
		if err := (&controllersamplify.DomainAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DomainAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_amplify_domain_association"],
			TypeName:         "aws_amplify_domain_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amplify.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Webhook",
	}:
		if err := (&controllersamplify.WebhookReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Webhook"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_amplify_webhook"],
			TypeName:         "aws_amplify_webhook",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Webhook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersapigateway.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_account"],
			TypeName:         "aws_api_gateway_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiKey",
	}:
		if err := (&controllersapigateway.ApiKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_api_key"],
			TypeName:         "aws_api_gateway_api_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Authorizer",
	}:
		if err := (&controllersapigateway.AuthorizerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Authorizer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_authorizer"],
			TypeName:         "aws_api_gateway_authorizer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Authorizer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BasePathMapping",
	}:
		if err := (&controllersapigateway.BasePathMappingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BasePathMapping"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_base_path_mapping"],
			TypeName:         "aws_api_gateway_base_path_mapping",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BasePathMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientCertificate",
	}:
		if err := (&controllersapigateway.ClientCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClientCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_client_certificate"],
			TypeName:         "aws_api_gateway_client_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClientCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Deployment",
	}:
		if err := (&controllersapigateway.DeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Deployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_deployment"],
			TypeName:         "aws_api_gateway_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Deployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DocumentationPart",
	}:
		if err := (&controllersapigateway.DocumentationPartReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DocumentationPart"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_documentation_part"],
			TypeName:         "aws_api_gateway_documentation_part",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DocumentationPart")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DocumentationVersion",
	}:
		if err := (&controllersapigateway.DocumentationVersionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DocumentationVersion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_documentation_version"],
			TypeName:         "aws_api_gateway_documentation_version",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DocumentationVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainName",
	}:
		if err := (&controllersapigateway.DomainNameReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DomainName"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_domain_name"],
			TypeName:         "aws_api_gateway_domain_name",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainName")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayResponse",
	}:
		if err := (&controllersapigateway.GatewayResponseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GatewayResponse"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_gateway_response"],
			TypeName:         "aws_api_gateway_gateway_response",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GatewayResponse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Integration",
	}:
		if err := (&controllersapigateway.IntegrationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Integration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_integration"],
			TypeName:         "aws_api_gateway_integration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Integration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IntegrationResponse",
	}:
		if err := (&controllersapigateway.IntegrationResponseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IntegrationResponse"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_integration_response"],
			TypeName:         "aws_api_gateway_integration_response",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IntegrationResponse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Method",
	}:
		if err := (&controllersapigateway.MethodReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Method"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_method"],
			TypeName:         "aws_api_gateway_method",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Method")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MethodResponse",
	}:
		if err := (&controllersapigateway.MethodResponseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MethodResponse"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_method_response"],
			TypeName:         "aws_api_gateway_method_response",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MethodResponse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MethodSettings",
	}:
		if err := (&controllersapigateway.MethodSettingsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MethodSettings"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_method_settings"],
			TypeName:         "aws_api_gateway_method_settings",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MethodSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Model",
	}:
		if err := (&controllersapigateway.ModelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Model"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_model"],
			TypeName:         "aws_api_gateway_model",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Model")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RequestValidator",
	}:
		if err := (&controllersapigateway.RequestValidatorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RequestValidator"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_request_validator"],
			TypeName:         "aws_api_gateway_request_validator",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RequestValidator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApigatewayResource",
	}:
		if err := (&controllersapigateway.ApigatewayResourceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApigatewayResource"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_resource"],
			TypeName:         "aws_api_gateway_resource",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApigatewayResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RestAPI",
	}:
		if err := (&controllersapigateway.RestAPIReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RestAPI"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_rest_api"],
			TypeName:         "aws_api_gateway_rest_api",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RestAPI")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RestAPIPolicy",
	}:
		if err := (&controllersapigateway.RestAPIPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RestAPIPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_rest_api_policy"],
			TypeName:         "aws_api_gateway_rest_api_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RestAPIPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Stage",
	}:
		if err := (&controllersapigateway.StageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Stage"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_stage"],
			TypeName:         "aws_api_gateway_stage",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Stage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UsagePlan",
	}:
		if err := (&controllersapigateway.UsagePlanReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UsagePlan"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_usage_plan"],
			TypeName:         "aws_api_gateway_usage_plan",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UsagePlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UsagePlanKey",
	}:
		if err := (&controllersapigateway.UsagePlanKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UsagePlanKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_usage_plan_key"],
			TypeName:         "aws_api_gateway_usage_plan_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UsagePlanKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcLink",
	}:
		if err := (&controllersapigateway.VpcLinkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VpcLink"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_api_gateway_vpc_link"],
			TypeName:         "aws_api_gateway_vpc_link",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcLink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Api",
	}:
		if err := (&controllersapigatewayv2.ApiReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Api"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_api"],
			TypeName:         "aws_apigatewayv2_api",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Api")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiMapping",
	}:
		if err := (&controllersapigatewayv2.ApiMappingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiMapping"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_api_mapping"],
			TypeName:         "aws_apigatewayv2_api_mapping",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Authorizer",
	}:
		if err := (&controllersapigatewayv2.AuthorizerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Authorizer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_authorizer"],
			TypeName:         "aws_apigatewayv2_authorizer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Authorizer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Deployment",
	}:
		if err := (&controllersapigatewayv2.DeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Deployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_deployment"],
			TypeName:         "aws_apigatewayv2_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Deployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainName",
	}:
		if err := (&controllersapigatewayv2.DomainNameReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DomainName"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_domain_name"],
			TypeName:         "aws_apigatewayv2_domain_name",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainName")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Integration",
	}:
		if err := (&controllersapigatewayv2.IntegrationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Integration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_integration"],
			TypeName:         "aws_apigatewayv2_integration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Integration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IntegrationResponse",
	}:
		if err := (&controllersapigatewayv2.IntegrationResponseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IntegrationResponse"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_integration_response"],
			TypeName:         "aws_apigatewayv2_integration_response",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IntegrationResponse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Model",
	}:
		if err := (&controllersapigatewayv2.ModelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Model"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_model"],
			TypeName:         "aws_apigatewayv2_model",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Model")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&controllersapigatewayv2.RouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Route"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_route"],
			TypeName:         "aws_apigatewayv2_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteResponse",
	}:
		if err := (&controllersapigatewayv2.RouteResponseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RouteResponse"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_route_response"],
			TypeName:         "aws_apigatewayv2_route_response",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouteResponse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Stage",
	}:
		if err := (&controllersapigatewayv2.StageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Stage"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_stage"],
			TypeName:         "aws_apigatewayv2_stage",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Stage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcLink",
	}:
		if err := (&controllersapigatewayv2.VpcLinkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VpcLink"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apigatewayv2_vpc_link"],
			TypeName:         "aws_apigatewayv2_vpc_link",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcLink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CookieStickinessPolicy",
	}:
		if err := (&controllersapp.CookieStickinessPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CookieStickinessPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_app_cookie_stickiness_policy"],
			TypeName:         "aws_app_cookie_stickiness_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CookieStickinessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appautoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersappautoscaling.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appautoscaling_policy"],
			TypeName:         "aws_appautoscaling_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appautoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScheduledAction",
	}:
		if err := (&controllersappautoscaling.ScheduledActionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ScheduledAction"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appautoscaling_scheduled_action"],
			TypeName:         "aws_appautoscaling_scheduled_action",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ScheduledAction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appautoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Target",
	}:
		if err := (&controllersappautoscaling.TargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Target"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appautoscaling_target"],
			TypeName:         "aws_appautoscaling_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Target")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayRoute",
	}:
		if err := (&controllersappmesh.GatewayRouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GatewayRoute"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appmesh_gateway_route"],
			TypeName:         "aws_appmesh_gateway_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GatewayRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Mesh",
	}:
		if err := (&controllersappmesh.MeshReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Mesh"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appmesh_mesh"],
			TypeName:         "aws_appmesh_mesh",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Mesh")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&controllersappmesh.RouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Route"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appmesh_route"],
			TypeName:         "aws_appmesh_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualGateway",
	}:
		if err := (&controllersappmesh.VirtualGatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualGateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appmesh_virtual_gateway"],
			TypeName:         "aws_appmesh_virtual_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNode",
	}:
		if err := (&controllersappmesh.VirtualNodeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualNode"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appmesh_virtual_node"],
			TypeName:         "aws_appmesh_virtual_node",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualNode")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualRouter",
	}:
		if err := (&controllersappmesh.VirtualRouterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualRouter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appmesh_virtual_router"],
			TypeName:         "aws_appmesh_virtual_router",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualRouter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualService",
	}:
		if err := (&controllersappmesh.VirtualServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appmesh_virtual_service"],
			TypeName:         "aws_appmesh_virtual_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apprunner.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoScalingConfigurationVersion",
	}:
		if err := (&controllersapprunner.AutoScalingConfigurationVersionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AutoScalingConfigurationVersion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apprunner_auto_scaling_configuration_version"],
			TypeName:         "aws_apprunner_auto_scaling_configuration_version",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AutoScalingConfigurationVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apprunner.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersapprunner.ConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apprunner_connection"],
			TypeName:         "aws_apprunner_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apprunner.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomDomainAssociation",
	}:
		if err := (&controllersapprunner.CustomDomainAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CustomDomainAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apprunner_custom_domain_association"],
			TypeName:         "aws_apprunner_custom_domain_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CustomDomainAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apprunner.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllersapprunner.ServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_apprunner_service"],
			TypeName:         "aws_apprunner_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appsync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiKey",
	}:
		if err := (&controllersappsync.ApiKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appsync_api_key"],
			TypeName:         "aws_appsync_api_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appsync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Datasource",
	}:
		if err := (&controllersappsync.DatasourceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Datasource"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appsync_datasource"],
			TypeName:         "aws_appsync_datasource",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Datasource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appsync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Function",
	}:
		if err := (&controllersappsync.FunctionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Function"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appsync_function"],
			TypeName:         "aws_appsync_function",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Function")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appsync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GraphqlAPI",
	}:
		if err := (&controllersappsync.GraphqlAPIReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GraphqlAPI"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appsync_graphql_api"],
			TypeName:         "aws_appsync_graphql_api",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GraphqlAPI")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appsync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Resolver",
	}:
		if err := (&controllersappsync.ResolverReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Resolver"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_appsync_resolver"],
			TypeName:         "aws_appsync_resolver",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Resolver")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "athena.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllersathena.DatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_athena_database"],
			TypeName:         "aws_athena_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "athena.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamedQuery",
	}:
		if err := (&controllersathena.NamedQueryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NamedQuery"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_athena_named_query"],
			TypeName:         "aws_athena_named_query",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NamedQuery")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "athena.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workgroup",
	}:
		if err := (&controllersathena.WorkgroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Workgroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_athena_workgroup"],
			TypeName:         "aws_athena_workgroup",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Workgroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&controllersautoscaling.AttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Attachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_autoscaling_attachment"],
			TypeName:         "aws_autoscaling_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersautoscaling.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_autoscaling_group"],
			TypeName:         "aws_autoscaling_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LifecycleHook",
	}:
		if err := (&controllersautoscaling.LifecycleHookReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LifecycleHook"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_autoscaling_lifecycle_hook"],
			TypeName:         "aws_autoscaling_lifecycle_hook",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LifecycleHook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Notification",
	}:
		if err := (&controllersautoscaling.NotificationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Notification"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_autoscaling_notification"],
			TypeName:         "aws_autoscaling_notification",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Notification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersautoscaling.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_autoscaling_policy"],
			TypeName:         "aws_autoscaling_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schedule",
	}:
		if err := (&controllersautoscaling.ScheduleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Schedule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_autoscaling_schedule"],
			TypeName:         "aws_autoscaling_schedule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Schedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscalingplans.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScalingPlan",
	}:
		if err := (&controllersautoscalingplans.ScalingPlanReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ScalingPlan"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_autoscalingplans_scaling_plan"],
			TypeName:         "aws_autoscalingplans_scaling_plan",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ScalingPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalSettings",
	}:
		if err := (&controllersbackup.GlobalSettingsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GlobalSettings"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_backup_global_settings"],
			TypeName:         "aws_backup_global_settings",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GlobalSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Plan",
	}:
		if err := (&controllersbackup.PlanReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Plan"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_backup_plan"],
			TypeName:         "aws_backup_plan",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Plan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionSettings",
	}:
		if err := (&controllersbackup.RegionSettingsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegionSettings"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_backup_region_settings"],
			TypeName:         "aws_backup_region_settings",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegionSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Selection",
	}:
		if err := (&controllersbackup.SelectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Selection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_backup_selection"],
			TypeName:         "aws_backup_selection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Selection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vault",
	}:
		if err := (&controllersbackup.VaultReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Vault"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_backup_vault"],
			TypeName:         "aws_backup_vault",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Vault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VaultNotifications",
	}:
		if err := (&controllersbackup.VaultNotificationsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VaultNotifications"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_backup_vault_notifications"],
			TypeName:         "aws_backup_vault_notifications",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VaultNotifications")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VaultPolicy",
	}:
		if err := (&controllersbackup.VaultPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VaultPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_backup_vault_policy"],
			TypeName:         "aws_backup_vault_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VaultPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ComputeEnvironment",
	}:
		if err := (&controllersbatch.ComputeEnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ComputeEnvironment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_batch_compute_environment"],
			TypeName:         "aws_batch_compute_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ComputeEnvironment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobDefinition",
	}:
		if err := (&controllersbatch.JobDefinitionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("JobDefinition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_batch_job_definition"],
			TypeName:         "aws_batch_job_definition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JobDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobQueue",
	}:
		if err := (&controllersbatch.JobQueueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("JobQueue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_batch_job_queue"],
			TypeName:         "aws_batch_job_queue",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JobQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "budgets.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Budget",
	}:
		if err := (&controllersbudgets.BudgetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Budget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_budgets_budget"],
			TypeName:         "aws_budgets_budget",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Budget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "budgets.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BudgetAction",
	}:
		if err := (&controllersbudgets.BudgetActionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BudgetAction"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_budgets_budget_action"],
			TypeName:         "aws_budgets_budget_action",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BudgetAction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud9.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnvironmentEc2",
	}:
		if err := (&controllerscloud9.EnvironmentEc2Reconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EnvironmentEc2"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloud9_environment_ec2"],
			TypeName:         "aws_cloud9_environment_ec2",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EnvironmentEc2")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudformationstack.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudformationStack",
	}:
		if err := (&controllerscloudformationstack.CloudformationStackReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudformationStack"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudformation_stack"],
			TypeName:         "aws_cloudformation_stack",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudformationStack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudformationstack.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Set",
	}:
		if err := (&controllerscloudformationstack.SetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Set"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudformation_stack_set"],
			TypeName:         "aws_cloudformation_stack_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Set")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudformationstack.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SetInstance",
	}:
		if err := (&controllerscloudformationstack.SetInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SetInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudformation_stack_set_instance"],
			TypeName:         "aws_cloudformation_stack_set_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SetInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudformationtype.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudformationType",
	}:
		if err := (&controllerscloudformationtype.CloudformationTypeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudformationType"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudformation_type"],
			TypeName:         "aws_cloudformation_type",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudformationType")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CachePolicy",
	}:
		if err := (&controllerscloudfront.CachePolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CachePolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudfront_cache_policy"],
			TypeName:         "aws_cloudfront_cache_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CachePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Distribution",
	}:
		if err := (&controllerscloudfront.DistributionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Distribution"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudfront_distribution"],
			TypeName:         "aws_cloudfront_distribution",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Distribution")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Function",
	}:
		if err := (&controllerscloudfront.FunctionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Function"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudfront_function"],
			TypeName:         "aws_cloudfront_function",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Function")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyGroup",
	}:
		if err := (&controllerscloudfront.KeyGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KeyGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudfront_key_group"],
			TypeName:         "aws_cloudfront_key_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OriginAccessIdentity",
	}:
		if err := (&controllerscloudfront.OriginAccessIdentityReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OriginAccessIdentity"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudfront_origin_access_identity"],
			TypeName:         "aws_cloudfront_origin_access_identity",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OriginAccessIdentity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OriginRequestPolicy",
	}:
		if err := (&controllerscloudfront.OriginRequestPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OriginRequestPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudfront_origin_request_policy"],
			TypeName:         "aws_cloudfront_origin_request_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OriginRequestPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublicKey",
	}:
		if err := (&controllerscloudfront.PublicKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PublicKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudfront_public_key"],
			TypeName:         "aws_cloudfront_public_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PublicKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RealtimeLogConfig",
	}:
		if err := (&controllerscloudfront.RealtimeLogConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RealtimeLogConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudfront_realtime_log_config"],
			TypeName:         "aws_cloudfront_realtime_log_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RealtimeLogConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudhsmv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllerscloudhsmv2.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudhsm_v2_cluster"],
			TypeName:         "aws_cloudhsm_v2_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudhsmv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hsm",
	}:
		if err := (&controllerscloudhsmv2.HsmReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Hsm"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudhsm_v2_hsm"],
			TypeName:         "aws_cloudhsm_v2_hsm",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Hsm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudtrail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cloudtrail",
	}:
		if err := (&controllerscloudtrail.CloudtrailReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cloudtrail"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudtrail"],
			TypeName:         "aws_cloudtrail",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cloudtrail")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CompositeAlarm",
	}:
		if err := (&controllerscloudwatch.CompositeAlarmReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CompositeAlarm"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_composite_alarm"],
			TypeName:         "aws_cloudwatch_composite_alarm",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CompositeAlarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dashboard",
	}:
		if err := (&controllerscloudwatch.DashboardReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Dashboard"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_dashboard"],
			TypeName:         "aws_cloudwatch_dashboard",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Dashboard")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventAPIDestination",
	}:
		if err := (&controllerscloudwatch.EventAPIDestinationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventAPIDestination"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_event_api_destination"],
			TypeName:         "aws_cloudwatch_event_api_destination",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventAPIDestination")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventArchive",
	}:
		if err := (&controllerscloudwatch.EventArchiveReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventArchive"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_event_archive"],
			TypeName:         "aws_cloudwatch_event_archive",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventArchive")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventBus",
	}:
		if err := (&controllerscloudwatch.EventBusReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventBus"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_event_bus"],
			TypeName:         "aws_cloudwatch_event_bus",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventBus")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventBusPolicy",
	}:
		if err := (&controllerscloudwatch.EventBusPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventBusPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_event_bus_policy"],
			TypeName:         "aws_cloudwatch_event_bus_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventBusPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventConnection",
	}:
		if err := (&controllerscloudwatch.EventConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_event_connection"],
			TypeName:         "aws_cloudwatch_event_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventPermission",
	}:
		if err := (&controllerscloudwatch.EventPermissionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventPermission"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_event_permission"],
			TypeName:         "aws_cloudwatch_event_permission",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventPermission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventRule",
	}:
		if err := (&controllerscloudwatch.EventRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_event_rule"],
			TypeName:         "aws_cloudwatch_event_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventTarget",
	}:
		if err := (&controllerscloudwatch.EventTargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventTarget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_event_target"],
			TypeName:         "aws_cloudwatch_event_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogDestination",
	}:
		if err := (&controllerscloudwatch.LogDestinationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LogDestination"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_log_destination"],
			TypeName:         "aws_cloudwatch_log_destination",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LogDestination")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogDestinationPolicy",
	}:
		if err := (&controllerscloudwatch.LogDestinationPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LogDestinationPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_log_destination_policy"],
			TypeName:         "aws_cloudwatch_log_destination_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LogDestinationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogGroup",
	}:
		if err := (&controllerscloudwatch.LogGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LogGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_log_group"],
			TypeName:         "aws_cloudwatch_log_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LogGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogMetricFilter",
	}:
		if err := (&controllerscloudwatch.LogMetricFilterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LogMetricFilter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_log_metric_filter"],
			TypeName:         "aws_cloudwatch_log_metric_filter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LogMetricFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogResourcePolicy",
	}:
		if err := (&controllerscloudwatch.LogResourcePolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LogResourcePolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_log_resource_policy"],
			TypeName:         "aws_cloudwatch_log_resource_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LogResourcePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogStream",
	}:
		if err := (&controllerscloudwatch.LogStreamReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LogStream"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_log_stream"],
			TypeName:         "aws_cloudwatch_log_stream",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LogStream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogSubscriptionFilter",
	}:
		if err := (&controllerscloudwatch.LogSubscriptionFilterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LogSubscriptionFilter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_log_subscription_filter"],
			TypeName:         "aws_cloudwatch_log_subscription_filter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LogSubscriptionFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MetricAlarm",
	}:
		if err := (&controllerscloudwatch.MetricAlarmReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MetricAlarm"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_metric_alarm"],
			TypeName:         "aws_cloudwatch_metric_alarm",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MetricAlarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MetricStream",
	}:
		if err := (&controllerscloudwatch.MetricStreamReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MetricStream"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_metric_stream"],
			TypeName:         "aws_cloudwatch_metric_stream",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MetricStream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QueryDefinition",
	}:
		if err := (&controllerscloudwatch.QueryDefinitionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("QueryDefinition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cloudwatch_query_definition"],
			TypeName:         "aws_cloudwatch_query_definition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "QueryDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codeartifact.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllerscodeartifact.DomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codeartifact_domain"],
			TypeName:         "aws_codeartifact_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codeartifact.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainPermissionsPolicy",
	}:
		if err := (&controllerscodeartifact.DomainPermissionsPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DomainPermissionsPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codeartifact_domain_permissions_policy"],
			TypeName:         "aws_codeartifact_domain_permissions_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainPermissionsPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codeartifact.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Repository",
	}:
		if err := (&controllerscodeartifact.RepositoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Repository"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codeartifact_repository"],
			TypeName:         "aws_codeartifact_repository",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Repository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codeartifact.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RepositoryPermissionsPolicy",
	}:
		if err := (&controllerscodeartifact.RepositoryPermissionsPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RepositoryPermissionsPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codeartifact_repository_permissions_policy"],
			TypeName:         "aws_codeartifact_repository_permissions_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RepositoryPermissionsPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codebuild.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&controllerscodebuild.ProjectReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Project"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codebuild_project"],
			TypeName:         "aws_codebuild_project",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codebuild.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReportGroup",
	}:
		if err := (&controllerscodebuild.ReportGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReportGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codebuild_report_group"],
			TypeName:         "aws_codebuild_report_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReportGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codebuild.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SourceCredential",
	}:
		if err := (&controllerscodebuild.SourceCredentialReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SourceCredential"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codebuild_source_credential"],
			TypeName:         "aws_codebuild_source_credential",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SourceCredential")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codebuild.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Webhook",
	}:
		if err := (&controllerscodebuild.WebhookReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Webhook"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codebuild_webhook"],
			TypeName:         "aws_codebuild_webhook",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Webhook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codecommit.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Repository",
	}:
		if err := (&controllerscodecommit.RepositoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Repository"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codecommit_repository"],
			TypeName:         "aws_codecommit_repository",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Repository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codecommit.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trigger",
	}:
		if err := (&controllerscodecommit.TriggerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Trigger"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codecommit_trigger"],
			TypeName:         "aws_codecommit_trigger",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Trigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codedeploy.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&controllerscodedeploy.AppReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("App"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codedeploy_app"],
			TypeName:         "aws_codedeploy_app",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codedeploy.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeploymentConfig",
	}:
		if err := (&controllerscodedeploy.DeploymentConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DeploymentConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codedeploy_deployment_config"],
			TypeName:         "aws_codedeploy_deployment_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DeploymentConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codedeploy.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeploymentGroup",
	}:
		if err := (&controllerscodedeploy.DeploymentGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DeploymentGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codedeploy_deployment_group"],
			TypeName:         "aws_codedeploy_deployment_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DeploymentGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codepipeline.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Codepipeline",
	}:
		if err := (&controllerscodepipeline.CodepipelineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Codepipeline"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codepipeline"],
			TypeName:         "aws_codepipeline",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Codepipeline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codepipeline.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Webhook",
	}:
		if err := (&controllerscodepipeline.WebhookReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Webhook"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codepipeline_webhook"],
			TypeName:         "aws_codepipeline_webhook",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Webhook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codestarconnections.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllerscodestarconnections.ConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codestarconnections_connection"],
			TypeName:         "aws_codestarconnections_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codestarconnections.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Host",
	}:
		if err := (&controllerscodestarconnections.HostReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Host"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codestarconnections_host"],
			TypeName:         "aws_codestarconnections_host",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Host")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codestarnotifications.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotificationRule",
	}:
		if err := (&controllerscodestarnotifications.NotificationRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NotificationRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_codestarnotifications_notification_rule"],
			TypeName:         "aws_codestarnotifications_notification_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NotificationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityPool",
	}:
		if err := (&controllerscognito.IdentityPoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityPool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cognito_identity_pool"],
			TypeName:         "aws_cognito_identity_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityPoolRolesAttachment",
	}:
		if err := (&controllerscognito.IdentityPoolRolesAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityPoolRolesAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cognito_identity_pool_roles_attachment"],
			TypeName:         "aws_cognito_identity_pool_roles_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityPoolRolesAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProvider",
	}:
		if err := (&controllerscognito.IdentityProviderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityProvider"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cognito_identity_provider"],
			TypeName:         "aws_cognito_identity_provider",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceServer",
	}:
		if err := (&controllerscognito.ResourceServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResourceServer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cognito_resource_server"],
			TypeName:         "aws_cognito_resource_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResourceServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserGroup",
	}:
		if err := (&controllerscognito.UserGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cognito_user_group"],
			TypeName:         "aws_cognito_user_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPool",
	}:
		if err := (&controllerscognito.UserPoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserPool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cognito_user_pool"],
			TypeName:         "aws_cognito_user_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPoolClient",
	}:
		if err := (&controllerscognito.UserPoolClientReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserPoolClient"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cognito_user_pool_client"],
			TypeName:         "aws_cognito_user_pool_client",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserPoolClient")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPoolDomain",
	}:
		if err := (&controllerscognito.UserPoolDomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserPoolDomain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cognito_user_pool_domain"],
			TypeName:         "aws_cognito_user_pool_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserPoolDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPoolUiCustomization",
	}:
		if err := (&controllerscognito.UserPoolUiCustomizationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserPoolUiCustomization"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cognito_user_pool_ui_customization"],
			TypeName:         "aws_cognito_user_pool_ui_customization",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserPoolUiCustomization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AggregateAuthorization",
	}:
		if err := (&controllersconfig.AggregateAuthorizationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AggregateAuthorization"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_config_aggregate_authorization"],
			TypeName:         "aws_config_aggregate_authorization",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AggregateAuthorization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigRule",
	}:
		if err := (&controllersconfig.ConfigRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConfigRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_config_config_rule"],
			TypeName:         "aws_config_config_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationAggregator",
	}:
		if err := (&controllersconfig.ConfigurationAggregatorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConfigurationAggregator"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_config_configuration_aggregator"],
			TypeName:         "aws_config_configuration_aggregator",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigurationAggregator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationRecorder",
	}:
		if err := (&controllersconfig.ConfigurationRecorderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConfigurationRecorder"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_config_configuration_recorder"],
			TypeName:         "aws_config_configuration_recorder",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigurationRecorder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationRecorderStatus",
	}:
		if err := (&controllersconfig.ConfigurationRecorderStatusReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConfigurationRecorderStatus"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_config_configuration_recorder_status"],
			TypeName:         "aws_config_configuration_recorder_status",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigurationRecorderStatus")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConformancePack",
	}:
		if err := (&controllersconfig.ConformancePackReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConformancePack"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_config_conformance_pack"],
			TypeName:         "aws_config_conformance_pack",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConformancePack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeliveryChannel",
	}:
		if err := (&controllersconfig.DeliveryChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DeliveryChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_config_delivery_channel"],
			TypeName:         "aws_config_delivery_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DeliveryChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationCustomRule",
	}:
		if err := (&controllersconfig.OrganizationCustomRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationCustomRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_config_organization_custom_rule"],
			TypeName:         "aws_config_organization_custom_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationCustomRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationManagedRule",
	}:
		if err := (&controllersconfig.OrganizationManagedRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationManagedRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_config_organization_managed_rule"],
			TypeName:         "aws_config_organization_managed_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationManagedRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RemediationConfiguration",
	}:
		if err := (&controllersconfig.RemediationConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RemediationConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_config_remediation_configuration"],
			TypeName:         "aws_config_remediation_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RemediationConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cur.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReportDefinition",
	}:
		if err := (&controllerscur.ReportDefinitionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReportDefinition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_cur_report_definition"],
			TypeName:         "aws_cur_report_definition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReportDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "customer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllerscustomer.GatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_customer_gateway"],
			TypeName:         "aws_customer_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datapipeline.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pipeline",
	}:
		if err := (&controllersdatapipeline.PipelineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Pipeline"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_datapipeline_pipeline"],
			TypeName:         "aws_datapipeline_pipeline",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Pipeline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Agent",
	}:
		if err := (&controllersdatasync.AgentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Agent"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_datasync_agent"],
			TypeName:         "aws_datasync_agent",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Agent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocationEfs",
	}:
		if err := (&controllersdatasync.LocationEfsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LocationEfs"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_datasync_location_efs"],
			TypeName:         "aws_datasync_location_efs",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LocationEfs")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocationFsxWindowsFileSystem",
	}:
		if err := (&controllersdatasync.LocationFsxWindowsFileSystemReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LocationFsxWindowsFileSystem"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_datasync_location_fsx_windows_file_system"],
			TypeName:         "aws_datasync_location_fsx_windows_file_system",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LocationFsxWindowsFileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocationNfs",
	}:
		if err := (&controllersdatasync.LocationNfsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LocationNfs"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_datasync_location_nfs"],
			TypeName:         "aws_datasync_location_nfs",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LocationNfs")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocationS3",
	}:
		if err := (&controllersdatasync.LocationS3Reconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LocationS3"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_datasync_location_s3"],
			TypeName:         "aws_datasync_location_s3",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LocationS3")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocationSmb",
	}:
		if err := (&controllersdatasync.LocationSmbReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LocationSmb"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_datasync_location_smb"],
			TypeName:         "aws_datasync_location_smb",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LocationSmb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Task",
	}:
		if err := (&controllersdatasync.TaskReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Task"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_datasync_task"],
			TypeName:         "aws_datasync_task",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Task")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dax.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersdax.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dax_cluster"],
			TypeName:         "aws_dax_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dax.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&controllersdax.ParameterGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ParameterGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dax_parameter_group"],
			TypeName:         "aws_dax_parameter_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dax.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&controllersdax.SubnetGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubnetGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dax_subnet_group"],
			TypeName:         "aws_dax_subnet_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterSnapshot",
	}:
		if err := (&controllersdb.ClusterSnapshotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterSnapshot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_cluster_snapshot"],
			TypeName:         "aws_db_cluster_snapshot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterSnapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSubscription",
	}:
		if err := (&controllersdb.EventSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_event_subscription"],
			TypeName:         "aws_db_event_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersdb.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_instance"],
			TypeName:         "aws_db_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceRoleAssociation",
	}:
		if err := (&controllersdb.InstanceRoleAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceRoleAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_instance_role_association"],
			TypeName:         "aws_db_instance_role_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceRoleAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OptionGroup",
	}:
		if err := (&controllersdb.OptionGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OptionGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_option_group"],
			TypeName:         "aws_db_option_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OptionGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&controllersdb.ParameterGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ParameterGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_parameter_group"],
			TypeName:         "aws_db_parameter_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Proxy",
	}:
		if err := (&controllersdb.ProxyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Proxy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_proxy"],
			TypeName:         "aws_db_proxy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Proxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProxyDefaultTargetGroup",
	}:
		if err := (&controllersdb.ProxyDefaultTargetGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProxyDefaultTargetGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_proxy_default_target_group"],
			TypeName:         "aws_db_proxy_default_target_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProxyDefaultTargetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProxyEndpoint",
	}:
		if err := (&controllersdb.ProxyEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProxyEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_proxy_endpoint"],
			TypeName:         "aws_db_proxy_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProxyEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProxyTarget",
	}:
		if err := (&controllersdb.ProxyTargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProxyTarget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_proxy_target"],
			TypeName:         "aws_db_proxy_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProxyTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&controllersdb.SecurityGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_security_group"],
			TypeName:         "aws_db_security_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&controllersdb.SnapshotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Snapshot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_snapshot"],
			TypeName:         "aws_db_snapshot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&controllersdb.SubnetGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubnetGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_db_subnet_group"],
			TypeName:         "aws_db_subnet_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkACL",
	}:
		if err := (&controllersdefault.NetworkACLReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkACL"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_default_network_acl"],
			TypeName:         "aws_default_network_acl",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteTable",
	}:
		if err := (&controllersdefault.RouteTableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RouteTable"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_default_route_table"],
			TypeName:         "aws_default_route_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouteTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&controllersdefault.SecurityGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_default_security_group"],
			TypeName:         "aws_default_security_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subnet",
	}:
		if err := (&controllersdefault.SubnetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Subnet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_default_subnet"],
			TypeName:         "aws_default_subnet",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Subnet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vpc",
	}:
		if err := (&controllersdefault.VpcReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Vpc"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_default_vpc"],
			TypeName:         "aws_default_vpc",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Vpc")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcDHCPOptions",
	}:
		if err := (&controllersdefault.VpcDHCPOptionsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VpcDHCPOptions"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_default_vpc_dhcp_options"],
			TypeName:         "aws_default_vpc_dhcp_options",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcDHCPOptions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devicefarm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&controllersdevicefarm.ProjectReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Project"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_devicefarm_project"],
			TypeName:         "aws_devicefarm_project",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "directoryservice.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConditionalForwarder",
	}:
		if err := (&controllersdirectoryservice.ConditionalForwarderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConditionalForwarder"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_directory_service_conditional_forwarder"],
			TypeName:         "aws_directory_service_conditional_forwarder",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConditionalForwarder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "directoryservice.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Directory",
	}:
		if err := (&controllersdirectoryservice.DirectoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Directory"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_directory_service_directory"],
			TypeName:         "aws_directory_service_directory",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Directory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "directoryservice.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogSubscription",
	}:
		if err := (&controllersdirectoryservice.LogSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LogSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_directory_service_log_subscription"],
			TypeName:         "aws_directory_service_log_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LogSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dlm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LifecyclePolicy",
	}:
		if err := (&controllersdlm.LifecyclePolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LifecyclePolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dlm_lifecycle_policy"],
			TypeName:         "aws_dlm_lifecycle_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LifecyclePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&controllersdms.CertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Certificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dms_certificate"],
			TypeName:         "aws_dms_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&controllersdms.EndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Endpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dms_endpoint"],
			TypeName:         "aws_dms_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSubscription",
	}:
		if err := (&controllersdms.EventSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dms_event_subscription"],
			TypeName:         "aws_dms_event_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationInstance",
	}:
		if err := (&controllersdms.ReplicationInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReplicationInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dms_replication_instance"],
			TypeName:         "aws_dms_replication_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReplicationInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationSubnetGroup",
	}:
		if err := (&controllersdms.ReplicationSubnetGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReplicationSubnetGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dms_replication_subnet_group"],
			TypeName:         "aws_dms_replication_subnet_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReplicationSubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationTask",
	}:
		if err := (&controllersdms.ReplicationTaskReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReplicationTask"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dms_replication_task"],
			TypeName:         "aws_dms_replication_task",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReplicationTask")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "docdb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersdocdb.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_docdb_cluster"],
			TypeName:         "aws_docdb_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "docdb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterInstance",
	}:
		if err := (&controllersdocdb.ClusterInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_docdb_cluster_instance"],
			TypeName:         "aws_docdb_cluster_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "docdb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterParameterGroup",
	}:
		if err := (&controllersdocdb.ClusterParameterGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterParameterGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_docdb_cluster_parameter_group"],
			TypeName:         "aws_docdb_cluster_parameter_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "docdb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterSnapshot",
	}:
		if err := (&controllersdocdb.ClusterSnapshotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterSnapshot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_docdb_cluster_snapshot"],
			TypeName:         "aws_docdb_cluster_snapshot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterSnapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "docdb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&controllersdocdb.SubnetGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubnetGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_docdb_subnet_group"],
			TypeName:         "aws_docdb_subnet_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BgpPeer",
	}:
		if err := (&controllersdx.BgpPeerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BgpPeer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_bgp_peer"],
			TypeName:         "aws_dx_bgp_peer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BgpPeer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersdx.ConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_connection"],
			TypeName:         "aws_dx_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionAssociation",
	}:
		if err := (&controllersdx.ConnectionAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConnectionAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_connection_association"],
			TypeName:         "aws_dx_connection_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectionAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersdx.GatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_gateway"],
			TypeName:         "aws_dx_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayAssociation",
	}:
		if err := (&controllersdx.GatewayAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GatewayAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_gateway_association"],
			TypeName:         "aws_dx_gateway_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GatewayAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayAssociationProposal",
	}:
		if err := (&controllersdx.GatewayAssociationProposalReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GatewayAssociationProposal"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_gateway_association_proposal"],
			TypeName:         "aws_dx_gateway_association_proposal",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GatewayAssociationProposal")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedPrivateVirtualInterface",
	}:
		if err := (&controllersdx.HostedPrivateVirtualInterfaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HostedPrivateVirtualInterface"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_hosted_private_virtual_interface"],
			TypeName:         "aws_dx_hosted_private_virtual_interface",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostedPrivateVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedPrivateVirtualInterfaceAccepter",
	}:
		if err := (&controllersdx.HostedPrivateVirtualInterfaceAccepterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HostedPrivateVirtualInterfaceAccepter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_hosted_private_virtual_interface_accepter"],
			TypeName:         "aws_dx_hosted_private_virtual_interface_accepter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostedPrivateVirtualInterfaceAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedPublicVirtualInterface",
	}:
		if err := (&controllersdx.HostedPublicVirtualInterfaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HostedPublicVirtualInterface"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_hosted_public_virtual_interface"],
			TypeName:         "aws_dx_hosted_public_virtual_interface",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostedPublicVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedPublicVirtualInterfaceAccepter",
	}:
		if err := (&controllersdx.HostedPublicVirtualInterfaceAccepterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HostedPublicVirtualInterfaceAccepter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_hosted_public_virtual_interface_accepter"],
			TypeName:         "aws_dx_hosted_public_virtual_interface_accepter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostedPublicVirtualInterfaceAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedTransitVirtualInterface",
	}:
		if err := (&controllersdx.HostedTransitVirtualInterfaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HostedTransitVirtualInterface"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_hosted_transit_virtual_interface"],
			TypeName:         "aws_dx_hosted_transit_virtual_interface",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostedTransitVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedTransitVirtualInterfaceAccepter",
	}:
		if err := (&controllersdx.HostedTransitVirtualInterfaceAccepterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HostedTransitVirtualInterfaceAccepter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_hosted_transit_virtual_interface_accepter"],
			TypeName:         "aws_dx_hosted_transit_virtual_interface_accepter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostedTransitVirtualInterfaceAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lag",
	}:
		if err := (&controllersdx.LagReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Lag"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_lag"],
			TypeName:         "aws_dx_lag",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Lag")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrivateVirtualInterface",
	}:
		if err := (&controllersdx.PrivateVirtualInterfaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PrivateVirtualInterface"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_private_virtual_interface"],
			TypeName:         "aws_dx_private_virtual_interface",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PrivateVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublicVirtualInterface",
	}:
		if err := (&controllersdx.PublicVirtualInterfaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PublicVirtualInterface"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_public_virtual_interface"],
			TypeName:         "aws_dx_public_virtual_interface",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PublicVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitVirtualInterface",
	}:
		if err := (&controllersdx.TransitVirtualInterfaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitVirtualInterface"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dx_transit_virtual_interface"],
			TypeName:         "aws_dx_transit_virtual_interface",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dynamodb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalTable",
	}:
		if err := (&controllersdynamodb.GlobalTableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GlobalTable"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dynamodb_global_table"],
			TypeName:         "aws_dynamodb_global_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GlobalTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dynamodb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KinesisStreamingDestination",
	}:
		if err := (&controllersdynamodb.KinesisStreamingDestinationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KinesisStreamingDestination"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dynamodb_kinesis_streaming_destination"],
			TypeName:         "aws_dynamodb_kinesis_streaming_destination",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KinesisStreamingDestination")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dynamodb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&controllersdynamodb.TableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Table"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dynamodb_table"],
			TypeName:         "aws_dynamodb_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dynamodb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableItem",
	}:
		if err := (&controllersdynamodb.TableItemReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TableItem"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_dynamodb_table_item"],
			TypeName:         "aws_dynamodb_table_item",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TableItem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ebs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DefaultKmsKey",
	}:
		if err := (&controllersebs.DefaultKmsKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DefaultKmsKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ebs_default_kms_key"],
			TypeName:         "aws_ebs_default_kms_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DefaultKmsKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ebs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EncryptionByDefault",
	}:
		if err := (&controllersebs.EncryptionByDefaultReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EncryptionByDefault"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ebs_encryption_by_default"],
			TypeName:         "aws_ebs_encryption_by_default",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EncryptionByDefault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ebs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&controllersebs.SnapshotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Snapshot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ebs_snapshot"],
			TypeName:         "aws_ebs_snapshot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ebs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SnapshotCopy",
	}:
		if err := (&controllersebs.SnapshotCopyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SnapshotCopy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ebs_snapshot_copy"],
			TypeName:         "aws_ebs_snapshot_copy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SnapshotCopy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ebs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Volume",
	}:
		if err := (&controllersebs.VolumeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Volume"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ebs_volume"],
			TypeName:         "aws_ebs_volume",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Volume")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AvailabilityZoneGroup",
	}:
		if err := (&controllersec2.AvailabilityZoneGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AvailabilityZoneGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_availability_zone_group"],
			TypeName:         "aws_ec2_availability_zone_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AvailabilityZoneGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CapacityReservation",
	}:
		if err := (&controllersec2.CapacityReservationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CapacityReservation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_capacity_reservation"],
			TypeName:         "aws_ec2_capacity_reservation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CapacityReservation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CarrierGateway",
	}:
		if err := (&controllersec2.CarrierGatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CarrierGateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_carrier_gateway"],
			TypeName:         "aws_ec2_carrier_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CarrierGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientVPNAuthorizationRule",
	}:
		if err := (&controllersec2.ClientVPNAuthorizationRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClientVPNAuthorizationRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_client_vpn_authorization_rule"],
			TypeName:         "aws_ec2_client_vpn_authorization_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClientVPNAuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientVPNEndpoint",
	}:
		if err := (&controllersec2.ClientVPNEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClientVPNEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_client_vpn_endpoint"],
			TypeName:         "aws_ec2_client_vpn_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClientVPNEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientVPNNetworkAssociation",
	}:
		if err := (&controllersec2.ClientVPNNetworkAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClientVPNNetworkAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_client_vpn_network_association"],
			TypeName:         "aws_ec2_client_vpn_network_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClientVPNNetworkAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientVPNRoute",
	}:
		if err := (&controllersec2.ClientVPNRouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClientVPNRoute"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_client_vpn_route"],
			TypeName:         "aws_ec2_client_vpn_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClientVPNRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Fleet",
	}:
		if err := (&controllersec2.FleetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Fleet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_fleet"],
			TypeName:         "aws_ec2_fleet",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Fleet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocalGatewayRoute",
	}:
		if err := (&controllersec2.LocalGatewayRouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LocalGatewayRoute"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_local_gateway_route"],
			TypeName:         "aws_ec2_local_gateway_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LocalGatewayRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocalGatewayRouteTableVpcAssociation",
	}:
		if err := (&controllersec2.LocalGatewayRouteTableVpcAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LocalGatewayRouteTableVpcAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_local_gateway_route_table_vpc_association"],
			TypeName:         "aws_ec2_local_gateway_route_table_vpc_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LocalGatewayRouteTableVpcAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedPrefixList",
	}:
		if err := (&controllersec2.ManagedPrefixListReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagedPrefixList"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_managed_prefix_list"],
			TypeName:         "aws_ec2_managed_prefix_list",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagedPrefixList")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Tag",
	}:
		if err := (&controllersec2.TagReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Tag"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_tag"],
			TypeName:         "aws_ec2_tag",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Tag")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorFilter",
	}:
		if err := (&controllersec2.TrafficMirrorFilterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TrafficMirrorFilter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_traffic_mirror_filter"],
			TypeName:         "aws_ec2_traffic_mirror_filter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TrafficMirrorFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorFilterRule",
	}:
		if err := (&controllersec2.TrafficMirrorFilterRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TrafficMirrorFilterRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_traffic_mirror_filter_rule"],
			TypeName:         "aws_ec2_traffic_mirror_filter_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TrafficMirrorFilterRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorSession",
	}:
		if err := (&controllersec2.TrafficMirrorSessionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TrafficMirrorSession"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_traffic_mirror_session"],
			TypeName:         "aws_ec2_traffic_mirror_session",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TrafficMirrorSession")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorTarget",
	}:
		if err := (&controllersec2.TrafficMirrorTargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TrafficMirrorTarget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_traffic_mirror_target"],
			TypeName:         "aws_ec2_traffic_mirror_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TrafficMirrorTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGateway",
	}:
		if err := (&controllersec2.TransitGatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitGateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_transit_gateway"],
			TypeName:         "aws_ec2_transit_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayPeeringAttachment",
	}:
		if err := (&controllersec2.TransitGatewayPeeringAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitGatewayPeeringAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_transit_gateway_peering_attachment"],
			TypeName:         "aws_ec2_transit_gateway_peering_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitGatewayPeeringAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayPeeringAttachmentAccepter",
	}:
		if err := (&controllersec2.TransitGatewayPeeringAttachmentAccepterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitGatewayPeeringAttachmentAccepter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_transit_gateway_peering_attachment_accepter"],
			TypeName:         "aws_ec2_transit_gateway_peering_attachment_accepter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitGatewayPeeringAttachmentAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayPrefixListReference",
	}:
		if err := (&controllersec2.TransitGatewayPrefixListReferenceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitGatewayPrefixListReference"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_transit_gateway_prefix_list_reference"],
			TypeName:         "aws_ec2_transit_gateway_prefix_list_reference",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitGatewayPrefixListReference")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayRoute",
	}:
		if err := (&controllersec2.TransitGatewayRouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitGatewayRoute"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_transit_gateway_route"],
			TypeName:         "aws_ec2_transit_gateway_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitGatewayRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayRouteTable",
	}:
		if err := (&controllersec2.TransitGatewayRouteTableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitGatewayRouteTable"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_transit_gateway_route_table"],
			TypeName:         "aws_ec2_transit_gateway_route_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitGatewayRouteTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayRouteTableAssociation",
	}:
		if err := (&controllersec2.TransitGatewayRouteTableAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitGatewayRouteTableAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_transit_gateway_route_table_association"],
			TypeName:         "aws_ec2_transit_gateway_route_table_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitGatewayRouteTableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayRouteTablePropagation",
	}:
		if err := (&controllersec2.TransitGatewayRouteTablePropagationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitGatewayRouteTablePropagation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_transit_gateway_route_table_propagation"],
			TypeName:         "aws_ec2_transit_gateway_route_table_propagation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitGatewayRouteTablePropagation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayVpcAttachment",
	}:
		if err := (&controllersec2.TransitGatewayVpcAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitGatewayVpcAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_transit_gateway_vpc_attachment"],
			TypeName:         "aws_ec2_transit_gateway_vpc_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitGatewayVpcAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayVpcAttachmentAccepter",
	}:
		if err := (&controllersec2.TransitGatewayVpcAttachmentAccepterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TransitGatewayVpcAttachmentAccepter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ec2_transit_gateway_vpc_attachment_accepter"],
			TypeName:         "aws_ec2_transit_gateway_vpc_attachment_accepter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TransitGatewayVpcAttachmentAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LifecyclePolicy",
	}:
		if err := (&controllersecr.LifecyclePolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LifecyclePolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ecr_lifecycle_policy"],
			TypeName:         "aws_ecr_lifecycle_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LifecyclePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegistryPolicy",
	}:
		if err := (&controllersecr.RegistryPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegistryPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ecr_registry_policy"],
			TypeName:         "aws_ecr_registry_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegistryPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationConfiguration",
	}:
		if err := (&controllersecr.ReplicationConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReplicationConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ecr_replication_configuration"],
			TypeName:         "aws_ecr_replication_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReplicationConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Repository",
	}:
		if err := (&controllersecr.RepositoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Repository"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ecr_repository"],
			TypeName:         "aws_ecr_repository",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Repository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RepositoryPolicy",
	}:
		if err := (&controllersecr.RepositoryPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RepositoryPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ecr_repository_policy"],
			TypeName:         "aws_ecr_repository_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RepositoryPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecrpublic.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Repository",
	}:
		if err := (&controllersecrpublic.RepositoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Repository"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ecrpublic_repository"],
			TypeName:         "aws_ecrpublic_repository",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Repository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CapacityProvider",
	}:
		if err := (&controllersecs.CapacityProviderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CapacityProvider"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ecs_capacity_provider"],
			TypeName:         "aws_ecs_capacity_provider",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CapacityProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersecs.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ecs_cluster"],
			TypeName:         "aws_ecs_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllersecs.ServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ecs_service"],
			TypeName:         "aws_ecs_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TaskDefinition",
	}:
		if err := (&controllersecs.TaskDefinitionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TaskDefinition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ecs_task_definition"],
			TypeName:         "aws_ecs_task_definition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TaskDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "efs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessPoint",
	}:
		if err := (&controllersefs.AccessPointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccessPoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_efs_access_point"],
			TypeName:         "aws_efs_access_point",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessPoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "efs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPolicy",
	}:
		if err := (&controllersefs.BackupPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BackupPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_efs_backup_policy"],
			TypeName:         "aws_efs_backup_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "efs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FileSystem",
	}:
		if err := (&controllersefs.FileSystemReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FileSystem"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_efs_file_system"],
			TypeName:         "aws_efs_file_system",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "efs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FileSystemPolicy",
	}:
		if err := (&controllersefs.FileSystemPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FileSystemPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_efs_file_system_policy"],
			TypeName:         "aws_efs_file_system_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FileSystemPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "efs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MountTarget",
	}:
		if err := (&controllersefs.MountTargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MountTarget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_efs_mount_target"],
			TypeName:         "aws_efs_mount_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MountTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "egress.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OnlyInternetGateway",
	}:
		if err := (&controllersegress.OnlyInternetGatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OnlyInternetGateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_egress_only_internet_gateway"],
			TypeName:         "aws_egress_only_internet_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OnlyInternetGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eip.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Eip",
	}:
		if err := (&controllerseip.EipReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Eip"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_eip"],
			TypeName:         "aws_eip",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Eip")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eip.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Association",
	}:
		if err := (&controllerseip.AssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Association"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_eip_association"],
			TypeName:         "aws_eip_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Association")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Addon",
	}:
		if err := (&controllerseks.AddonReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Addon"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_eks_addon"],
			TypeName:         "aws_eks_addon",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Addon")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllerseks.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_eks_cluster"],
			TypeName:         "aws_eks_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FargateProfile",
	}:
		if err := (&controllerseks.FargateProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FargateProfile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_eks_fargate_profile"],
			TypeName:         "aws_eks_fargate_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FargateProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodeGroup",
	}:
		if err := (&controllerseks.NodeGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NodeGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_eks_node_group"],
			TypeName:         "aws_eks_node_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NodeGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticbeanstalk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&controllerselasticbeanstalk.ApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Application"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elastic_beanstalk_application"],
			TypeName:         "aws_elastic_beanstalk_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticbeanstalk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationVersion",
	}:
		if err := (&controllerselasticbeanstalk.ApplicationVersionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApplicationVersion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elastic_beanstalk_application_version"],
			TypeName:         "aws_elastic_beanstalk_application_version",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApplicationVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticbeanstalk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationTemplate",
	}:
		if err := (&controllerselasticbeanstalk.ConfigurationTemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConfigurationTemplate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elastic_beanstalk_configuration_template"],
			TypeName:         "aws_elastic_beanstalk_configuration_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigurationTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticbeanstalk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Environment",
	}:
		if err := (&controllerselasticbeanstalk.EnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Environment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elastic_beanstalk_environment"],
			TypeName:         "aws_elastic_beanstalk_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllerselasticache.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elasticache_cluster"],
			TypeName:         "aws_elasticache_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalReplicationGroup",
	}:
		if err := (&controllerselasticache.GlobalReplicationGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GlobalReplicationGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elasticache_global_replication_group"],
			TypeName:         "aws_elasticache_global_replication_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GlobalReplicationGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&controllerselasticache.ParameterGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ParameterGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elasticache_parameter_group"],
			TypeName:         "aws_elasticache_parameter_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationGroup",
	}:
		if err := (&controllerselasticache.ReplicationGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReplicationGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elasticache_replication_group"],
			TypeName:         "aws_elasticache_replication_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReplicationGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&controllerselasticache.SecurityGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elasticache_security_group"],
			TypeName:         "aws_elasticache_security_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&controllerselasticache.SubnetGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubnetGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elasticache_subnet_group"],
			TypeName:         "aws_elasticache_subnet_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticsearchdomain.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ElasticsearchDomain",
	}:
		if err := (&controllerselasticsearchdomain.ElasticsearchDomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ElasticsearchDomain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elasticsearch_domain"],
			TypeName:         "aws_elasticsearch_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ElasticsearchDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticsearchdomain.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllerselasticsearchdomain.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elasticsearch_domain_policy"],
			TypeName:         "aws_elasticsearch_domain_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticsearchdomain.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SamlOptions",
	}:
		if err := (&controllerselasticsearchdomain.SamlOptionsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SamlOptions"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elasticsearch_domain_saml_options"],
			TypeName:         "aws_elasticsearch_domain_saml_options",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SamlOptions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elastictranscoder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pipeline",
	}:
		if err := (&controllerselastictranscoder.PipelineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Pipeline"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elastictranscoder_pipeline"],
			TypeName:         "aws_elastictranscoder_pipeline",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Pipeline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elastictranscoder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Preset",
	}:
		if err := (&controllerselastictranscoder.PresetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Preset"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elastictranscoder_preset"],
			TypeName:         "aws_elastictranscoder_preset",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Preset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Elb",
	}:
		if err := (&controllerselb.ElbReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Elb"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elb"],
			TypeName:         "aws_elb",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Elb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&controllerselb.AttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Attachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_elb_attachment"],
			TypeName:         "aws_elb_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersemr.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_emr_cluster"],
			TypeName:         "aws_emr_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceFleet",
	}:
		if err := (&controllersemr.InstanceFleetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceFleet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_emr_instance_fleet"],
			TypeName:         "aws_emr_instance_fleet",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceFleet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceGroup",
	}:
		if err := (&controllersemr.InstanceGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_emr_instance_group"],
			TypeName:         "aws_emr_instance_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedScalingPolicy",
	}:
		if err := (&controllersemr.ManagedScalingPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagedScalingPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_emr_managed_scaling_policy"],
			TypeName:         "aws_emr_managed_scaling_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagedScalingPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityConfiguration",
	}:
		if err := (&controllersemr.SecurityConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_emr_security_configuration"],
			TypeName:         "aws_emr_security_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "flow.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Log",
	}:
		if err := (&controllersflow.LogReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Log"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_flow_log"],
			TypeName:         "aws_flow_log",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Log")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AdminAccount",
	}:
		if err := (&controllersfms.AdminAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AdminAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_fms_admin_account"],
			TypeName:         "aws_fms_admin_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AdminAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersfms.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_fms_policy"],
			TypeName:         "aws_fms_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fsx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LustreFileSystem",
	}:
		if err := (&controllersfsx.LustreFileSystemReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LustreFileSystem"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_fsx_lustre_file_system"],
			TypeName:         "aws_fsx_lustre_file_system",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LustreFileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fsx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WindowsFileSystem",
	}:
		if err := (&controllersfsx.WindowsFileSystemReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WindowsFileSystem"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_fsx_windows_file_system"],
			TypeName:         "aws_fsx_windows_file_system",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WindowsFileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gamelift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&controllersgamelift.AliasReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Alias"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_gamelift_alias"],
			TypeName:         "aws_gamelift_alias",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gamelift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Build",
	}:
		if err := (&controllersgamelift.BuildReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Build"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_gamelift_build"],
			TypeName:         "aws_gamelift_build",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Build")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gamelift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Fleet",
	}:
		if err := (&controllersgamelift.FleetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Fleet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_gamelift_fleet"],
			TypeName:         "aws_gamelift_fleet",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Fleet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gamelift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GameSessionQueue",
	}:
		if err := (&controllersgamelift.GameSessionQueueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GameSessionQueue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_gamelift_game_session_queue"],
			TypeName:         "aws_gamelift_game_session_queue",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GameSessionQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glaciervault.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlacierVault",
	}:
		if err := (&controllersglaciervault.GlacierVaultReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GlacierVault"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glacier_vault"],
			TypeName:         "aws_glacier_vault",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GlacierVault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glaciervault.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lock",
	}:
		if err := (&controllersglaciervault.LockReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Lock"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glacier_vault_lock"],
			TypeName:         "aws_glacier_vault_lock",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Lock")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "globalaccelerator.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Accelerator",
	}:
		if err := (&controllersglobalaccelerator.AcceleratorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Accelerator"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_globalaccelerator_accelerator"],
			TypeName:         "aws_globalaccelerator_accelerator",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Accelerator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "globalaccelerator.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointGroup",
	}:
		if err := (&controllersglobalaccelerator.EndpointGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_globalaccelerator_endpoint_group"],
			TypeName:         "aws_globalaccelerator_endpoint_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "globalaccelerator.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&controllersglobalaccelerator.ListenerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Listener"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_globalaccelerator_listener"],
			TypeName:         "aws_globalaccelerator_listener",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogDatabase",
	}:
		if err := (&controllersglue.CatalogDatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogDatabase"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_catalog_database"],
			TypeName:         "aws_glue_catalog_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTable",
	}:
		if err := (&controllersglue.CatalogTableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CatalogTable"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_catalog_table"],
			TypeName:         "aws_glue_catalog_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CatalogTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Classifier",
	}:
		if err := (&controllersglue.ClassifierReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Classifier"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_classifier"],
			TypeName:         "aws_glue_classifier",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Classifier")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersglue.ConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_connection"],
			TypeName:         "aws_glue_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Crawler",
	}:
		if err := (&controllersglue.CrawlerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Crawler"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_crawler"],
			TypeName:         "aws_glue_crawler",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Crawler")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataCatalogEncryptionSettings",
	}:
		if err := (&controllersglue.DataCatalogEncryptionSettingsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataCatalogEncryptionSettings"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_data_catalog_encryption_settings"],
			TypeName:         "aws_glue_data_catalog_encryption_settings",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataCatalogEncryptionSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DevEndpoint",
	}:
		if err := (&controllersglue.DevEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DevEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_dev_endpoint"],
			TypeName:         "aws_glue_dev_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DevEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Job",
	}:
		if err := (&controllersglue.JobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Job"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_job"],
			TypeName:         "aws_glue_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Job")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MlTransform",
	}:
		if err := (&controllersglue.MlTransformReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MlTransform"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_ml_transform"],
			TypeName:         "aws_glue_ml_transform",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MlTransform")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Partition",
	}:
		if err := (&controllersglue.PartitionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Partition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_partition"],
			TypeName:         "aws_glue_partition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Partition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Registry",
	}:
		if err := (&controllersglue.RegistryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Registry"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_registry"],
			TypeName:         "aws_glue_registry",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Registry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourcePolicy",
	}:
		if err := (&controllersglue.ResourcePolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResourcePolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_resource_policy"],
			TypeName:         "aws_glue_resource_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResourcePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schema",
	}:
		if err := (&controllersglue.SchemaReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Schema"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_schema"],
			TypeName:         "aws_glue_schema",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Schema")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityConfiguration",
	}:
		if err := (&controllersglue.SecurityConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_security_configuration"],
			TypeName:         "aws_glue_security_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trigger",
	}:
		if err := (&controllersglue.TriggerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Trigger"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_trigger"],
			TypeName:         "aws_glue_trigger",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Trigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserDefinedFunction",
	}:
		if err := (&controllersglue.UserDefinedFunctionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserDefinedFunction"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_user_defined_function"],
			TypeName:         "aws_glue_user_defined_function",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserDefinedFunction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workflow",
	}:
		if err := (&controllersglue.WorkflowReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Workflow"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_glue_workflow"],
			TypeName:         "aws_glue_workflow",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Workflow")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Detector",
	}:
		if err := (&controllersguardduty.DetectorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Detector"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_guardduty_detector"],
			TypeName:         "aws_guardduty_detector",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Detector")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Filter",
	}:
		if err := (&controllersguardduty.FilterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Filter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_guardduty_filter"],
			TypeName:         "aws_guardduty_filter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Filter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InviteAccepter",
	}:
		if err := (&controllersguardduty.InviteAccepterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InviteAccepter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_guardduty_invite_accepter"],
			TypeName:         "aws_guardduty_invite_accepter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InviteAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ipset",
	}:
		if err := (&controllersguardduty.IpsetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Ipset"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_guardduty_ipset"],
			TypeName:         "aws_guardduty_ipset",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Ipset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Member",
	}:
		if err := (&controllersguardduty.MemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Member"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_guardduty_member"],
			TypeName:         "aws_guardduty_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Member")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationAdminAccount",
	}:
		if err := (&controllersguardduty.OrganizationAdminAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationAdminAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_guardduty_organization_admin_account"],
			TypeName:         "aws_guardduty_organization_admin_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationAdminAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationConfiguration",
	}:
		if err := (&controllersguardduty.OrganizationConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_guardduty_organization_configuration"],
			TypeName:         "aws_guardduty_organization_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublishingDestination",
	}:
		if err := (&controllersguardduty.PublishingDestinationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PublishingDestination"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_guardduty_publishing_destination"],
			TypeName:         "aws_guardduty_publishing_destination",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PublishingDestination")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Threatintelset",
	}:
		if err := (&controllersguardduty.ThreatintelsetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Threatintelset"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_guardduty_threatintelset"],
			TypeName:         "aws_guardduty_threatintelset",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Threatintelset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessKey",
	}:
		if err := (&controllersiam.AccessKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccessKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_access_key"],
			TypeName:         "aws_iam_access_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountAlias",
	}:
		if err := (&controllersiam.AccountAliasReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccountAlias"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_account_alias"],
			TypeName:         "aws_iam_account_alias",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountAlias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountPasswordPolicy",
	}:
		if err := (&controllersiam.AccountPasswordPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccountPasswordPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_account_password_policy"],
			TypeName:         "aws_iam_account_password_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountPasswordPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersiam.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_group"],
			TypeName:         "aws_iam_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupMembership",
	}:
		if err := (&controllersiam.GroupMembershipReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GroupMembership"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_group_membership"],
			TypeName:         "aws_iam_group_membership",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupMembership")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupPolicy",
	}:
		if err := (&controllersiam.GroupPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GroupPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_group_policy"],
			TypeName:         "aws_iam_group_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupPolicyAttachment",
	}:
		if err := (&controllersiam.GroupPolicyAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GroupPolicyAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_group_policy_attachment"],
			TypeName:         "aws_iam_group_policy_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceProfile",
	}:
		if err := (&controllersiam.InstanceProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceProfile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_instance_profile"],
			TypeName:         "aws_iam_instance_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OpenidConnectProvider",
	}:
		if err := (&controllersiam.OpenidConnectProviderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OpenidConnectProvider"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_openid_connect_provider"],
			TypeName:         "aws_iam_openid_connect_provider",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OpenidConnectProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersiam.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_policy"],
			TypeName:         "aws_iam_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyAttachment",
	}:
		if err := (&controllersiam.PolicyAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PolicyAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_policy_attachment"],
			TypeName:         "aws_iam_policy_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Role",
	}:
		if err := (&controllersiam.RoleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Role"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_role"],
			TypeName:         "aws_iam_role",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Role")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RolePolicy",
	}:
		if err := (&controllersiam.RolePolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RolePolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_role_policy"],
			TypeName:         "aws_iam_role_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RolePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RolePolicyAttachment",
	}:
		if err := (&controllersiam.RolePolicyAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RolePolicyAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_role_policy_attachment"],
			TypeName:         "aws_iam_role_policy_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RolePolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SamlProvider",
	}:
		if err := (&controllersiam.SamlProviderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SamlProvider"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_saml_provider"],
			TypeName:         "aws_iam_saml_provider",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SamlProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerCertificate",
	}:
		if err := (&controllersiam.ServerCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServerCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_server_certificate"],
			TypeName:         "aws_iam_server_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceLinkedRole",
	}:
		if err := (&controllersiam.ServiceLinkedRoleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceLinkedRole"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_service_linked_role"],
			TypeName:         "aws_iam_service_linked_role",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceLinkedRole")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&controllersiam.UserReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("User"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_user"],
			TypeName:         "aws_iam_user",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserGroupMembership",
	}:
		if err := (&controllersiam.UserGroupMembershipReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserGroupMembership"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_user_group_membership"],
			TypeName:         "aws_iam_user_group_membership",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserGroupMembership")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserLoginProfile",
	}:
		if err := (&controllersiam.UserLoginProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserLoginProfile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_user_login_profile"],
			TypeName:         "aws_iam_user_login_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserLoginProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPolicy",
	}:
		if err := (&controllersiam.UserPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_user_policy"],
			TypeName:         "aws_iam_user_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPolicyAttachment",
	}:
		if err := (&controllersiam.UserPolicyAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserPolicyAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_user_policy_attachment"],
			TypeName:         "aws_iam_user_policy_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserSSHKey",
	}:
		if err := (&controllersiam.UserSSHKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserSSHKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iam_user_ssh_key"],
			TypeName:         "aws_iam_user_ssh_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserSSHKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Component",
	}:
		if err := (&controllersimagebuilder.ComponentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Component"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_imagebuilder_component"],
			TypeName:         "aws_imagebuilder_component",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Component")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DistributionConfiguration",
	}:
		if err := (&controllersimagebuilder.DistributionConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DistributionConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_imagebuilder_distribution_configuration"],
			TypeName:         "aws_imagebuilder_distribution_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DistributionConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&controllersimagebuilder.ImageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Image"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_imagebuilder_image"],
			TypeName:         "aws_imagebuilder_image",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImagePipeline",
	}:
		if err := (&controllersimagebuilder.ImagePipelineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ImagePipeline"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_imagebuilder_image_pipeline"],
			TypeName:         "aws_imagebuilder_image_pipeline",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ImagePipeline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageRecipe",
	}:
		if err := (&controllersimagebuilder.ImageRecipeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ImageRecipe"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_imagebuilder_image_recipe"],
			TypeName:         "aws_imagebuilder_image_recipe",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ImageRecipe")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InfrastructureConfiguration",
	}:
		if err := (&controllersimagebuilder.InfrastructureConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InfrastructureConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_imagebuilder_infrastructure_configuration"],
			TypeName:         "aws_imagebuilder_infrastructure_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InfrastructureConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "inspector.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssessmentTarget",
	}:
		if err := (&controllersinspector.AssessmentTargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AssessmentTarget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_inspector_assessment_target"],
			TypeName:         "aws_inspector_assessment_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AssessmentTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "inspector.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssessmentTemplate",
	}:
		if err := (&controllersinspector.AssessmentTemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AssessmentTemplate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_inspector_assessment_template"],
			TypeName:         "aws_inspector_assessment_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AssessmentTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "inspector.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceGroup",
	}:
		if err := (&controllersinspector.ResourceGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResourceGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_inspector_resource_group"],
			TypeName:         "aws_inspector_resource_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResourceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "instance.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersinstance.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_instance"],
			TypeName:         "aws_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "internet.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersinternet.GatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_internet_gateway"],
			TypeName:         "aws_internet_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&controllersiot.CertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Certificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iot_certificate"],
			TypeName:         "aws_iot_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersiot.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iot_policy"],
			TypeName:         "aws_iot_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyAttachment",
	}:
		if err := (&controllersiot.PolicyAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PolicyAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iot_policy_attachment"],
			TypeName:         "aws_iot_policy_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RoleAlias",
	}:
		if err := (&controllersiot.RoleAliasReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RoleAlias"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iot_role_alias"],
			TypeName:         "aws_iot_role_alias",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RoleAlias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Thing",
	}:
		if err := (&controllersiot.ThingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Thing"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iot_thing"],
			TypeName:         "aws_iot_thing",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Thing")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ThingPrincipalAttachment",
	}:
		if err := (&controllersiot.ThingPrincipalAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ThingPrincipalAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iot_thing_principal_attachment"],
			TypeName:         "aws_iot_thing_principal_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ThingPrincipalAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ThingType",
	}:
		if err := (&controllersiot.ThingTypeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ThingType"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iot_thing_type"],
			TypeName:         "aws_iot_thing_type",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ThingType")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicRule",
	}:
		if err := (&controllersiot.TopicRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TopicRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_iot_topic_rule"],
			TypeName:         "aws_iot_topic_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TopicRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "key.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pair",
	}:
		if err := (&controllerskey.PairReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Pair"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_key_pair"],
			TypeName:         "aws_key_pair",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Pair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesis.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsApplication",
	}:
		if err := (&controllerskinesis.AnalyticsApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsApplication"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kinesis_analytics_application"],
			TypeName:         "aws_kinesis_analytics_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesis.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirehoseDeliveryStream",
	}:
		if err := (&controllerskinesis.FirehoseDeliveryStreamReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirehoseDeliveryStream"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kinesis_firehose_delivery_stream"],
			TypeName:         "aws_kinesis_firehose_delivery_stream",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirehoseDeliveryStream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesis.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Stream",
	}:
		if err := (&controllerskinesis.StreamReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Stream"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kinesis_stream"],
			TypeName:         "aws_kinesis_stream",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Stream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesis.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StreamConsumer",
	}:
		if err := (&controllerskinesis.StreamConsumerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StreamConsumer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kinesis_stream_consumer"],
			TypeName:         "aws_kinesis_stream_consumer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StreamConsumer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesis.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VideoStream",
	}:
		if err := (&controllerskinesis.VideoStreamReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VideoStream"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kinesis_video_stream"],
			TypeName:         "aws_kinesis_video_stream",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VideoStream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesisanalyticsv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&controllerskinesisanalyticsv2.ApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Application"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kinesisanalyticsv2_application"],
			TypeName:         "aws_kinesisanalyticsv2_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesisanalyticsv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationSnapshot",
	}:
		if err := (&controllerskinesisanalyticsv2.ApplicationSnapshotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApplicationSnapshot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kinesisanalyticsv2_application_snapshot"],
			TypeName:         "aws_kinesisanalyticsv2_application_snapshot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApplicationSnapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&controllerskms.AliasReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Alias"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kms_alias"],
			TypeName:         "aws_kms_alias",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ciphertext",
	}:
		if err := (&controllerskms.CiphertextReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Ciphertext"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kms_ciphertext"],
			TypeName:         "aws_kms_ciphertext",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Ciphertext")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ExternalKey",
	}:
		if err := (&controllerskms.ExternalKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ExternalKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kms_external_key"],
			TypeName:         "aws_kms_external_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ExternalKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Grant",
	}:
		if err := (&controllerskms.GrantReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Grant"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kms_grant"],
			TypeName:         "aws_kms_grant",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Grant")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Key",
	}:
		if err := (&controllerskms.KeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Key"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_kms_key"],
			TypeName:         "aws_kms_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Key")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lakeformation.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataLakeSettings",
	}:
		if err := (&controllerslakeformation.DataLakeSettingsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataLakeSettings"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lakeformation_data_lake_settings"],
			TypeName:         "aws_lakeformation_data_lake_settings",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataLakeSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lakeformation.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Permissions",
	}:
		if err := (&controllerslakeformation.PermissionsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Permissions"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lakeformation_permissions"],
			TypeName:         "aws_lakeformation_permissions",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Permissions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lakeformation.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeformationResource",
	}:
		if err := (&controllerslakeformation.LakeformationResourceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LakeformationResource"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lakeformation_resource"],
			TypeName:         "aws_lakeformation_resource",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LakeformationResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&controllerslambda.AliasReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Alias"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lambda_alias"],
			TypeName:         "aws_lambda_alias",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CodeSigningConfig",
	}:
		if err := (&controllerslambda.CodeSigningConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CodeSigningConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lambda_code_signing_config"],
			TypeName:         "aws_lambda_code_signing_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CodeSigningConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSourceMapping",
	}:
		if err := (&controllerslambda.EventSourceMappingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventSourceMapping"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lambda_event_source_mapping"],
			TypeName:         "aws_lambda_event_source_mapping",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventSourceMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Function",
	}:
		if err := (&controllerslambda.FunctionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Function"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lambda_function"],
			TypeName:         "aws_lambda_function",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Function")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FunctionEventInvokeConfig",
	}:
		if err := (&controllerslambda.FunctionEventInvokeConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FunctionEventInvokeConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lambda_function_event_invoke_config"],
			TypeName:         "aws_lambda_function_event_invoke_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FunctionEventInvokeConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LayerVersion",
	}:
		if err := (&controllerslambda.LayerVersionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LayerVersion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lambda_layer_version"],
			TypeName:         "aws_lambda_layer_version",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LayerVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Permission",
	}:
		if err := (&controllerslambda.PermissionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Permission"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lambda_permission"],
			TypeName:         "aws_lambda_permission",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Permission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProvisionedConcurrencyConfig",
	}:
		if err := (&controllerslambda.ProvisionedConcurrencyConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProvisionedConcurrencyConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lambda_provisioned_concurrency_config"],
			TypeName:         "aws_lambda_provisioned_concurrency_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProvisionedConcurrencyConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "launch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&controllerslaunch.ConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Configuration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_launch_configuration"],
			TypeName:         "aws_launch_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "launch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Template",
	}:
		if err := (&controllerslaunch.TemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Template"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_launch_template"],
			TypeName:         "aws_launch_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Template")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lb",
	}:
		if err := (&controllerslb.LbReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Lb"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lb"],
			TypeName:         "aws_lb",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Lb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CookieStickinessPolicy",
	}:
		if err := (&controllerslb.CookieStickinessPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CookieStickinessPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lb_cookie_stickiness_policy"],
			TypeName:         "aws_lb_cookie_stickiness_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CookieStickinessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&controllerslb.ListenerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Listener"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lb_listener"],
			TypeName:         "aws_lb_listener",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ListenerCertificate",
	}:
		if err := (&controllerslb.ListenerCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ListenerCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lb_listener_certificate"],
			TypeName:         "aws_lb_listener_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ListenerCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ListenerRule",
	}:
		if err := (&controllerslb.ListenerRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ListenerRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lb_listener_rule"],
			TypeName:         "aws_lb_listener_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ListenerRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SslNegotiationPolicy",
	}:
		if err := (&controllerslb.SslNegotiationPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SslNegotiationPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lb_ssl_negotiation_policy"],
			TypeName:         "aws_lb_ssl_negotiation_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SslNegotiationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetGroup",
	}:
		if err := (&controllerslb.TargetGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lb_target_group"],
			TypeName:         "aws_lb_target_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetGroupAttachment",
	}:
		if err := (&controllerslb.TargetGroupAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TargetGroupAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lb_target_group_attachment"],
			TypeName:         "aws_lb_target_group_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TargetGroupAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lex.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Bot",
	}:
		if err := (&controllerslex.BotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Bot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lex_bot"],
			TypeName:         "aws_lex_bot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Bot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lex.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BotAlias",
	}:
		if err := (&controllerslex.BotAliasReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BotAlias"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lex_bot_alias"],
			TypeName:         "aws_lex_bot_alias",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BotAlias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lex.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Intent",
	}:
		if err := (&controllerslex.IntentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Intent"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lex_intent"],
			TypeName:         "aws_lex_intent",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Intent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lex.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SlotType",
	}:
		if err := (&controllerslex.SlotTypeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SlotType"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lex_slot_type"],
			TypeName:         "aws_lex_slot_type",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SlotType")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "licensemanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Association",
	}:
		if err := (&controllerslicensemanager.AssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Association"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_licensemanager_association"],
			TypeName:         "aws_licensemanager_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Association")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "licensemanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LicenseConfiguration",
	}:
		if err := (&controllerslicensemanager.LicenseConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LicenseConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_licensemanager_license_configuration"],
			TypeName:         "aws_licensemanager_license_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LicenseConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllerslightsail.DomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lightsail_domain"],
			TypeName:         "aws_lightsail_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllerslightsail.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lightsail_instance"],
			TypeName:         "aws_lightsail_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstancePublicPorts",
	}:
		if err := (&controllerslightsail.InstancePublicPortsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstancePublicPorts"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lightsail_instance_public_ports"],
			TypeName:         "aws_lightsail_instance_public_ports",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstancePublicPorts")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyPair",
	}:
		if err := (&controllerslightsail.KeyPairReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KeyPair"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lightsail_key_pair"],
			TypeName:         "aws_lightsail_key_pair",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyPair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StaticIP",
	}:
		if err := (&controllerslightsail.StaticIPReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StaticIP"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lightsail_static_ip"],
			TypeName:         "aws_lightsail_static_ip",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StaticIP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StaticIPAttachment",
	}:
		if err := (&controllerslightsail.StaticIPAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StaticIPAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_lightsail_static_ip_attachment"],
			TypeName:         "aws_lightsail_static_ip_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StaticIPAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loadbalancer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendServerPolicy",
	}:
		if err := (&controllersloadbalancer.BackendServerPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BackendServerPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_load_balancer_backend_server_policy"],
			TypeName:         "aws_load_balancer_backend_server_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackendServerPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loadbalancer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ListenerPolicy",
	}:
		if err := (&controllersloadbalancer.ListenerPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ListenerPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_load_balancer_listener_policy"],
			TypeName:         "aws_load_balancer_listener_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ListenerPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loadbalancer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersloadbalancer.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_load_balancer_policy"],
			TypeName:         "aws_load_balancer_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersmacie2.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_macie2_account"],
			TypeName:         "aws_macie2_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClassificationJob",
	}:
		if err := (&controllersmacie2.ClassificationJobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClassificationJob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_macie2_classification_job"],
			TypeName:         "aws_macie2_classification_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClassificationJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomDataIdentifier",
	}:
		if err := (&controllersmacie2.CustomDataIdentifierReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CustomDataIdentifier"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_macie2_custom_data_identifier"],
			TypeName:         "aws_macie2_custom_data_identifier",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CustomDataIdentifier")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FindingsFilter",
	}:
		if err := (&controllersmacie2.FindingsFilterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FindingsFilter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_macie2_findings_filter"],
			TypeName:         "aws_macie2_findings_filter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FindingsFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InvitationAccepter",
	}:
		if err := (&controllersmacie2.InvitationAccepterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InvitationAccepter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_macie2_invitation_accepter"],
			TypeName:         "aws_macie2_invitation_accepter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InvitationAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Member",
	}:
		if err := (&controllersmacie2.MemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Member"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_macie2_member"],
			TypeName:         "aws_macie2_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Member")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationAdminAccount",
	}:
		if err := (&controllersmacie2.OrganizationAdminAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationAdminAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_macie2_organization_admin_account"],
			TypeName:         "aws_macie2_organization_admin_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationAdminAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MemberAccountAssociation",
	}:
		if err := (&controllersmacie.MemberAccountAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MemberAccountAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_macie_member_account_association"],
			TypeName:         "aws_macie_member_account_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MemberAccountAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "S3BucketAssociation",
	}:
		if err := (&controllersmacie.S3BucketAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("S3BucketAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_macie_s3_bucket_association"],
			TypeName:         "aws_macie_s3_bucket_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "S3BucketAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "main.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteTableAssociation",
	}:
		if err := (&controllersmain.RouteTableAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RouteTableAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_main_route_table_association"],
			TypeName:         "aws_main_route_table_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouteTableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConvertQueue",
	}:
		if err := (&controllersmedia.ConvertQueueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConvertQueue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_media_convert_queue"],
			TypeName:         "aws_media_convert_queue",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConvertQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PackageChannel",
	}:
		if err := (&controllersmedia.PackageChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PackageChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_media_package_channel"],
			TypeName:         "aws_media_package_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PackageChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StoreContainer",
	}:
		if err := (&controllersmedia.StoreContainerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StoreContainer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_media_store_container"],
			TypeName:         "aws_media_store_container",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StoreContainer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StoreContainerPolicy",
	}:
		if err := (&controllersmedia.StoreContainerPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StoreContainerPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_media_store_container_policy"],
			TypeName:         "aws_media_store_container_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StoreContainerPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mq.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Broker",
	}:
		if err := (&controllersmq.BrokerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Broker"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_mq_broker"],
			TypeName:         "aws_mq_broker",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Broker")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mq.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&controllersmq.ConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Configuration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_mq_configuration"],
			TypeName:         "aws_mq_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "msk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersmsk.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_msk_cluster"],
			TypeName:         "aws_msk_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "msk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&controllersmsk.ConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Configuration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_msk_configuration"],
			TypeName:         "aws_msk_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "msk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScramSecretAssociation",
	}:
		if err := (&controllersmsk.ScramSecretAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ScramSecretAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_msk_scram_secret_association"],
			TypeName:         "aws_msk_scram_secret_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ScramSecretAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mwaa.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Environment",
	}:
		if err := (&controllersmwaa.EnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Environment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_mwaa_environment"],
			TypeName:         "aws_mwaa_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nat.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersnat.GatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_nat_gateway"],
			TypeName:         "aws_nat_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersneptune.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_neptune_cluster"],
			TypeName:         "aws_neptune_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterEndpoint",
	}:
		if err := (&controllersneptune.ClusterEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_neptune_cluster_endpoint"],
			TypeName:         "aws_neptune_cluster_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterInstance",
	}:
		if err := (&controllersneptune.ClusterInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_neptune_cluster_instance"],
			TypeName:         "aws_neptune_cluster_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterParameterGroup",
	}:
		if err := (&controllersneptune.ClusterParameterGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterParameterGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_neptune_cluster_parameter_group"],
			TypeName:         "aws_neptune_cluster_parameter_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterSnapshot",
	}:
		if err := (&controllersneptune.ClusterSnapshotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterSnapshot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_neptune_cluster_snapshot"],
			TypeName:         "aws_neptune_cluster_snapshot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterSnapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSubscription",
	}:
		if err := (&controllersneptune.EventSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_neptune_event_subscription"],
			TypeName:         "aws_neptune_event_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&controllersneptune.ParameterGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ParameterGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_neptune_parameter_group"],
			TypeName:         "aws_neptune_parameter_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&controllersneptune.SubnetGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubnetGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_neptune_subnet_group"],
			TypeName:         "aws_neptune_subnet_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Acl",
	}:
		if err := (&controllersnetwork.AclReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Acl"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_network_acl"],
			TypeName:         "aws_network_acl",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Acl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AclRule",
	}:
		if err := (&controllersnetwork.AclRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AclRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_network_acl_rule"],
			TypeName:         "aws_network_acl_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AclRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Interface",
	}:
		if err := (&controllersnetwork.InterfaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Interface"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_network_interface"],
			TypeName:         "aws_network_interface",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Interface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceAttachment",
	}:
		if err := (&controllersnetwork.InterfaceAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InterfaceAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_network_interface_attachment"],
			TypeName:         "aws_network_interface_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InterfaceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceSgAttachment",
	}:
		if err := (&controllersnetwork.InterfaceSgAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InterfaceSgAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_network_interface_sg_attachment"],
			TypeName:         "aws_network_interface_sg_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InterfaceSgAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "networkfirewall.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Firewall",
	}:
		if err := (&controllersnetworkfirewall.FirewallReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Firewall"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_networkfirewall_firewall"],
			TypeName:         "aws_networkfirewall_firewall",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Firewall")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "networkfirewall.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallPolicy",
	}:
		if err := (&controllersnetworkfirewall.FirewallPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirewallPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_networkfirewall_firewall_policy"],
			TypeName:         "aws_networkfirewall_firewall_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "networkfirewall.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LoggingConfiguration",
	}:
		if err := (&controllersnetworkfirewall.LoggingConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LoggingConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_networkfirewall_logging_configuration"],
			TypeName:         "aws_networkfirewall_logging_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LoggingConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "networkfirewall.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourcePolicy",
	}:
		if err := (&controllersnetworkfirewall.ResourcePolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResourcePolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_networkfirewall_resource_policy"],
			TypeName:         "aws_networkfirewall_resource_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResourcePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "networkfirewall.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RuleGroup",
	}:
		if err := (&controllersnetworkfirewall.RuleGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RuleGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_networkfirewall_rule_group"],
			TypeName:         "aws_networkfirewall_rule_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RuleGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&controllersopsworks.ApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Application"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_application"],
			TypeName:         "aws_opsworks_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomLayer",
	}:
		if err := (&controllersopsworks.CustomLayerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CustomLayer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_custom_layer"],
			TypeName:         "aws_opsworks_custom_layer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CustomLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GangliaLayer",
	}:
		if err := (&controllersopsworks.GangliaLayerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GangliaLayer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_ganglia_layer"],
			TypeName:         "aws_opsworks_ganglia_layer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GangliaLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HaproxyLayer",
	}:
		if err := (&controllersopsworks.HaproxyLayerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HaproxyLayer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_haproxy_layer"],
			TypeName:         "aws_opsworks_haproxy_layer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HaproxyLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&controllersopsworks.InstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Instance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_instance"],
			TypeName:         "aws_opsworks_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JavaAppLayer",
	}:
		if err := (&controllersopsworks.JavaAppLayerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("JavaAppLayer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_java_app_layer"],
			TypeName:         "aws_opsworks_java_app_layer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JavaAppLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MemcachedLayer",
	}:
		if err := (&controllersopsworks.MemcachedLayerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MemcachedLayer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_memcached_layer"],
			TypeName:         "aws_opsworks_memcached_layer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MemcachedLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MysqlLayer",
	}:
		if err := (&controllersopsworks.MysqlLayerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MysqlLayer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_mysql_layer"],
			TypeName:         "aws_opsworks_mysql_layer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MysqlLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodejsAppLayer",
	}:
		if err := (&controllersopsworks.NodejsAppLayerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NodejsAppLayer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_nodejs_app_layer"],
			TypeName:         "aws_opsworks_nodejs_app_layer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NodejsAppLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Permission",
	}:
		if err := (&controllersopsworks.PermissionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Permission"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_permission"],
			TypeName:         "aws_opsworks_permission",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Permission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PhpAppLayer",
	}:
		if err := (&controllersopsworks.PhpAppLayerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PhpAppLayer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_php_app_layer"],
			TypeName:         "aws_opsworks_php_app_layer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PhpAppLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RailsAppLayer",
	}:
		if err := (&controllersopsworks.RailsAppLayerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RailsAppLayer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_rails_app_layer"],
			TypeName:         "aws_opsworks_rails_app_layer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RailsAppLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RdsDbInstance",
	}:
		if err := (&controllersopsworks.RdsDbInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RdsDbInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_rds_db_instance"],
			TypeName:         "aws_opsworks_rds_db_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RdsDbInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Stack",
	}:
		if err := (&controllersopsworks.StackReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Stack"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_stack"],
			TypeName:         "aws_opsworks_stack",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Stack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StaticWebLayer",
	}:
		if err := (&controllersopsworks.StaticWebLayerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StaticWebLayer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_static_web_layer"],
			TypeName:         "aws_opsworks_static_web_layer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StaticWebLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserProfile",
	}:
		if err := (&controllersopsworks.UserProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserProfile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_opsworks_user_profile"],
			TypeName:         "aws_opsworks_user_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersorganizations.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_organizations_account"],
			TypeName:         "aws_organizations_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DelegatedAdministrator",
	}:
		if err := (&controllersorganizations.DelegatedAdministratorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DelegatedAdministrator"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_organizations_delegated_administrator"],
			TypeName:         "aws_organizations_delegated_administrator",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DelegatedAdministrator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Organization",
	}:
		if err := (&controllersorganizations.OrganizationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Organization"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_organizations_organization"],
			TypeName:         "aws_organizations_organization",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Organization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationalUnit",
	}:
		if err := (&controllersorganizations.OrganizationalUnitReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationalUnit"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_organizations_organizational_unit"],
			TypeName:         "aws_organizations_organizational_unit",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationalUnit")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersorganizations.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_organizations_policy"],
			TypeName:         "aws_organizations_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyAttachment",
	}:
		if err := (&controllersorganizations.PolicyAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PolicyAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_organizations_policy_attachment"],
			TypeName:         "aws_organizations_policy_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AdmChannel",
	}:
		if err := (&controllerspinpoint.AdmChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AdmChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_adm_channel"],
			TypeName:         "aws_pinpoint_adm_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AdmChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApnsChannel",
	}:
		if err := (&controllerspinpoint.ApnsChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApnsChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_apns_channel"],
			TypeName:         "aws_pinpoint_apns_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApnsChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApnsSandboxChannel",
	}:
		if err := (&controllerspinpoint.ApnsSandboxChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApnsSandboxChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_apns_sandbox_channel"],
			TypeName:         "aws_pinpoint_apns_sandbox_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApnsSandboxChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApnsVoipChannel",
	}:
		if err := (&controllerspinpoint.ApnsVoipChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApnsVoipChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_apns_voip_channel"],
			TypeName:         "aws_pinpoint_apns_voip_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApnsVoipChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApnsVoipSandboxChannel",
	}:
		if err := (&controllerspinpoint.ApnsVoipSandboxChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApnsVoipSandboxChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_apns_voip_sandbox_channel"],
			TypeName:         "aws_pinpoint_apns_voip_sandbox_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApnsVoipSandboxChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&controllerspinpoint.AppReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("App"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_app"],
			TypeName:         "aws_pinpoint_app",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BaiduChannel",
	}:
		if err := (&controllerspinpoint.BaiduChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BaiduChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_baidu_channel"],
			TypeName:         "aws_pinpoint_baidu_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BaiduChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EmailChannel",
	}:
		if err := (&controllerspinpoint.EmailChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EmailChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_email_channel"],
			TypeName:         "aws_pinpoint_email_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EmailChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventStream",
	}:
		if err := (&controllerspinpoint.EventStreamReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventStream"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_event_stream"],
			TypeName:         "aws_pinpoint_event_stream",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventStream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GcmChannel",
	}:
		if err := (&controllerspinpoint.GcmChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GcmChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_gcm_channel"],
			TypeName:         "aws_pinpoint_gcm_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GcmChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SmsChannel",
	}:
		if err := (&controllerspinpoint.SmsChannelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SmsChannel"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_pinpoint_sms_channel"],
			TypeName:         "aws_pinpoint_sms_channel",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SmsChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "placement.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersplacement.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_placement_group"],
			TypeName:         "aws_placement_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "prometheus.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workspace",
	}:
		if err := (&controllersprometheus.WorkspaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Workspace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_prometheus_workspace"],
			TypeName:         "aws_prometheus_workspace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Workspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "proxy.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtocolPolicy",
	}:
		if err := (&controllersproxy.ProtocolPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProtocolPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_proxy_protocol_policy"],
			TypeName:         "aws_proxy_protocol_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProtocolPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "qldb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ledger",
	}:
		if err := (&controllersqldb.LedgerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Ledger"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_qldb_ledger"],
			TypeName:         "aws_qldb_ledger",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Ledger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quicksight.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersquicksight.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_quicksight_group"],
			TypeName:         "aws_quicksight_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quicksight.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&controllersquicksight.UserReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("User"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_quicksight_user"],
			TypeName:         "aws_quicksight_user",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrincipalAssociation",
	}:
		if err := (&controllersram.PrincipalAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PrincipalAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ram_principal_association"],
			TypeName:         "aws_ram_principal_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PrincipalAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceAssociation",
	}:
		if err := (&controllersram.ResourceAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResourceAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ram_resource_association"],
			TypeName:         "aws_ram_resource_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResourceAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceShare",
	}:
		if err := (&controllersram.ResourceShareReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResourceShare"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ram_resource_share"],
			TypeName:         "aws_ram_resource_share",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResourceShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceShareAccepter",
	}:
		if err := (&controllersram.ResourceShareAccepterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResourceShareAccepter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ram_resource_share_accepter"],
			TypeName:         "aws_ram_resource_share_accepter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResourceShareAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersrds.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_rds_cluster"],
			TypeName:         "aws_rds_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterEndpoint",
	}:
		if err := (&controllersrds.ClusterEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_rds_cluster_endpoint"],
			TypeName:         "aws_rds_cluster_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterInstance",
	}:
		if err := (&controllersrds.ClusterInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_rds_cluster_instance"],
			TypeName:         "aws_rds_cluster_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterParameterGroup",
	}:
		if err := (&controllersrds.ClusterParameterGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterParameterGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_rds_cluster_parameter_group"],
			TypeName:         "aws_rds_cluster_parameter_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalCluster",
	}:
		if err := (&controllersrds.GlobalClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GlobalCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_rds_global_cluster"],
			TypeName:         "aws_rds_global_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GlobalCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersredshift.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_redshift_cluster"],
			TypeName:         "aws_redshift_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSubscription",
	}:
		if err := (&controllersredshift.EventSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_redshift_event_subscription"],
			TypeName:         "aws_redshift_event_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&controllersredshift.ParameterGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ParameterGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_redshift_parameter_group"],
			TypeName:         "aws_redshift_parameter_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&controllersredshift.SecurityGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_redshift_security_group"],
			TypeName:         "aws_redshift_security_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SnapshotCopyGrant",
	}:
		if err := (&controllersredshift.SnapshotCopyGrantReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SnapshotCopyGrant"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_redshift_snapshot_copy_grant"],
			TypeName:         "aws_redshift_snapshot_copy_grant",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SnapshotCopyGrant")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SnapshotSchedule",
	}:
		if err := (&controllersredshift.SnapshotScheduleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SnapshotSchedule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_redshift_snapshot_schedule"],
			TypeName:         "aws_redshift_snapshot_schedule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SnapshotSchedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SnapshotScheduleAssociation",
	}:
		if err := (&controllersredshift.SnapshotScheduleAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SnapshotScheduleAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_redshift_snapshot_schedule_association"],
			TypeName:         "aws_redshift_snapshot_schedule_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SnapshotScheduleAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&controllersredshift.SubnetGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubnetGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_redshift_subnet_group"],
			TypeName:         "aws_redshift_subnet_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resourcegroups.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersresourcegroups.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_resourcegroups_group"],
			TypeName:         "aws_resourcegroups_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&controllersroute.RouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Route"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route"],
			TypeName:         "aws_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DelegationSet",
	}:
		if err := (&controllersroute53.DelegationSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DelegationSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_delegation_set"],
			TypeName:         "aws_route53_delegation_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DelegationSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HealthCheck",
	}:
		if err := (&controllersroute53.HealthCheckReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HealthCheck"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_health_check"],
			TypeName:         "aws_route53_health_check",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedZoneDnssec",
	}:
		if err := (&controllersroute53.HostedZoneDnssecReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HostedZoneDnssec"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_hosted_zone_dnssec"],
			TypeName:         "aws_route53_hosted_zone_dnssec",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HostedZoneDnssec")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeySigningKey",
	}:
		if err := (&controllersroute53.KeySigningKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KeySigningKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_key_signing_key"],
			TypeName:         "aws_route53_key_signing_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeySigningKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QueryLog",
	}:
		if err := (&controllersroute53.QueryLogReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("QueryLog"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_query_log"],
			TypeName:         "aws_route53_query_log",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "QueryLog")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Record",
	}:
		if err := (&controllersroute53.RecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Record"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_record"],
			TypeName:         "aws_route53_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Record")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverDnssecConfig",
	}:
		if err := (&controllersroute53.ResolverDnssecConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverDnssecConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_dnssec_config"],
			TypeName:         "aws_route53_resolver_dnssec_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverDnssecConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverEndpoint",
	}:
		if err := (&controllersroute53.ResolverEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_endpoint"],
			TypeName:         "aws_route53_resolver_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverFirewallConfig",
	}:
		if err := (&controllersroute53.ResolverFirewallConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverFirewallConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_firewall_config"],
			TypeName:         "aws_route53_resolver_firewall_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverFirewallConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverFirewallDomainList",
	}:
		if err := (&controllersroute53.ResolverFirewallDomainListReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverFirewallDomainList"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_firewall_domain_list"],
			TypeName:         "aws_route53_resolver_firewall_domain_list",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverFirewallDomainList")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverFirewallRule",
	}:
		if err := (&controllersroute53.ResolverFirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverFirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_firewall_rule"],
			TypeName:         "aws_route53_resolver_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverFirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverFirewallRuleGroup",
	}:
		if err := (&controllersroute53.ResolverFirewallRuleGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverFirewallRuleGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_firewall_rule_group"],
			TypeName:         "aws_route53_resolver_firewall_rule_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverFirewallRuleGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverFirewallRuleGroupAssociation",
	}:
		if err := (&controllersroute53.ResolverFirewallRuleGroupAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverFirewallRuleGroupAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_firewall_rule_group_association"],
			TypeName:         "aws_route53_resolver_firewall_rule_group_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverFirewallRuleGroupAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverQueryLogConfig",
	}:
		if err := (&controllersroute53.ResolverQueryLogConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverQueryLogConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_query_log_config"],
			TypeName:         "aws_route53_resolver_query_log_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverQueryLogConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverQueryLogConfigAssociation",
	}:
		if err := (&controllersroute53.ResolverQueryLogConfigAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverQueryLogConfigAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_query_log_config_association"],
			TypeName:         "aws_route53_resolver_query_log_config_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverQueryLogConfigAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverRule",
	}:
		if err := (&controllersroute53.ResolverRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_rule"],
			TypeName:         "aws_route53_resolver_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverRuleAssociation",
	}:
		if err := (&controllersroute53.ResolverRuleAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResolverRuleAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_resolver_rule_association"],
			TypeName:         "aws_route53_resolver_rule_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResolverRuleAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcAssociationAuthorization",
	}:
		if err := (&controllersroute53.VpcAssociationAuthorizationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VpcAssociationAuthorization"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_vpc_association_authorization"],
			TypeName:         "aws_route53_vpc_association_authorization",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VpcAssociationAuthorization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Zone",
	}:
		if err := (&controllersroute53.ZoneReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Zone"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_zone"],
			TypeName:         "aws_route53_zone",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Zone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ZoneAssociation",
	}:
		if err := (&controllersroute53.ZoneAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ZoneAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route53_zone_association"],
			TypeName:         "aws_route53_zone_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ZoneAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&controllersroute.TableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Table"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route_table"],
			TypeName:         "aws_route_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableAssociation",
	}:
		if err := (&controllersroute.TableAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TableAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_route_table_association"],
			TypeName:         "aws_route_table_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessPoint",
	}:
		if err := (&controllerss3.AccessPointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccessPoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_access_point"],
			TypeName:         "aws_s3_access_point",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessPoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountPublicAccessBlock",
	}:
		if err := (&controllerss3.AccountPublicAccessBlockReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccountPublicAccessBlock"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_account_public_access_block"],
			TypeName:         "aws_s3_account_public_access_block",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountPublicAccessBlock")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Bucket",
	}:
		if err := (&controllerss3.BucketReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Bucket"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_bucket"],
			TypeName:         "aws_s3_bucket",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Bucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketAnalyticsConfiguration",
	}:
		if err := (&controllerss3.BucketAnalyticsConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketAnalyticsConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_bucket_analytics_configuration"],
			TypeName:         "aws_s3_bucket_analytics_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketAnalyticsConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketInventory",
	}:
		if err := (&controllerss3.BucketInventoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketInventory"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_bucket_inventory"],
			TypeName:         "aws_s3_bucket_inventory",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketInventory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketMetric",
	}:
		if err := (&controllerss3.BucketMetricReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketMetric"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_bucket_metric"],
			TypeName:         "aws_s3_bucket_metric",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketMetric")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketNotification",
	}:
		if err := (&controllerss3.BucketNotificationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketNotification"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_bucket_notification"],
			TypeName:         "aws_s3_bucket_notification",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketNotification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketObject",
	}:
		if err := (&controllerss3.BucketObjectReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketObject"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_bucket_object"],
			TypeName:         "aws_s3_bucket_object",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketObject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketOwnershipControls",
	}:
		if err := (&controllerss3.BucketOwnershipControlsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketOwnershipControls"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_bucket_ownership_controls"],
			TypeName:         "aws_s3_bucket_ownership_controls",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketOwnershipControls")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketPolicy",
	}:
		if err := (&controllerss3.BucketPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_bucket_policy"],
			TypeName:         "aws_s3_bucket_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketPublicAccessBlock",
	}:
		if err := (&controllerss3.BucketPublicAccessBlockReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketPublicAccessBlock"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_bucket_public_access_block"],
			TypeName:         "aws_s3_bucket_public_access_block",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketPublicAccessBlock")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ObjectCopy",
	}:
		if err := (&controllerss3.ObjectCopyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ObjectCopy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3_object_copy"],
			TypeName:         "aws_s3_object_copy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ObjectCopy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3control.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Bucket",
	}:
		if err := (&controllerss3control.BucketReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Bucket"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3control_bucket"],
			TypeName:         "aws_s3control_bucket",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Bucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3control.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketLifecycleConfiguration",
	}:
		if err := (&controllerss3control.BucketLifecycleConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketLifecycleConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3control_bucket_lifecycle_configuration"],
			TypeName:         "aws_s3control_bucket_lifecycle_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketLifecycleConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3control.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketPolicy",
	}:
		if err := (&controllerss3control.BucketPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BucketPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3control_bucket_policy"],
			TypeName:         "aws_s3control_bucket_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BucketPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3outposts.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&controllerss3outposts.EndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Endpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_s3outposts_endpoint"],
			TypeName:         "aws_s3outposts_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&controllerssagemaker.AppReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("App"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_app"],
			TypeName:         "aws_sagemaker_app",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppImageConfig",
	}:
		if err := (&controllerssagemaker.AppImageConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AppImageConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_app_image_config"],
			TypeName:         "aws_sagemaker_app_image_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppImageConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CodeRepository",
	}:
		if err := (&controllerssagemaker.CodeRepositoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CodeRepository"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_code_repository"],
			TypeName:         "aws_sagemaker_code_repository",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CodeRepository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllerssagemaker.DomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_domain"],
			TypeName:         "aws_sagemaker_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&controllerssagemaker.EndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Endpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_endpoint"],
			TypeName:         "aws_sagemaker_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointConfiguration",
	}:
		if err := (&controllerssagemaker.EndpointConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_endpoint_configuration"],
			TypeName:         "aws_sagemaker_endpoint_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FeatureGroup",
	}:
		if err := (&controllerssagemaker.FeatureGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FeatureGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_feature_group"],
			TypeName:         "aws_sagemaker_feature_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FeatureGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&controllerssagemaker.ImageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Image"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_image"],
			TypeName:         "aws_sagemaker_image",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageVersion",
	}:
		if err := (&controllerssagemaker.ImageVersionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ImageVersion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_image_version"],
			TypeName:         "aws_sagemaker_image_version",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ImageVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Model",
	}:
		if err := (&controllerssagemaker.ModelReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Model"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_model"],
			TypeName:         "aws_sagemaker_model",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Model")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ModelPackageGroup",
	}:
		if err := (&controllerssagemaker.ModelPackageGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ModelPackageGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_model_package_group"],
			TypeName:         "aws_sagemaker_model_package_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ModelPackageGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotebookInstance",
	}:
		if err := (&controllerssagemaker.NotebookInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NotebookInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_notebook_instance"],
			TypeName:         "aws_sagemaker_notebook_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NotebookInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotebookInstanceLifecycleConfiguration",
	}:
		if err := (&controllerssagemaker.NotebookInstanceLifecycleConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NotebookInstanceLifecycleConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_notebook_instance_lifecycle_configuration"],
			TypeName:         "aws_sagemaker_notebook_instance_lifecycle_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NotebookInstanceLifecycleConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserProfile",
	}:
		if err := (&controllerssagemaker.UserProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UserProfile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sagemaker_user_profile"],
			TypeName:         "aws_sagemaker_user_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UserProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "schemas.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Discoverer",
	}:
		if err := (&controllersschemas.DiscovererReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Discoverer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_schemas_discoverer"],
			TypeName:         "aws_schemas_discoverer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Discoverer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "schemas.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Registry",
	}:
		if err := (&controllersschemas.RegistryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Registry"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_schemas_registry"],
			TypeName:         "aws_schemas_registry",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Registry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "schemas.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schema",
	}:
		if err := (&controllersschemas.SchemaReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Schema"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_schemas_schema"],
			TypeName:         "aws_schemas_schema",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Schema")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secretsmanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Secret",
	}:
		if err := (&controllerssecretsmanager.SecretReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Secret"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_secretsmanager_secret"],
			TypeName:         "aws_secretsmanager_secret",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Secret")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secretsmanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecretPolicy",
	}:
		if err := (&controllerssecretsmanager.SecretPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecretPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_secretsmanager_secret_policy"],
			TypeName:         "aws_secretsmanager_secret_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecretPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secretsmanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecretRotation",
	}:
		if err := (&controllerssecretsmanager.SecretRotationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecretRotation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_secretsmanager_secret_rotation"],
			TypeName:         "aws_secretsmanager_secret_rotation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecretRotation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secretsmanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecretVersion",
	}:
		if err := (&controllerssecretsmanager.SecretVersionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecretVersion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_secretsmanager_secret_version"],
			TypeName:         "aws_secretsmanager_secret_version",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecretVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllerssecurity.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_security_group"],
			TypeName:         "aws_security_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupRule",
	}:
		if err := (&controllerssecurity.GroupRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GroupRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_security_group_rule"],
			TypeName:         "aws_security_group_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllerssecurityhub.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_securityhub_account"],
			TypeName:         "aws_securityhub_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionTarget",
	}:
		if err := (&controllerssecurityhub.ActionTargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActionTarget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_securityhub_action_target"],
			TypeName:         "aws_securityhub_action_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActionTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Insight",
	}:
		if err := (&controllerssecurityhub.InsightReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Insight"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_securityhub_insight"],
			TypeName:         "aws_securityhub_insight",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Insight")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InviteAccepter",
	}:
		if err := (&controllerssecurityhub.InviteAccepterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InviteAccepter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_securityhub_invite_accepter"],
			TypeName:         "aws_securityhub_invite_accepter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InviteAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Member",
	}:
		if err := (&controllerssecurityhub.MemberReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Member"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_securityhub_member"],
			TypeName:         "aws_securityhub_member",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Member")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationAdminAccount",
	}:
		if err := (&controllerssecurityhub.OrganizationAdminAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationAdminAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_securityhub_organization_admin_account"],
			TypeName:         "aws_securityhub_organization_admin_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationAdminAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProductSubscription",
	}:
		if err := (&controllerssecurityhub.ProductSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProductSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_securityhub_product_subscription"],
			TypeName:         "aws_securityhub_product_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProductSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StandardsSubscription",
	}:
		if err := (&controllerssecurityhub.StandardsSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StandardsSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_securityhub_standards_subscription"],
			TypeName:         "aws_securityhub_standards_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StandardsSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "serverlessapplicationrepository.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudformationStack",
	}:
		if err := (&controllersserverlessapplicationrepository.CloudformationStackReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudformationStack"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_serverlessapplicationrepository_cloudformation_stack"],
			TypeName:         "aws_serverlessapplicationrepository_cloudformation_stack",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudformationStack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicediscovery.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HttpNamespace",
	}:
		if err := (&controllersservicediscovery.HttpNamespaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HttpNamespace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_service_discovery_http_namespace"],
			TypeName:         "aws_service_discovery_http_namespace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HttpNamespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicediscovery.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrivateDNSNamespace",
	}:
		if err := (&controllersservicediscovery.PrivateDNSNamespaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PrivateDNSNamespace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_service_discovery_private_dns_namespace"],
			TypeName:         "aws_service_discovery_private_dns_namespace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PrivateDNSNamespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicediscovery.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublicDNSNamespace",
	}:
		if err := (&controllersservicediscovery.PublicDNSNamespaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PublicDNSNamespace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_service_discovery_public_dns_namespace"],
			TypeName:         "aws_service_discovery_public_dns_namespace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PublicDNSNamespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicediscovery.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllersservicediscovery.ServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_service_discovery_service"],
			TypeName:         "aws_service_discovery_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BudgetResourceAssociation",
	}:
		if err := (&controllersservicecatalog.BudgetResourceAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BudgetResourceAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_budget_resource_association"],
			TypeName:         "aws_servicecatalog_budget_resource_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BudgetResourceAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Constraint",
	}:
		if err := (&controllersservicecatalog.ConstraintReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Constraint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_constraint"],
			TypeName:         "aws_servicecatalog_constraint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Constraint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationsAccess",
	}:
		if err := (&controllersservicecatalog.OrganizationsAccessReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OrganizationsAccess"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_organizations_access"],
			TypeName:         "aws_servicecatalog_organizations_access",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OrganizationsAccess")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Portfolio",
	}:
		if err := (&controllersservicecatalog.PortfolioReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Portfolio"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_portfolio"],
			TypeName:         "aws_servicecatalog_portfolio",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Portfolio")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PortfolioShare",
	}:
		if err := (&controllersservicecatalog.PortfolioShareReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PortfolioShare"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_portfolio_share"],
			TypeName:         "aws_servicecatalog_portfolio_share",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PortfolioShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrincipalPortfolioAssociation",
	}:
		if err := (&controllersservicecatalog.PrincipalPortfolioAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PrincipalPortfolioAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_principal_portfolio_association"],
			TypeName:         "aws_servicecatalog_principal_portfolio_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PrincipalPortfolioAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Product",
	}:
		if err := (&controllersservicecatalog.ProductReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Product"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_product"],
			TypeName:         "aws_servicecatalog_product",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Product")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProductPortfolioAssociation",
	}:
		if err := (&controllersservicecatalog.ProductPortfolioAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProductPortfolioAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_product_portfolio_association"],
			TypeName:         "aws_servicecatalog_product_portfolio_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProductPortfolioAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProvisioningArtifact",
	}:
		if err := (&controllersservicecatalog.ProvisioningArtifactReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProvisioningArtifact"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_provisioning_artifact"],
			TypeName:         "aws_servicecatalog_provisioning_artifact",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProvisioningArtifact")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceAction",
	}:
		if err := (&controllersservicecatalog.ServiceActionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceAction"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_service_action"],
			TypeName:         "aws_servicecatalog_service_action",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceAction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagOption",
	}:
		if err := (&controllersservicecatalog.TagOptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagOption"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_tag_option"],
			TypeName:         "aws_servicecatalog_tag_option",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagOption")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagOptionResourceAssociation",
	}:
		if err := (&controllersservicecatalog.TagOptionResourceAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TagOptionResourceAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicecatalog_tag_option_resource_association"],
			TypeName:         "aws_servicecatalog_tag_option_resource_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TagOptionResourceAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicequotas.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceQuota",
	}:
		if err := (&controllersservicequotas.ServiceQuotaReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceQuota"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_servicequotas_service_quota"],
			TypeName:         "aws_servicequotas_service_quota",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceQuota")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActiveReceiptRuleSet",
	}:
		if err := (&controllersses.ActiveReceiptRuleSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActiveReceiptRuleSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_active_receipt_rule_set"],
			TypeName:         "aws_ses_active_receipt_rule_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActiveReceiptRuleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationSet",
	}:
		if err := (&controllersses.ConfigurationSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConfigurationSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_configuration_set"],
			TypeName:         "aws_ses_configuration_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConfigurationSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainDkim",
	}:
		if err := (&controllersses.DomainDkimReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DomainDkim"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_domain_dkim"],
			TypeName:         "aws_ses_domain_dkim",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainDkim")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainIdentity",
	}:
		if err := (&controllersses.DomainIdentityReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DomainIdentity"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_domain_identity"],
			TypeName:         "aws_ses_domain_identity",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainIdentity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainIdentityVerification",
	}:
		if err := (&controllersses.DomainIdentityVerificationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DomainIdentityVerification"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_domain_identity_verification"],
			TypeName:         "aws_ses_domain_identity_verification",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainIdentityVerification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainMailFrom",
	}:
		if err := (&controllersses.DomainMailFromReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DomainMailFrom"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_domain_mail_from"],
			TypeName:         "aws_ses_domain_mail_from",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainMailFrom")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EmailIdentity",
	}:
		if err := (&controllersses.EmailIdentityReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EmailIdentity"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_email_identity"],
			TypeName:         "aws_ses_email_identity",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EmailIdentity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventDestination",
	}:
		if err := (&controllersses.EventDestinationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventDestination"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_event_destination"],
			TypeName:         "aws_ses_event_destination",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventDestination")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityNotificationTopic",
	}:
		if err := (&controllersses.IdentityNotificationTopicReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityNotificationTopic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_identity_notification_topic"],
			TypeName:         "aws_ses_identity_notification_topic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityNotificationTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityPolicy",
	}:
		if err := (&controllersses.IdentityPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_identity_policy"],
			TypeName:         "aws_ses_identity_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReceiptFilter",
	}:
		if err := (&controllersses.ReceiptFilterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReceiptFilter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_receipt_filter"],
			TypeName:         "aws_ses_receipt_filter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReceiptFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReceiptRule",
	}:
		if err := (&controllersses.ReceiptRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReceiptRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_receipt_rule"],
			TypeName:         "aws_ses_receipt_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReceiptRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReceiptRuleSet",
	}:
		if err := (&controllersses.ReceiptRuleSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReceiptRuleSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_receipt_rule_set"],
			TypeName:         "aws_ses_receipt_rule_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReceiptRuleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Template",
	}:
		if err := (&controllersses.TemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Template"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ses_template"],
			TypeName:         "aws_ses_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Template")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sfn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Activity",
	}:
		if err := (&controllerssfn.ActivityReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Activity"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sfn_activity"],
			TypeName:         "aws_sfn_activity",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Activity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sfn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StateMachine",
	}:
		if err := (&controllerssfn.StateMachineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StateMachine"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sfn_state_machine"],
			TypeName:         "aws_sfn_state_machine",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StateMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "shield.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Protection",
	}:
		if err := (&controllersshield.ProtectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Protection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_shield_protection"],
			TypeName:         "aws_shield_protection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Protection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "signer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SigningJob",
	}:
		if err := (&controllerssigner.SigningJobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SigningJob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_signer_signing_job"],
			TypeName:         "aws_signer_signing_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SigningJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "signer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SigningProfile",
	}:
		if err := (&controllerssigner.SigningProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SigningProfile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_signer_signing_profile"],
			TypeName:         "aws_signer_signing_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SigningProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "signer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SigningProfilePermission",
	}:
		if err := (&controllerssigner.SigningProfilePermissionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SigningProfilePermission"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_signer_signing_profile_permission"],
			TypeName:         "aws_signer_signing_profile_permission",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SigningProfilePermission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "simpledb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllerssimpledb.DomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_simpledb_domain"],
			TypeName:         "aws_simpledb_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "snapshot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CreateVolumePermission",
	}:
		if err := (&controllerssnapshot.CreateVolumePermissionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CreateVolumePermission"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_snapshot_create_volume_permission"],
			TypeName:         "aws_snapshot_create_volume_permission",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CreateVolumePermission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sns.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformApplication",
	}:
		if err := (&controllerssns.PlatformApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PlatformApplication"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sns_platform_application"],
			TypeName:         "aws_sns_platform_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PlatformApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sns.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SmsPreferences",
	}:
		if err := (&controllerssns.SmsPreferencesReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SmsPreferences"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sns_sms_preferences"],
			TypeName:         "aws_sns_sms_preferences",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SmsPreferences")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sns.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&controllerssns.TopicReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Topic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sns_topic"],
			TypeName:         "aws_sns_topic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sns.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicPolicy",
	}:
		if err := (&controllerssns.TopicPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TopicPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sns_topic_policy"],
			TypeName:         "aws_sns_topic_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TopicPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sns.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicSubscription",
	}:
		if err := (&controllerssns.TopicSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TopicSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sns_topic_subscription"],
			TypeName:         "aws_sns_topic_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TopicSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatafeedSubscription",
	}:
		if err := (&controllersspot.DatafeedSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatafeedSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_spot_datafeed_subscription"],
			TypeName:         "aws_spot_datafeed_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatafeedSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FleetRequest",
	}:
		if err := (&controllersspot.FleetRequestReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FleetRequest"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_spot_fleet_request"],
			TypeName:         "aws_spot_fleet_request",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FleetRequest")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceRequest",
	}:
		if err := (&controllersspot.InstanceRequestReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InstanceRequest"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_spot_instance_request"],
			TypeName:         "aws_spot_instance_request",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InstanceRequest")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sqsqueue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqsQueue",
	}:
		if err := (&controllerssqsqueue.SqsQueueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SqsQueue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sqs_queue"],
			TypeName:         "aws_sqs_queue",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SqsQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sqsqueue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllerssqsqueue.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_sqs_queue_policy"],
			TypeName:         "aws_sqs_queue_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Activation",
	}:
		if err := (&controllersssm.ActivationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Activation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssm_activation"],
			TypeName:         "aws_ssm_activation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Activation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Association",
	}:
		if err := (&controllersssm.AssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Association"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssm_association"],
			TypeName:         "aws_ssm_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Association")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Document",
	}:
		if err := (&controllersssm.DocumentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Document"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssm_document"],
			TypeName:         "aws_ssm_document",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Document")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MaintenanceWindow",
	}:
		if err := (&controllersssm.MaintenanceWindowReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MaintenanceWindow"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssm_maintenance_window"],
			TypeName:         "aws_ssm_maintenance_window",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MaintenanceWindow")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MaintenanceWindowTarget",
	}:
		if err := (&controllersssm.MaintenanceWindowTargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MaintenanceWindowTarget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssm_maintenance_window_target"],
			TypeName:         "aws_ssm_maintenance_window_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MaintenanceWindowTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MaintenanceWindowTask",
	}:
		if err := (&controllersssm.MaintenanceWindowTaskReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MaintenanceWindowTask"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssm_maintenance_window_task"],
			TypeName:         "aws_ssm_maintenance_window_task",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MaintenanceWindowTask")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Parameter",
	}:
		if err := (&controllersssm.ParameterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Parameter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssm_parameter"],
			TypeName:         "aws_ssm_parameter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Parameter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PatchBaseline",
	}:
		if err := (&controllersssm.PatchBaselineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PatchBaseline"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssm_patch_baseline"],
			TypeName:         "aws_ssm_patch_baseline",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PatchBaseline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PatchGroup",
	}:
		if err := (&controllersssm.PatchGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PatchGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssm_patch_group"],
			TypeName:         "aws_ssm_patch_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PatchGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceDataSync",
	}:
		if err := (&controllersssm.ResourceDataSyncReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ResourceDataSync"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssm_resource_data_sync"],
			TypeName:         "aws_ssm_resource_data_sync",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ResourceDataSync")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssoadmin.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountAssignment",
	}:
		if err := (&controllersssoadmin.AccountAssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccountAssignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssoadmin_account_assignment"],
			TypeName:         "aws_ssoadmin_account_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssoadmin.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedPolicyAttachment",
	}:
		if err := (&controllersssoadmin.ManagedPolicyAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagedPolicyAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssoadmin_managed_policy_attachment"],
			TypeName:         "aws_ssoadmin_managed_policy_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagedPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssoadmin.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PermissionSet",
	}:
		if err := (&controllersssoadmin.PermissionSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PermissionSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssoadmin_permission_set"],
			TypeName:         "aws_ssoadmin_permission_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PermissionSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssoadmin.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PermissionSetInlinePolicy",
	}:
		if err := (&controllersssoadmin.PermissionSetInlinePolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PermissionSetInlinePolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_ssoadmin_permission_set_inline_policy"],
			TypeName:         "aws_ssoadmin_permission_set_inline_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PermissionSetInlinePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cache",
	}:
		if err := (&controllersstoragegateway.CacheReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cache"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_storagegateway_cache"],
			TypeName:         "aws_storagegateway_cache",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CachedIscsiVolume",
	}:
		if err := (&controllersstoragegateway.CachedIscsiVolumeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CachedIscsiVolume"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_storagegateway_cached_iscsi_volume"],
			TypeName:         "aws_storagegateway_cached_iscsi_volume",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CachedIscsiVolume")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersstoragegateway.GatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_storagegateway_gateway"],
			TypeName:         "aws_storagegateway_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NfsFileShare",
	}:
		if err := (&controllersstoragegateway.NfsFileShareReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NfsFileShare"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_storagegateway_nfs_file_share"],
			TypeName:         "aws_storagegateway_nfs_file_share",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NfsFileShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SmbFileShare",
	}:
		if err := (&controllersstoragegateway.SmbFileShareReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SmbFileShare"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_storagegateway_smb_file_share"],
			TypeName:         "aws_storagegateway_smb_file_share",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SmbFileShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StoredIscsiVolume",
	}:
		if err := (&controllersstoragegateway.StoredIscsiVolumeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StoredIscsiVolume"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_storagegateway_stored_iscsi_volume"],
			TypeName:         "aws_storagegateway_stored_iscsi_volume",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StoredIscsiVolume")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TapePool",
	}:
		if err := (&controllersstoragegateway.TapePoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TapePool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_storagegateway_tape_pool"],
			TypeName:         "aws_storagegateway_tape_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TapePool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UploadBuffer",
	}:
		if err := (&controllersstoragegateway.UploadBufferReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("UploadBuffer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_storagegateway_upload_buffer"],
			TypeName:         "aws_storagegateway_upload_buffer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "UploadBuffer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WorkingStorage",
	}:
		if err := (&controllersstoragegateway.WorkingStorageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WorkingStorage"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_storagegateway_working_storage"],
			TypeName:         "aws_storagegateway_working_storage",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WorkingStorage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subnet",
	}:
		if err := (&controllerssubnet.SubnetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Subnet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_subnet"],
			TypeName:         "aws_subnet",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Subnet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "swf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllersswf.DomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_swf_domain"],
			TypeName:         "aws_swf_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synthetics.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Canary",
	}:
		if err := (&controllerssynthetics.CanaryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Canary"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_synthetics_canary"],
			TypeName:         "aws_synthetics_canary",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Canary")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "timestreamwrite.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllerstimestreamwrite.DatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_timestreamwrite_database"],
			TypeName:         "aws_timestreamwrite_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "timestreamwrite.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&controllerstimestreamwrite.TableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Table"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_timestreamwrite_table"],
			TypeName:         "aws_timestreamwrite_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "transfer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&controllerstransfer.ServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Server"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_transfer_server"],
			TypeName:         "aws_transfer_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "transfer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SshKey",
	}:
		if err := (&controllerstransfer.SshKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SshKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_transfer_ssh_key"],
			TypeName:         "aws_transfer_ssh_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SshKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "transfer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&controllerstransfer.UserReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("User"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_transfer_user"],
			TypeName:         "aws_transfer_user",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "volume.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&controllersvolume.AttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Attachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_volume_attachment"],
			TypeName:         "aws_volume_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vpc",
	}:
		if err := (&controllersvpc.VpcReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Vpc"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc"],
			TypeName:         "aws_vpc",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Vpc")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DhcpOptions",
	}:
		if err := (&controllersvpc.DhcpOptionsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DhcpOptions"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_dhcp_options"],
			TypeName:         "aws_vpc_dhcp_options",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DhcpOptions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DhcpOptionsAssociation",
	}:
		if err := (&controllersvpc.DhcpOptionsAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DhcpOptionsAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_dhcp_options_association"],
			TypeName:         "aws_vpc_dhcp_options_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DhcpOptionsAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&controllersvpc.EndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Endpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_endpoint"],
			TypeName:         "aws_vpc_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointConnectionNotification",
	}:
		if err := (&controllersvpc.EndpointConnectionNotificationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointConnectionNotification"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_endpoint_connection_notification"],
			TypeName:         "aws_vpc_endpoint_connection_notification",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointConnectionNotification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointRouteTableAssociation",
	}:
		if err := (&controllersvpc.EndpointRouteTableAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointRouteTableAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_endpoint_route_table_association"],
			TypeName:         "aws_vpc_endpoint_route_table_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointRouteTableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointService",
	}:
		if err := (&controllersvpc.EndpointServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_endpoint_service"],
			TypeName:         "aws_vpc_endpoint_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointServiceAllowedPrincipal",
	}:
		if err := (&controllersvpc.EndpointServiceAllowedPrincipalReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointServiceAllowedPrincipal"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_endpoint_service_allowed_principal"],
			TypeName:         "aws_vpc_endpoint_service_allowed_principal",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointServiceAllowedPrincipal")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointSubnetAssociation",
	}:
		if err := (&controllersvpc.EndpointSubnetAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointSubnetAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_endpoint_subnet_association"],
			TypeName:         "aws_vpc_endpoint_subnet_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointSubnetAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ipv4CIDRBlockAssociation",
	}:
		if err := (&controllersvpc.Ipv4CIDRBlockAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Ipv4CIDRBlockAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_ipv4_cidr_block_association"],
			TypeName:         "aws_vpc_ipv4_cidr_block_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Ipv4CIDRBlockAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PeeringConnection",
	}:
		if err := (&controllersvpc.PeeringConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PeeringConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_peering_connection"],
			TypeName:         "aws_vpc_peering_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PeeringConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PeeringConnectionAccepter",
	}:
		if err := (&controllersvpc.PeeringConnectionAccepterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PeeringConnectionAccepter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_peering_connection_accepter"],
			TypeName:         "aws_vpc_peering_connection_accepter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PeeringConnectionAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PeeringConnectionOptions",
	}:
		if err := (&controllersvpc.PeeringConnectionOptionsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PeeringConnectionOptions"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpc_peering_connection_options"],
			TypeName:         "aws_vpc_peering_connection_options",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PeeringConnectionOptions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersvpn.ConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpn_connection"],
			TypeName:         "aws_vpn_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionRoute",
	}:
		if err := (&controllersvpn.ConnectionRouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConnectionRoute"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpn_connection_route"],
			TypeName:         "aws_vpn_connection_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectionRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersvpn.GatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpn_gateway"],
			TypeName:         "aws_vpn_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayAttachment",
	}:
		if err := (&controllersvpn.GatewayAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GatewayAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpn_gateway_attachment"],
			TypeName:         "aws_vpn_gateway_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GatewayAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayRoutePropagation",
	}:
		if err := (&controllersvpn.GatewayRoutePropagationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GatewayRoutePropagation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_vpn_gateway_route_propagation"],
			TypeName:         "aws_vpn_gateway_route_propagation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GatewayRoutePropagation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ByteMatchSet",
	}:
		if err := (&controllerswaf.ByteMatchSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ByteMatchSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_byte_match_set"],
			TypeName:         "aws_waf_byte_match_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ByteMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GeoMatchSet",
	}:
		if err := (&controllerswaf.GeoMatchSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GeoMatchSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_geo_match_set"],
			TypeName:         "aws_waf_geo_match_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GeoMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ipset",
	}:
		if err := (&controllerswaf.IpsetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Ipset"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_ipset"],
			TypeName:         "aws_waf_ipset",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Ipset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RateBasedRule",
	}:
		if err := (&controllerswaf.RateBasedRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RateBasedRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_rate_based_rule"],
			TypeName:         "aws_waf_rate_based_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RateBasedRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegexMatchSet",
	}:
		if err := (&controllerswaf.RegexMatchSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegexMatchSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_regex_match_set"],
			TypeName:         "aws_waf_regex_match_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegexMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegexPatternSet",
	}:
		if err := (&controllerswaf.RegexPatternSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegexPatternSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_regex_pattern_set"],
			TypeName:         "aws_waf_regex_pattern_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegexPatternSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&controllerswaf.RuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Rule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_rule"],
			TypeName:         "aws_waf_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RuleGroup",
	}:
		if err := (&controllerswaf.RuleGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RuleGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_rule_group"],
			TypeName:         "aws_waf_rule_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RuleGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SizeConstraintSet",
	}:
		if err := (&controllerswaf.SizeConstraintSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SizeConstraintSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_size_constraint_set"],
			TypeName:         "aws_waf_size_constraint_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SizeConstraintSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlInjectionMatchSet",
	}:
		if err := (&controllerswaf.SqlInjectionMatchSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SqlInjectionMatchSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_sql_injection_match_set"],
			TypeName:         "aws_waf_sql_injection_match_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SqlInjectionMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACL",
	}:
		if err := (&controllerswaf.WebACLReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebACL"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_web_acl"],
			TypeName:         "aws_waf_web_acl",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "XssMatchSet",
	}:
		if err := (&controllerswaf.XssMatchSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("XssMatchSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_waf_xss_match_set"],
			TypeName:         "aws_waf_xss_match_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "XssMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ByteMatchSet",
	}:
		if err := (&controllerswafregional.ByteMatchSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ByteMatchSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_byte_match_set"],
			TypeName:         "aws_wafregional_byte_match_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ByteMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GeoMatchSet",
	}:
		if err := (&controllerswafregional.GeoMatchSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GeoMatchSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_geo_match_set"],
			TypeName:         "aws_wafregional_geo_match_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GeoMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ipset",
	}:
		if err := (&controllerswafregional.IpsetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Ipset"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_ipset"],
			TypeName:         "aws_wafregional_ipset",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Ipset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RateBasedRule",
	}:
		if err := (&controllerswafregional.RateBasedRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RateBasedRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_rate_based_rule"],
			TypeName:         "aws_wafregional_rate_based_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RateBasedRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegexMatchSet",
	}:
		if err := (&controllerswafregional.RegexMatchSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegexMatchSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_regex_match_set"],
			TypeName:         "aws_wafregional_regex_match_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegexMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegexPatternSet",
	}:
		if err := (&controllerswafregional.RegexPatternSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegexPatternSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_regex_pattern_set"],
			TypeName:         "aws_wafregional_regex_pattern_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegexPatternSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&controllerswafregional.RuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Rule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_rule"],
			TypeName:         "aws_wafregional_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RuleGroup",
	}:
		if err := (&controllerswafregional.RuleGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RuleGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_rule_group"],
			TypeName:         "aws_wafregional_rule_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RuleGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SizeConstraintSet",
	}:
		if err := (&controllerswafregional.SizeConstraintSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SizeConstraintSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_size_constraint_set"],
			TypeName:         "aws_wafregional_size_constraint_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SizeConstraintSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlInjectionMatchSet",
	}:
		if err := (&controllerswafregional.SqlInjectionMatchSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SqlInjectionMatchSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_sql_injection_match_set"],
			TypeName:         "aws_wafregional_sql_injection_match_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SqlInjectionMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACL",
	}:
		if err := (&controllerswafregional.WebACLReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebACL"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_web_acl"],
			TypeName:         "aws_wafregional_web_acl",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACLAssociation",
	}:
		if err := (&controllerswafregional.WebACLAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebACLAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_web_acl_association"],
			TypeName:         "aws_wafregional_web_acl_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebACLAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "XssMatchSet",
	}:
		if err := (&controllerswafregional.XssMatchSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("XssMatchSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafregional_xss_match_set"],
			TypeName:         "aws_wafregional_xss_match_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "XssMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IpSet",
	}:
		if err := (&controllerswafv2.IpSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IpSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafv2_ip_set"],
			TypeName:         "aws_wafv2_ip_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IpSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegexPatternSet",
	}:
		if err := (&controllerswafv2.RegexPatternSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegexPatternSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafv2_regex_pattern_set"],
			TypeName:         "aws_wafv2_regex_pattern_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegexPatternSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RuleGroup",
	}:
		if err := (&controllerswafv2.RuleGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RuleGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafv2_rule_group"],
			TypeName:         "aws_wafv2_rule_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RuleGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACL",
	}:
		if err := (&controllerswafv2.WebACLReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebACL"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafv2_web_acl"],
			TypeName:         "aws_wafv2_web_acl",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACLAssociation",
	}:
		if err := (&controllerswafv2.WebACLAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebACLAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafv2_web_acl_association"],
			TypeName:         "aws_wafv2_web_acl_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebACLAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACLLoggingConfiguration",
	}:
		if err := (&controllerswafv2.WebACLLoggingConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebACLLoggingConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_wafv2_web_acl_logging_configuration"],
			TypeName:         "aws_wafv2_web_acl_logging_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebACLLoggingConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "worklink.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Fleet",
	}:
		if err := (&controllersworklink.FleetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Fleet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_worklink_fleet"],
			TypeName:         "aws_worklink_fleet",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Fleet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "worklink.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebsiteCertificateAuthorityAssociation",
	}:
		if err := (&controllersworklink.WebsiteCertificateAuthorityAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebsiteCertificateAuthorityAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_worklink_website_certificate_authority_association"],
			TypeName:         "aws_worklink_website_certificate_authority_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebsiteCertificateAuthorityAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "workspaces.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Directory",
	}:
		if err := (&controllersworkspaces.DirectoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Directory"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_workspaces_directory"],
			TypeName:         "aws_workspaces_directory",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Directory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "workspaces.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IpGroup",
	}:
		if err := (&controllersworkspaces.IpGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IpGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_workspaces_ip_group"],
			TypeName:         "aws_workspaces_ip_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IpGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "workspaces.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workspace",
	}:
		if err := (&controllersworkspaces.WorkspaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Workspace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_workspaces_workspace"],
			TypeName:         "aws_workspaces_workspace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Workspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "xray.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EncryptionConfig",
	}:
		if err := (&controllersxray.EncryptionConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EncryptionConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_xray_encryption_config"],
			TypeName:         "aws_xray_encryption_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EncryptionConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "xray.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersxray.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_xray_group"],
			TypeName:         "aws_xray_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "xray.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SamplingRule",
	}:
		if err := (&controllersxray.SamplingRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SamplingRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         aws.Provider(),
			Resource:         aws.Provider().ResourcesMap["aws_xray_sampling_rule"],
			TypeName:         "aws_xray_sampling_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SamplingRule")
			return err
		}

	default:
		return fmt.Errorf("Invalid CRD")
	}

	return nil
}

func SetupWebhook(mgr manager.Manager, gvk schema.GroupVersionKind) error {
	switch gvk {
	case schema.GroupVersionKind{
		Group:   "accessanalyzer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Analyzer",
	}:
		if err := (&accessanalyzerv1alpha1.Analyzer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Analyzer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "acm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&acmv1alpha1.Certificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "acm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CertificateValidation",
	}:
		if err := (&acmv1alpha1.CertificateValidation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CertificateValidation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "acmpca.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&acmpcav1alpha1.Certificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "acmpca.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CertificateAuthority",
	}:
		if err := (&acmpcav1alpha1.CertificateAuthority{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CertificateAuthority")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "acmpca.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CertificateAuthorityCertificate",
	}:
		if err := (&acmpcav1alpha1.CertificateAuthorityCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CertificateAuthorityCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alb",
	}:
		if err := (&albv1alpha1.Alb{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Alb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&albv1alpha1.Listener{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ListenerCertificate",
	}:
		if err := (&albv1alpha1.ListenerCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ListenerCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ListenerRule",
	}:
		if err := (&albv1alpha1.ListenerRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ListenerRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetGroup",
	}:
		if err := (&albv1alpha1.TargetGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "alb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetGroupAttachment",
	}:
		if err := (&albv1alpha1.TargetGroupAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetGroupAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ami.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ami",
	}:
		if err := (&amiv1alpha1.Ami{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Ami")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ami.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Copy",
	}:
		if err := (&amiv1alpha1.Copy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Copy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ami.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FromInstance",
	}:
		if err := (&amiv1alpha1.FromInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FromInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ami.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LaunchPermission",
	}:
		if err := (&amiv1alpha1.LaunchPermission{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LaunchPermission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amplify.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&amplifyv1alpha1.App{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amplify.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendEnvironment",
	}:
		if err := (&amplifyv1alpha1.BackendEnvironment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackendEnvironment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amplify.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Branch",
	}:
		if err := (&amplifyv1alpha1.Branch{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Branch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amplify.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainAssociation",
	}:
		if err := (&amplifyv1alpha1.DomainAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "amplify.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Webhook",
	}:
		if err := (&amplifyv1alpha1.Webhook{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Webhook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&apigatewayv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiKey",
	}:
		if err := (&apigatewayv1alpha1.ApiKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Authorizer",
	}:
		if err := (&apigatewayv1alpha1.Authorizer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Authorizer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BasePathMapping",
	}:
		if err := (&apigatewayv1alpha1.BasePathMapping{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BasePathMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientCertificate",
	}:
		if err := (&apigatewayv1alpha1.ClientCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClientCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Deployment",
	}:
		if err := (&apigatewayv1alpha1.Deployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Deployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DocumentationPart",
	}:
		if err := (&apigatewayv1alpha1.DocumentationPart{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DocumentationPart")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DocumentationVersion",
	}:
		if err := (&apigatewayv1alpha1.DocumentationVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DocumentationVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainName",
	}:
		if err := (&apigatewayv1alpha1.DomainName{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainName")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayResponse",
	}:
		if err := (&apigatewayv1alpha1.GatewayResponse{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GatewayResponse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Integration",
	}:
		if err := (&apigatewayv1alpha1.Integration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Integration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IntegrationResponse",
	}:
		if err := (&apigatewayv1alpha1.IntegrationResponse{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IntegrationResponse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Method",
	}:
		if err := (&apigatewayv1alpha1.Method{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Method")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MethodResponse",
	}:
		if err := (&apigatewayv1alpha1.MethodResponse{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MethodResponse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MethodSettings",
	}:
		if err := (&apigatewayv1alpha1.MethodSettings{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MethodSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Model",
	}:
		if err := (&apigatewayv1alpha1.Model{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Model")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RequestValidator",
	}:
		if err := (&apigatewayv1alpha1.RequestValidator{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RequestValidator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApigatewayResource",
	}:
		if err := (&apigatewayv1alpha1.ApigatewayResource{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApigatewayResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RestAPI",
	}:
		if err := (&apigatewayv1alpha1.RestAPI{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RestAPI")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RestAPIPolicy",
	}:
		if err := (&apigatewayv1alpha1.RestAPIPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RestAPIPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Stage",
	}:
		if err := (&apigatewayv1alpha1.Stage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Stage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UsagePlan",
	}:
		if err := (&apigatewayv1alpha1.UsagePlan{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UsagePlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UsagePlanKey",
	}:
		if err := (&apigatewayv1alpha1.UsagePlanKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UsagePlanKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcLink",
	}:
		if err := (&apigatewayv1alpha1.VpcLink{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcLink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Api",
	}:
		if err := (&apigatewayv2v1alpha1.Api{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Api")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiMapping",
	}:
		if err := (&apigatewayv2v1alpha1.ApiMapping{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Authorizer",
	}:
		if err := (&apigatewayv2v1alpha1.Authorizer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Authorizer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Deployment",
	}:
		if err := (&apigatewayv2v1alpha1.Deployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Deployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainName",
	}:
		if err := (&apigatewayv2v1alpha1.DomainName{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainName")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Integration",
	}:
		if err := (&apigatewayv2v1alpha1.Integration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Integration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IntegrationResponse",
	}:
		if err := (&apigatewayv2v1alpha1.IntegrationResponse{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IntegrationResponse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Model",
	}:
		if err := (&apigatewayv2v1alpha1.Model{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Model")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&apigatewayv2v1alpha1.Route{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteResponse",
	}:
		if err := (&apigatewayv2v1alpha1.RouteResponse{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouteResponse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Stage",
	}:
		if err := (&apigatewayv2v1alpha1.Stage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Stage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apigatewayv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcLink",
	}:
		if err := (&apigatewayv2v1alpha1.VpcLink{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcLink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CookieStickinessPolicy",
	}:
		if err := (&appv1alpha1.CookieStickinessPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CookieStickinessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appautoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&appautoscalingv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appautoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScheduledAction",
	}:
		if err := (&appautoscalingv1alpha1.ScheduledAction{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ScheduledAction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appautoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Target",
	}:
		if err := (&appautoscalingv1alpha1.Target{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Target")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayRoute",
	}:
		if err := (&appmeshv1alpha1.GatewayRoute{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GatewayRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Mesh",
	}:
		if err := (&appmeshv1alpha1.Mesh{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Mesh")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&appmeshv1alpha1.Route{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualGateway",
	}:
		if err := (&appmeshv1alpha1.VirtualGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNode",
	}:
		if err := (&appmeshv1alpha1.VirtualNode{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualNode")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualRouter",
	}:
		if err := (&appmeshv1alpha1.VirtualRouter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualRouter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appmesh.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualService",
	}:
		if err := (&appmeshv1alpha1.VirtualService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apprunner.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoScalingConfigurationVersion",
	}:
		if err := (&apprunnerv1alpha1.AutoScalingConfigurationVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AutoScalingConfigurationVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apprunner.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&apprunnerv1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apprunner.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomDomainAssociation",
	}:
		if err := (&apprunnerv1alpha1.CustomDomainAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CustomDomainAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apprunner.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&apprunnerv1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appsync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiKey",
	}:
		if err := (&appsyncv1alpha1.ApiKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appsync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Datasource",
	}:
		if err := (&appsyncv1alpha1.Datasource{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Datasource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appsync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Function",
	}:
		if err := (&appsyncv1alpha1.Function{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Function")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appsync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GraphqlAPI",
	}:
		if err := (&appsyncv1alpha1.GraphqlAPI{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GraphqlAPI")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "appsync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Resolver",
	}:
		if err := (&appsyncv1alpha1.Resolver{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Resolver")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "athena.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&athenav1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "athena.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamedQuery",
	}:
		if err := (&athenav1alpha1.NamedQuery{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NamedQuery")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "athena.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workgroup",
	}:
		if err := (&athenav1alpha1.Workgroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Workgroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&autoscalingv1alpha1.Attachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&autoscalingv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LifecycleHook",
	}:
		if err := (&autoscalingv1alpha1.LifecycleHook{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LifecycleHook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Notification",
	}:
		if err := (&autoscalingv1alpha1.Notification{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Notification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&autoscalingv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscaling.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schedule",
	}:
		if err := (&autoscalingv1alpha1.Schedule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Schedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "autoscalingplans.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScalingPlan",
	}:
		if err := (&autoscalingplansv1alpha1.ScalingPlan{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ScalingPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalSettings",
	}:
		if err := (&backupv1alpha1.GlobalSettings{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GlobalSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Plan",
	}:
		if err := (&backupv1alpha1.Plan{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Plan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegionSettings",
	}:
		if err := (&backupv1alpha1.RegionSettings{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegionSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Selection",
	}:
		if err := (&backupv1alpha1.Selection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Selection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vault",
	}:
		if err := (&backupv1alpha1.Vault{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Vault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VaultNotifications",
	}:
		if err := (&backupv1alpha1.VaultNotifications{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VaultNotifications")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VaultPolicy",
	}:
		if err := (&backupv1alpha1.VaultPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VaultPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ComputeEnvironment",
	}:
		if err := (&batchv1alpha1.ComputeEnvironment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ComputeEnvironment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobDefinition",
	}:
		if err := (&batchv1alpha1.JobDefinition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JobDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobQueue",
	}:
		if err := (&batchv1alpha1.JobQueue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JobQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "budgets.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Budget",
	}:
		if err := (&budgetsv1alpha1.Budget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Budget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "budgets.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BudgetAction",
	}:
		if err := (&budgetsv1alpha1.BudgetAction{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BudgetAction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloud9.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnvironmentEc2",
	}:
		if err := (&cloud9v1alpha1.EnvironmentEc2{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EnvironmentEc2")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudformationstack.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudformationStack",
	}:
		if err := (&cloudformationstackv1alpha1.CloudformationStack{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudformationStack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudformationstack.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Set",
	}:
		if err := (&cloudformationstackv1alpha1.Set{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Set")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudformationstack.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SetInstance",
	}:
		if err := (&cloudformationstackv1alpha1.SetInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SetInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudformationtype.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudformationType",
	}:
		if err := (&cloudformationtypev1alpha1.CloudformationType{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudformationType")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CachePolicy",
	}:
		if err := (&cloudfrontv1alpha1.CachePolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CachePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Distribution",
	}:
		if err := (&cloudfrontv1alpha1.Distribution{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Distribution")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Function",
	}:
		if err := (&cloudfrontv1alpha1.Function{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Function")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyGroup",
	}:
		if err := (&cloudfrontv1alpha1.KeyGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OriginAccessIdentity",
	}:
		if err := (&cloudfrontv1alpha1.OriginAccessIdentity{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OriginAccessIdentity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OriginRequestPolicy",
	}:
		if err := (&cloudfrontv1alpha1.OriginRequestPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OriginRequestPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublicKey",
	}:
		if err := (&cloudfrontv1alpha1.PublicKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PublicKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudfront.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RealtimeLogConfig",
	}:
		if err := (&cloudfrontv1alpha1.RealtimeLogConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RealtimeLogConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudhsmv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&cloudhsmv2v1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudhsmv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hsm",
	}:
		if err := (&cloudhsmv2v1alpha1.Hsm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Hsm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudtrail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cloudtrail",
	}:
		if err := (&cloudtrailv1alpha1.Cloudtrail{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cloudtrail")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CompositeAlarm",
	}:
		if err := (&cloudwatchv1alpha1.CompositeAlarm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CompositeAlarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dashboard",
	}:
		if err := (&cloudwatchv1alpha1.Dashboard{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Dashboard")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventAPIDestination",
	}:
		if err := (&cloudwatchv1alpha1.EventAPIDestination{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventAPIDestination")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventArchive",
	}:
		if err := (&cloudwatchv1alpha1.EventArchive{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventArchive")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventBus",
	}:
		if err := (&cloudwatchv1alpha1.EventBus{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventBus")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventBusPolicy",
	}:
		if err := (&cloudwatchv1alpha1.EventBusPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventBusPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventConnection",
	}:
		if err := (&cloudwatchv1alpha1.EventConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventPermission",
	}:
		if err := (&cloudwatchv1alpha1.EventPermission{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventPermission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventRule",
	}:
		if err := (&cloudwatchv1alpha1.EventRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventTarget",
	}:
		if err := (&cloudwatchv1alpha1.EventTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogDestination",
	}:
		if err := (&cloudwatchv1alpha1.LogDestination{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LogDestination")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogDestinationPolicy",
	}:
		if err := (&cloudwatchv1alpha1.LogDestinationPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LogDestinationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogGroup",
	}:
		if err := (&cloudwatchv1alpha1.LogGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LogGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogMetricFilter",
	}:
		if err := (&cloudwatchv1alpha1.LogMetricFilter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LogMetricFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogResourcePolicy",
	}:
		if err := (&cloudwatchv1alpha1.LogResourcePolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LogResourcePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogStream",
	}:
		if err := (&cloudwatchv1alpha1.LogStream{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LogStream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogSubscriptionFilter",
	}:
		if err := (&cloudwatchv1alpha1.LogSubscriptionFilter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LogSubscriptionFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MetricAlarm",
	}:
		if err := (&cloudwatchv1alpha1.MetricAlarm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MetricAlarm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MetricStream",
	}:
		if err := (&cloudwatchv1alpha1.MetricStream{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MetricStream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cloudwatch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QueryDefinition",
	}:
		if err := (&cloudwatchv1alpha1.QueryDefinition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "QueryDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codeartifact.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&codeartifactv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codeartifact.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainPermissionsPolicy",
	}:
		if err := (&codeartifactv1alpha1.DomainPermissionsPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainPermissionsPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codeartifact.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Repository",
	}:
		if err := (&codeartifactv1alpha1.Repository{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Repository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codeartifact.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RepositoryPermissionsPolicy",
	}:
		if err := (&codeartifactv1alpha1.RepositoryPermissionsPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RepositoryPermissionsPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codebuild.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&codebuildv1alpha1.Project{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codebuild.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReportGroup",
	}:
		if err := (&codebuildv1alpha1.ReportGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReportGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codebuild.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SourceCredential",
	}:
		if err := (&codebuildv1alpha1.SourceCredential{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SourceCredential")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codebuild.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Webhook",
	}:
		if err := (&codebuildv1alpha1.Webhook{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Webhook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codecommit.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Repository",
	}:
		if err := (&codecommitv1alpha1.Repository{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Repository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codecommit.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trigger",
	}:
		if err := (&codecommitv1alpha1.Trigger{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Trigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codedeploy.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&codedeployv1alpha1.App{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codedeploy.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeploymentConfig",
	}:
		if err := (&codedeployv1alpha1.DeploymentConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DeploymentConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codedeploy.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeploymentGroup",
	}:
		if err := (&codedeployv1alpha1.DeploymentGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DeploymentGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codepipeline.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Codepipeline",
	}:
		if err := (&codepipelinev1alpha1.Codepipeline{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Codepipeline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codepipeline.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Webhook",
	}:
		if err := (&codepipelinev1alpha1.Webhook{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Webhook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codestarconnections.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&codestarconnectionsv1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codestarconnections.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Host",
	}:
		if err := (&codestarconnectionsv1alpha1.Host{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Host")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "codestarnotifications.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotificationRule",
	}:
		if err := (&codestarnotificationsv1alpha1.NotificationRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NotificationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityPool",
	}:
		if err := (&cognitov1alpha1.IdentityPool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityPoolRolesAttachment",
	}:
		if err := (&cognitov1alpha1.IdentityPoolRolesAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityPoolRolesAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProvider",
	}:
		if err := (&cognitov1alpha1.IdentityProvider{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceServer",
	}:
		if err := (&cognitov1alpha1.ResourceServer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResourceServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserGroup",
	}:
		if err := (&cognitov1alpha1.UserGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPool",
	}:
		if err := (&cognitov1alpha1.UserPool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPoolClient",
	}:
		if err := (&cognitov1alpha1.UserPoolClient{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserPoolClient")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPoolDomain",
	}:
		if err := (&cognitov1alpha1.UserPoolDomain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserPoolDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognito.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPoolUiCustomization",
	}:
		if err := (&cognitov1alpha1.UserPoolUiCustomization{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserPoolUiCustomization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AggregateAuthorization",
	}:
		if err := (&configv1alpha1.AggregateAuthorization{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AggregateAuthorization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigRule",
	}:
		if err := (&configv1alpha1.ConfigRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationAggregator",
	}:
		if err := (&configv1alpha1.ConfigurationAggregator{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigurationAggregator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationRecorder",
	}:
		if err := (&configv1alpha1.ConfigurationRecorder{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigurationRecorder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationRecorderStatus",
	}:
		if err := (&configv1alpha1.ConfigurationRecorderStatus{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigurationRecorderStatus")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConformancePack",
	}:
		if err := (&configv1alpha1.ConformancePack{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConformancePack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeliveryChannel",
	}:
		if err := (&configv1alpha1.DeliveryChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DeliveryChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationCustomRule",
	}:
		if err := (&configv1alpha1.OrganizationCustomRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationCustomRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationManagedRule",
	}:
		if err := (&configv1alpha1.OrganizationManagedRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationManagedRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "config.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RemediationConfiguration",
	}:
		if err := (&configv1alpha1.RemediationConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RemediationConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cur.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReportDefinition",
	}:
		if err := (&curv1alpha1.ReportDefinition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReportDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "customer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&customerv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datapipeline.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pipeline",
	}:
		if err := (&datapipelinev1alpha1.Pipeline{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Pipeline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Agent",
	}:
		if err := (&datasyncv1alpha1.Agent{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Agent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocationEfs",
	}:
		if err := (&datasyncv1alpha1.LocationEfs{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LocationEfs")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocationFsxWindowsFileSystem",
	}:
		if err := (&datasyncv1alpha1.LocationFsxWindowsFileSystem{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LocationFsxWindowsFileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocationNfs",
	}:
		if err := (&datasyncv1alpha1.LocationNfs{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LocationNfs")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocationS3",
	}:
		if err := (&datasyncv1alpha1.LocationS3{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LocationS3")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocationSmb",
	}:
		if err := (&datasyncv1alpha1.LocationSmb{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LocationSmb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "datasync.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Task",
	}:
		if err := (&datasyncv1alpha1.Task{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Task")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dax.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&daxv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dax.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&daxv1alpha1.ParameterGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dax.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&daxv1alpha1.SubnetGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterSnapshot",
	}:
		if err := (&dbv1alpha1.ClusterSnapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterSnapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSubscription",
	}:
		if err := (&dbv1alpha1.EventSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&dbv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceRoleAssociation",
	}:
		if err := (&dbv1alpha1.InstanceRoleAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceRoleAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OptionGroup",
	}:
		if err := (&dbv1alpha1.OptionGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OptionGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&dbv1alpha1.ParameterGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Proxy",
	}:
		if err := (&dbv1alpha1.Proxy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Proxy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProxyDefaultTargetGroup",
	}:
		if err := (&dbv1alpha1.ProxyDefaultTargetGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProxyDefaultTargetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProxyEndpoint",
	}:
		if err := (&dbv1alpha1.ProxyEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProxyEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProxyTarget",
	}:
		if err := (&dbv1alpha1.ProxyTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProxyTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&dbv1alpha1.SecurityGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&dbv1alpha1.Snapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "db.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&dbv1alpha1.SubnetGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkACL",
	}:
		if err := (&defaultv1alpha1.NetworkACL{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteTable",
	}:
		if err := (&defaultv1alpha1.RouteTable{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouteTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&defaultv1alpha1.SecurityGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subnet",
	}:
		if err := (&defaultv1alpha1.Subnet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Subnet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vpc",
	}:
		if err := (&defaultv1alpha1.Vpc{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Vpc")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "default.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcDHCPOptions",
	}:
		if err := (&defaultv1alpha1.VpcDHCPOptions{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcDHCPOptions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devicefarm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Project",
	}:
		if err := (&devicefarmv1alpha1.Project{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Project")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "directoryservice.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConditionalForwarder",
	}:
		if err := (&directoryservicev1alpha1.ConditionalForwarder{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConditionalForwarder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "directoryservice.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Directory",
	}:
		if err := (&directoryservicev1alpha1.Directory{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Directory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "directoryservice.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogSubscription",
	}:
		if err := (&directoryservicev1alpha1.LogSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LogSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dlm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LifecyclePolicy",
	}:
		if err := (&dlmv1alpha1.LifecyclePolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LifecyclePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&dmsv1alpha1.Certificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&dmsv1alpha1.Endpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSubscription",
	}:
		if err := (&dmsv1alpha1.EventSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationInstance",
	}:
		if err := (&dmsv1alpha1.ReplicationInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReplicationInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationSubnetGroup",
	}:
		if err := (&dmsv1alpha1.ReplicationSubnetGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReplicationSubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationTask",
	}:
		if err := (&dmsv1alpha1.ReplicationTask{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReplicationTask")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "docdb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&docdbv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "docdb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterInstance",
	}:
		if err := (&docdbv1alpha1.ClusterInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "docdb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterParameterGroup",
	}:
		if err := (&docdbv1alpha1.ClusterParameterGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "docdb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterSnapshot",
	}:
		if err := (&docdbv1alpha1.ClusterSnapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterSnapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "docdb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&docdbv1alpha1.SubnetGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BgpPeer",
	}:
		if err := (&dxv1alpha1.BgpPeer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BgpPeer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&dxv1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionAssociation",
	}:
		if err := (&dxv1alpha1.ConnectionAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectionAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&dxv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayAssociation",
	}:
		if err := (&dxv1alpha1.GatewayAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GatewayAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayAssociationProposal",
	}:
		if err := (&dxv1alpha1.GatewayAssociationProposal{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GatewayAssociationProposal")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedPrivateVirtualInterface",
	}:
		if err := (&dxv1alpha1.HostedPrivateVirtualInterface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostedPrivateVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedPrivateVirtualInterfaceAccepter",
	}:
		if err := (&dxv1alpha1.HostedPrivateVirtualInterfaceAccepter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostedPrivateVirtualInterfaceAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedPublicVirtualInterface",
	}:
		if err := (&dxv1alpha1.HostedPublicVirtualInterface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostedPublicVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedPublicVirtualInterfaceAccepter",
	}:
		if err := (&dxv1alpha1.HostedPublicVirtualInterfaceAccepter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostedPublicVirtualInterfaceAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedTransitVirtualInterface",
	}:
		if err := (&dxv1alpha1.HostedTransitVirtualInterface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostedTransitVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedTransitVirtualInterfaceAccepter",
	}:
		if err := (&dxv1alpha1.HostedTransitVirtualInterfaceAccepter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostedTransitVirtualInterfaceAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lag",
	}:
		if err := (&dxv1alpha1.Lag{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Lag")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrivateVirtualInterface",
	}:
		if err := (&dxv1alpha1.PrivateVirtualInterface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PrivateVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublicVirtualInterface",
	}:
		if err := (&dxv1alpha1.PublicVirtualInterface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PublicVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitVirtualInterface",
	}:
		if err := (&dxv1alpha1.TransitVirtualInterface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitVirtualInterface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dynamodb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalTable",
	}:
		if err := (&dynamodbv1alpha1.GlobalTable{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GlobalTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dynamodb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KinesisStreamingDestination",
	}:
		if err := (&dynamodbv1alpha1.KinesisStreamingDestination{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KinesisStreamingDestination")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dynamodb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&dynamodbv1alpha1.Table{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dynamodb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableItem",
	}:
		if err := (&dynamodbv1alpha1.TableItem{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TableItem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ebs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DefaultKmsKey",
	}:
		if err := (&ebsv1alpha1.DefaultKmsKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DefaultKmsKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ebs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EncryptionByDefault",
	}:
		if err := (&ebsv1alpha1.EncryptionByDefault{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EncryptionByDefault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ebs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&ebsv1alpha1.Snapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ebs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SnapshotCopy",
	}:
		if err := (&ebsv1alpha1.SnapshotCopy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SnapshotCopy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ebs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Volume",
	}:
		if err := (&ebsv1alpha1.Volume{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Volume")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AvailabilityZoneGroup",
	}:
		if err := (&ec2v1alpha1.AvailabilityZoneGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AvailabilityZoneGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CapacityReservation",
	}:
		if err := (&ec2v1alpha1.CapacityReservation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CapacityReservation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CarrierGateway",
	}:
		if err := (&ec2v1alpha1.CarrierGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CarrierGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientVPNAuthorizationRule",
	}:
		if err := (&ec2v1alpha1.ClientVPNAuthorizationRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClientVPNAuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientVPNEndpoint",
	}:
		if err := (&ec2v1alpha1.ClientVPNEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClientVPNEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientVPNNetworkAssociation",
	}:
		if err := (&ec2v1alpha1.ClientVPNNetworkAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClientVPNNetworkAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClientVPNRoute",
	}:
		if err := (&ec2v1alpha1.ClientVPNRoute{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClientVPNRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Fleet",
	}:
		if err := (&ec2v1alpha1.Fleet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Fleet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocalGatewayRoute",
	}:
		if err := (&ec2v1alpha1.LocalGatewayRoute{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LocalGatewayRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LocalGatewayRouteTableVpcAssociation",
	}:
		if err := (&ec2v1alpha1.LocalGatewayRouteTableVpcAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LocalGatewayRouteTableVpcAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedPrefixList",
	}:
		if err := (&ec2v1alpha1.ManagedPrefixList{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagedPrefixList")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Tag",
	}:
		if err := (&ec2v1alpha1.Tag{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Tag")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorFilter",
	}:
		if err := (&ec2v1alpha1.TrafficMirrorFilter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TrafficMirrorFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorFilterRule",
	}:
		if err := (&ec2v1alpha1.TrafficMirrorFilterRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TrafficMirrorFilterRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorSession",
	}:
		if err := (&ec2v1alpha1.TrafficMirrorSession{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TrafficMirrorSession")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TrafficMirrorTarget",
	}:
		if err := (&ec2v1alpha1.TrafficMirrorTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TrafficMirrorTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGateway",
	}:
		if err := (&ec2v1alpha1.TransitGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayPeeringAttachment",
	}:
		if err := (&ec2v1alpha1.TransitGatewayPeeringAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitGatewayPeeringAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayPeeringAttachmentAccepter",
	}:
		if err := (&ec2v1alpha1.TransitGatewayPeeringAttachmentAccepter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitGatewayPeeringAttachmentAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayPrefixListReference",
	}:
		if err := (&ec2v1alpha1.TransitGatewayPrefixListReference{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitGatewayPrefixListReference")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayRoute",
	}:
		if err := (&ec2v1alpha1.TransitGatewayRoute{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitGatewayRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayRouteTable",
	}:
		if err := (&ec2v1alpha1.TransitGatewayRouteTable{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitGatewayRouteTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayRouteTableAssociation",
	}:
		if err := (&ec2v1alpha1.TransitGatewayRouteTableAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitGatewayRouteTableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayRouteTablePropagation",
	}:
		if err := (&ec2v1alpha1.TransitGatewayRouteTablePropagation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitGatewayRouteTablePropagation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayVpcAttachment",
	}:
		if err := (&ec2v1alpha1.TransitGatewayVpcAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitGatewayVpcAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ec2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TransitGatewayVpcAttachmentAccepter",
	}:
		if err := (&ec2v1alpha1.TransitGatewayVpcAttachmentAccepter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TransitGatewayVpcAttachmentAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LifecyclePolicy",
	}:
		if err := (&ecrv1alpha1.LifecyclePolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LifecyclePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegistryPolicy",
	}:
		if err := (&ecrv1alpha1.RegistryPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegistryPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationConfiguration",
	}:
		if err := (&ecrv1alpha1.ReplicationConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReplicationConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Repository",
	}:
		if err := (&ecrv1alpha1.Repository{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Repository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RepositoryPolicy",
	}:
		if err := (&ecrv1alpha1.RepositoryPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RepositoryPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecrpublic.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Repository",
	}:
		if err := (&ecrpublicv1alpha1.Repository{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Repository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CapacityProvider",
	}:
		if err := (&ecsv1alpha1.CapacityProvider{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CapacityProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&ecsv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&ecsv1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ecs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TaskDefinition",
	}:
		if err := (&ecsv1alpha1.TaskDefinition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TaskDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "efs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessPoint",
	}:
		if err := (&efsv1alpha1.AccessPoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessPoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "efs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackupPolicy",
	}:
		if err := (&efsv1alpha1.BackupPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "efs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FileSystem",
	}:
		if err := (&efsv1alpha1.FileSystem{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "efs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FileSystemPolicy",
	}:
		if err := (&efsv1alpha1.FileSystemPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FileSystemPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "efs.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MountTarget",
	}:
		if err := (&efsv1alpha1.MountTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MountTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "egress.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OnlyInternetGateway",
	}:
		if err := (&egressv1alpha1.OnlyInternetGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OnlyInternetGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eip.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Eip",
	}:
		if err := (&eipv1alpha1.Eip{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Eip")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eip.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Association",
	}:
		if err := (&eipv1alpha1.Association{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Association")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Addon",
	}:
		if err := (&eksv1alpha1.Addon{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Addon")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&eksv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FargateProfile",
	}:
		if err := (&eksv1alpha1.FargateProfile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FargateProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodeGroup",
	}:
		if err := (&eksv1alpha1.NodeGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NodeGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticbeanstalk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&elasticbeanstalkv1alpha1.Application{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticbeanstalk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationVersion",
	}:
		if err := (&elasticbeanstalkv1alpha1.ApplicationVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApplicationVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticbeanstalk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationTemplate",
	}:
		if err := (&elasticbeanstalkv1alpha1.ConfigurationTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigurationTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticbeanstalk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Environment",
	}:
		if err := (&elasticbeanstalkv1alpha1.Environment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&elasticachev1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalReplicationGroup",
	}:
		if err := (&elasticachev1alpha1.GlobalReplicationGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GlobalReplicationGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&elasticachev1alpha1.ParameterGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationGroup",
	}:
		if err := (&elasticachev1alpha1.ReplicationGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReplicationGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&elasticachev1alpha1.SecurityGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticache.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&elasticachev1alpha1.SubnetGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticsearchdomain.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ElasticsearchDomain",
	}:
		if err := (&elasticsearchdomainv1alpha1.ElasticsearchDomain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ElasticsearchDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticsearchdomain.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&elasticsearchdomainv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elasticsearchdomain.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SamlOptions",
	}:
		if err := (&elasticsearchdomainv1alpha1.SamlOptions{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SamlOptions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elastictranscoder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pipeline",
	}:
		if err := (&elastictranscoderv1alpha1.Pipeline{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Pipeline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elastictranscoder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Preset",
	}:
		if err := (&elastictranscoderv1alpha1.Preset{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Preset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Elb",
	}:
		if err := (&elbv1alpha1.Elb{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Elb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "elb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&elbv1alpha1.Attachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&emrv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceFleet",
	}:
		if err := (&emrv1alpha1.InstanceFleet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceFleet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceGroup",
	}:
		if err := (&emrv1alpha1.InstanceGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedScalingPolicy",
	}:
		if err := (&emrv1alpha1.ManagedScalingPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagedScalingPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "emr.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityConfiguration",
	}:
		if err := (&emrv1alpha1.SecurityConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "flow.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Log",
	}:
		if err := (&flowv1alpha1.Log{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Log")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AdminAccount",
	}:
		if err := (&fmsv1alpha1.AdminAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AdminAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&fmsv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fsx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LustreFileSystem",
	}:
		if err := (&fsxv1alpha1.LustreFileSystem{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LustreFileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "fsx.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WindowsFileSystem",
	}:
		if err := (&fsxv1alpha1.WindowsFileSystem{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WindowsFileSystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gamelift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&gameliftv1alpha1.Alias{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gamelift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Build",
	}:
		if err := (&gameliftv1alpha1.Build{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Build")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gamelift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Fleet",
	}:
		if err := (&gameliftv1alpha1.Fleet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Fleet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "gamelift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GameSessionQueue",
	}:
		if err := (&gameliftv1alpha1.GameSessionQueue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GameSessionQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glaciervault.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlacierVault",
	}:
		if err := (&glaciervaultv1alpha1.GlacierVault{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GlacierVault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glaciervault.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lock",
	}:
		if err := (&glaciervaultv1alpha1.Lock{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Lock")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "globalaccelerator.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Accelerator",
	}:
		if err := (&globalacceleratorv1alpha1.Accelerator{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Accelerator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "globalaccelerator.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointGroup",
	}:
		if err := (&globalacceleratorv1alpha1.EndpointGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "globalaccelerator.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&globalacceleratorv1alpha1.Listener{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogDatabase",
	}:
		if err := (&gluev1alpha1.CatalogDatabase{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CatalogTable",
	}:
		if err := (&gluev1alpha1.CatalogTable{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CatalogTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Classifier",
	}:
		if err := (&gluev1alpha1.Classifier{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Classifier")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&gluev1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Crawler",
	}:
		if err := (&gluev1alpha1.Crawler{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Crawler")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataCatalogEncryptionSettings",
	}:
		if err := (&gluev1alpha1.DataCatalogEncryptionSettings{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataCatalogEncryptionSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DevEndpoint",
	}:
		if err := (&gluev1alpha1.DevEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DevEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Job",
	}:
		if err := (&gluev1alpha1.Job{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Job")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MlTransform",
	}:
		if err := (&gluev1alpha1.MlTransform{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MlTransform")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Partition",
	}:
		if err := (&gluev1alpha1.Partition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Partition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Registry",
	}:
		if err := (&gluev1alpha1.Registry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Registry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourcePolicy",
	}:
		if err := (&gluev1alpha1.ResourcePolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResourcePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schema",
	}:
		if err := (&gluev1alpha1.Schema{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Schema")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityConfiguration",
	}:
		if err := (&gluev1alpha1.SecurityConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Trigger",
	}:
		if err := (&gluev1alpha1.Trigger{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Trigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserDefinedFunction",
	}:
		if err := (&gluev1alpha1.UserDefinedFunction{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserDefinedFunction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "glue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workflow",
	}:
		if err := (&gluev1alpha1.Workflow{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Workflow")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Detector",
	}:
		if err := (&guarddutyv1alpha1.Detector{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Detector")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Filter",
	}:
		if err := (&guarddutyv1alpha1.Filter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Filter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InviteAccepter",
	}:
		if err := (&guarddutyv1alpha1.InviteAccepter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InviteAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ipset",
	}:
		if err := (&guarddutyv1alpha1.Ipset{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Ipset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Member",
	}:
		if err := (&guarddutyv1alpha1.Member{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Member")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationAdminAccount",
	}:
		if err := (&guarddutyv1alpha1.OrganizationAdminAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationAdminAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationConfiguration",
	}:
		if err := (&guarddutyv1alpha1.OrganizationConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublishingDestination",
	}:
		if err := (&guarddutyv1alpha1.PublishingDestination{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PublishingDestination")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "guardduty.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Threatintelset",
	}:
		if err := (&guarddutyv1alpha1.Threatintelset{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Threatintelset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessKey",
	}:
		if err := (&iamv1alpha1.AccessKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountAlias",
	}:
		if err := (&iamv1alpha1.AccountAlias{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountAlias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountPasswordPolicy",
	}:
		if err := (&iamv1alpha1.AccountPasswordPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountPasswordPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&iamv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupMembership",
	}:
		if err := (&iamv1alpha1.GroupMembership{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupMembership")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupPolicy",
	}:
		if err := (&iamv1alpha1.GroupPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupPolicyAttachment",
	}:
		if err := (&iamv1alpha1.GroupPolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceProfile",
	}:
		if err := (&iamv1alpha1.InstanceProfile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OpenidConnectProvider",
	}:
		if err := (&iamv1alpha1.OpenidConnectProvider{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OpenidConnectProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&iamv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyAttachment",
	}:
		if err := (&iamv1alpha1.PolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Role",
	}:
		if err := (&iamv1alpha1.Role{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Role")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RolePolicy",
	}:
		if err := (&iamv1alpha1.RolePolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RolePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RolePolicyAttachment",
	}:
		if err := (&iamv1alpha1.RolePolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RolePolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SamlProvider",
	}:
		if err := (&iamv1alpha1.SamlProvider{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SamlProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerCertificate",
	}:
		if err := (&iamv1alpha1.ServerCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceLinkedRole",
	}:
		if err := (&iamv1alpha1.ServiceLinkedRole{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceLinkedRole")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&iamv1alpha1.User{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserGroupMembership",
	}:
		if err := (&iamv1alpha1.UserGroupMembership{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserGroupMembership")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserLoginProfile",
	}:
		if err := (&iamv1alpha1.UserLoginProfile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserLoginProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPolicy",
	}:
		if err := (&iamv1alpha1.UserPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserPolicyAttachment",
	}:
		if err := (&iamv1alpha1.UserPolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iam.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserSSHKey",
	}:
		if err := (&iamv1alpha1.UserSSHKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserSSHKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Component",
	}:
		if err := (&imagebuilderv1alpha1.Component{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Component")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DistributionConfiguration",
	}:
		if err := (&imagebuilderv1alpha1.DistributionConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DistributionConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&imagebuilderv1alpha1.Image{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImagePipeline",
	}:
		if err := (&imagebuilderv1alpha1.ImagePipeline{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ImagePipeline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageRecipe",
	}:
		if err := (&imagebuilderv1alpha1.ImageRecipe{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ImageRecipe")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "imagebuilder.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InfrastructureConfiguration",
	}:
		if err := (&imagebuilderv1alpha1.InfrastructureConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InfrastructureConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "inspector.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssessmentTarget",
	}:
		if err := (&inspectorv1alpha1.AssessmentTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AssessmentTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "inspector.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssessmentTemplate",
	}:
		if err := (&inspectorv1alpha1.AssessmentTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AssessmentTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "inspector.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceGroup",
	}:
		if err := (&inspectorv1alpha1.ResourceGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResourceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "instance.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&instancev1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "internet.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&internetv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&iotv1alpha1.Certificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&iotv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyAttachment",
	}:
		if err := (&iotv1alpha1.PolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RoleAlias",
	}:
		if err := (&iotv1alpha1.RoleAlias{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RoleAlias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Thing",
	}:
		if err := (&iotv1alpha1.Thing{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Thing")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ThingPrincipalAttachment",
	}:
		if err := (&iotv1alpha1.ThingPrincipalAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ThingPrincipalAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ThingType",
	}:
		if err := (&iotv1alpha1.ThingType{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ThingType")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicRule",
	}:
		if err := (&iotv1alpha1.TopicRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TopicRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "key.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pair",
	}:
		if err := (&keyv1alpha1.Pair{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Pair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesis.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsApplication",
	}:
		if err := (&kinesisv1alpha1.AnalyticsApplication{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesis.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirehoseDeliveryStream",
	}:
		if err := (&kinesisv1alpha1.FirehoseDeliveryStream{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirehoseDeliveryStream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesis.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Stream",
	}:
		if err := (&kinesisv1alpha1.Stream{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Stream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesis.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StreamConsumer",
	}:
		if err := (&kinesisv1alpha1.StreamConsumer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StreamConsumer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesis.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VideoStream",
	}:
		if err := (&kinesisv1alpha1.VideoStream{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VideoStream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesisanalyticsv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&kinesisanalyticsv2v1alpha1.Application{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kinesisanalyticsv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationSnapshot",
	}:
		if err := (&kinesisanalyticsv2v1alpha1.ApplicationSnapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApplicationSnapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&kmsv1alpha1.Alias{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ciphertext",
	}:
		if err := (&kmsv1alpha1.Ciphertext{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Ciphertext")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ExternalKey",
	}:
		if err := (&kmsv1alpha1.ExternalKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ExternalKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Grant",
	}:
		if err := (&kmsv1alpha1.Grant{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Grant")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kms.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Key",
	}:
		if err := (&kmsv1alpha1.Key{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Key")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lakeformation.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataLakeSettings",
	}:
		if err := (&lakeformationv1alpha1.DataLakeSettings{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataLakeSettings")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lakeformation.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Permissions",
	}:
		if err := (&lakeformationv1alpha1.Permissions{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Permissions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lakeformation.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeformationResource",
	}:
		if err := (&lakeformationv1alpha1.LakeformationResource{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LakeformationResource")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Alias",
	}:
		if err := (&lambdav1alpha1.Alias{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Alias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CodeSigningConfig",
	}:
		if err := (&lambdav1alpha1.CodeSigningConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CodeSigningConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSourceMapping",
	}:
		if err := (&lambdav1alpha1.EventSourceMapping{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventSourceMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Function",
	}:
		if err := (&lambdav1alpha1.Function{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Function")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FunctionEventInvokeConfig",
	}:
		if err := (&lambdav1alpha1.FunctionEventInvokeConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FunctionEventInvokeConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LayerVersion",
	}:
		if err := (&lambdav1alpha1.LayerVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LayerVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Permission",
	}:
		if err := (&lambdav1alpha1.Permission{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Permission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lambda.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProvisionedConcurrencyConfig",
	}:
		if err := (&lambdav1alpha1.ProvisionedConcurrencyConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProvisionedConcurrencyConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "launch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&launchv1alpha1.Configuration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "launch.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Template",
	}:
		if err := (&launchv1alpha1.Template{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Template")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lb",
	}:
		if err := (&lbv1alpha1.Lb{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Lb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CookieStickinessPolicy",
	}:
		if err := (&lbv1alpha1.CookieStickinessPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CookieStickinessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Listener",
	}:
		if err := (&lbv1alpha1.Listener{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Listener")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ListenerCertificate",
	}:
		if err := (&lbv1alpha1.ListenerCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ListenerCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ListenerRule",
	}:
		if err := (&lbv1alpha1.ListenerRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ListenerRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SslNegotiationPolicy",
	}:
		if err := (&lbv1alpha1.SslNegotiationPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SslNegotiationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetGroup",
	}:
		if err := (&lbv1alpha1.TargetGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TargetGroupAttachment",
	}:
		if err := (&lbv1alpha1.TargetGroupAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TargetGroupAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lex.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Bot",
	}:
		if err := (&lexv1alpha1.Bot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Bot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lex.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BotAlias",
	}:
		if err := (&lexv1alpha1.BotAlias{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BotAlias")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lex.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Intent",
	}:
		if err := (&lexv1alpha1.Intent{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Intent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lex.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SlotType",
	}:
		if err := (&lexv1alpha1.SlotType{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SlotType")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "licensemanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Association",
	}:
		if err := (&licensemanagerv1alpha1.Association{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Association")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "licensemanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LicenseConfiguration",
	}:
		if err := (&licensemanagerv1alpha1.LicenseConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LicenseConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&lightsailv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&lightsailv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstancePublicPorts",
	}:
		if err := (&lightsailv1alpha1.InstancePublicPorts{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstancePublicPorts")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyPair",
	}:
		if err := (&lightsailv1alpha1.KeyPair{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyPair")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StaticIP",
	}:
		if err := (&lightsailv1alpha1.StaticIP{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StaticIP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lightsail.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StaticIPAttachment",
	}:
		if err := (&lightsailv1alpha1.StaticIPAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StaticIPAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loadbalancer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendServerPolicy",
	}:
		if err := (&loadbalancerv1alpha1.BackendServerPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackendServerPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loadbalancer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ListenerPolicy",
	}:
		if err := (&loadbalancerv1alpha1.ListenerPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ListenerPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loadbalancer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&loadbalancerv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&macie2v1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClassificationJob",
	}:
		if err := (&macie2v1alpha1.ClassificationJob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClassificationJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomDataIdentifier",
	}:
		if err := (&macie2v1alpha1.CustomDataIdentifier{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CustomDataIdentifier")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FindingsFilter",
	}:
		if err := (&macie2v1alpha1.FindingsFilter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FindingsFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InvitationAccepter",
	}:
		if err := (&macie2v1alpha1.InvitationAccepter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InvitationAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Member",
	}:
		if err := (&macie2v1alpha1.Member{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Member")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationAdminAccount",
	}:
		if err := (&macie2v1alpha1.OrganizationAdminAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationAdminAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MemberAccountAssociation",
	}:
		if err := (&maciev1alpha1.MemberAccountAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MemberAccountAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "macie.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "S3BucketAssociation",
	}:
		if err := (&maciev1alpha1.S3BucketAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "S3BucketAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "main.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteTableAssociation",
	}:
		if err := (&mainv1alpha1.RouteTableAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouteTableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConvertQueue",
	}:
		if err := (&mediav1alpha1.ConvertQueue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConvertQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PackageChannel",
	}:
		if err := (&mediav1alpha1.PackageChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PackageChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StoreContainer",
	}:
		if err := (&mediav1alpha1.StoreContainer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StoreContainer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StoreContainerPolicy",
	}:
		if err := (&mediav1alpha1.StoreContainerPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StoreContainerPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mq.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Broker",
	}:
		if err := (&mqv1alpha1.Broker{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Broker")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mq.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&mqv1alpha1.Configuration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "msk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&mskv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "msk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&mskv1alpha1.Configuration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "msk.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScramSecretAssociation",
	}:
		if err := (&mskv1alpha1.ScramSecretAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ScramSecretAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mwaa.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Environment",
	}:
		if err := (&mwaav1alpha1.Environment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nat.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&natv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&neptunev1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterEndpoint",
	}:
		if err := (&neptunev1alpha1.ClusterEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterInstance",
	}:
		if err := (&neptunev1alpha1.ClusterInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterParameterGroup",
	}:
		if err := (&neptunev1alpha1.ClusterParameterGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterSnapshot",
	}:
		if err := (&neptunev1alpha1.ClusterSnapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterSnapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSubscription",
	}:
		if err := (&neptunev1alpha1.EventSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&neptunev1alpha1.ParameterGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "neptune.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&neptunev1alpha1.SubnetGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Acl",
	}:
		if err := (&networkv1alpha1.Acl{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Acl")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AclRule",
	}:
		if err := (&networkv1alpha1.AclRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AclRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Interface",
	}:
		if err := (&networkv1alpha1.Interface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Interface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceAttachment",
	}:
		if err := (&networkv1alpha1.InterfaceAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InterfaceAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceSgAttachment",
	}:
		if err := (&networkv1alpha1.InterfaceSgAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InterfaceSgAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "networkfirewall.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Firewall",
	}:
		if err := (&networkfirewallv1alpha1.Firewall{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Firewall")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "networkfirewall.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallPolicy",
	}:
		if err := (&networkfirewallv1alpha1.FirewallPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "networkfirewall.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LoggingConfiguration",
	}:
		if err := (&networkfirewallv1alpha1.LoggingConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LoggingConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "networkfirewall.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourcePolicy",
	}:
		if err := (&networkfirewallv1alpha1.ResourcePolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResourcePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "networkfirewall.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RuleGroup",
	}:
		if err := (&networkfirewallv1alpha1.RuleGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RuleGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&opsworksv1alpha1.Application{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomLayer",
	}:
		if err := (&opsworksv1alpha1.CustomLayer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CustomLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GangliaLayer",
	}:
		if err := (&opsworksv1alpha1.GangliaLayer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GangliaLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HaproxyLayer",
	}:
		if err := (&opsworksv1alpha1.HaproxyLayer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HaproxyLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Instance",
	}:
		if err := (&opsworksv1alpha1.Instance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Instance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JavaAppLayer",
	}:
		if err := (&opsworksv1alpha1.JavaAppLayer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JavaAppLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MemcachedLayer",
	}:
		if err := (&opsworksv1alpha1.MemcachedLayer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MemcachedLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MysqlLayer",
	}:
		if err := (&opsworksv1alpha1.MysqlLayer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MysqlLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodejsAppLayer",
	}:
		if err := (&opsworksv1alpha1.NodejsAppLayer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NodejsAppLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Permission",
	}:
		if err := (&opsworksv1alpha1.Permission{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Permission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PhpAppLayer",
	}:
		if err := (&opsworksv1alpha1.PhpAppLayer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PhpAppLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RailsAppLayer",
	}:
		if err := (&opsworksv1alpha1.RailsAppLayer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RailsAppLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RdsDbInstance",
	}:
		if err := (&opsworksv1alpha1.RdsDbInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RdsDbInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Stack",
	}:
		if err := (&opsworksv1alpha1.Stack{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Stack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StaticWebLayer",
	}:
		if err := (&opsworksv1alpha1.StaticWebLayer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StaticWebLayer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "opsworks.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserProfile",
	}:
		if err := (&opsworksv1alpha1.UserProfile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&organizationsv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DelegatedAdministrator",
	}:
		if err := (&organizationsv1alpha1.DelegatedAdministrator{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DelegatedAdministrator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Organization",
	}:
		if err := (&organizationsv1alpha1.Organization{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Organization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationalUnit",
	}:
		if err := (&organizationsv1alpha1.OrganizationalUnit{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationalUnit")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&organizationsv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "organizations.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyAttachment",
	}:
		if err := (&organizationsv1alpha1.PolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AdmChannel",
	}:
		if err := (&pinpointv1alpha1.AdmChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AdmChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApnsChannel",
	}:
		if err := (&pinpointv1alpha1.ApnsChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApnsChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApnsSandboxChannel",
	}:
		if err := (&pinpointv1alpha1.ApnsSandboxChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApnsSandboxChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApnsVoipChannel",
	}:
		if err := (&pinpointv1alpha1.ApnsVoipChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApnsVoipChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApnsVoipSandboxChannel",
	}:
		if err := (&pinpointv1alpha1.ApnsVoipSandboxChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApnsVoipSandboxChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&pinpointv1alpha1.App{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BaiduChannel",
	}:
		if err := (&pinpointv1alpha1.BaiduChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BaiduChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EmailChannel",
	}:
		if err := (&pinpointv1alpha1.EmailChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EmailChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventStream",
	}:
		if err := (&pinpointv1alpha1.EventStream{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventStream")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GcmChannel",
	}:
		if err := (&pinpointv1alpha1.GcmChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GcmChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "pinpoint.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SmsChannel",
	}:
		if err := (&pinpointv1alpha1.SmsChannel{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SmsChannel")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "placement.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&placementv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "prometheus.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workspace",
	}:
		if err := (&prometheusv1alpha1.Workspace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Workspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "proxy.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtocolPolicy",
	}:
		if err := (&proxyv1alpha1.ProtocolPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProtocolPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "qldb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ledger",
	}:
		if err := (&qldbv1alpha1.Ledger{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Ledger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quicksight.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&quicksightv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "quicksight.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&quicksightv1alpha1.User{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrincipalAssociation",
	}:
		if err := (&ramv1alpha1.PrincipalAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PrincipalAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceAssociation",
	}:
		if err := (&ramv1alpha1.ResourceAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResourceAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceShare",
	}:
		if err := (&ramv1alpha1.ResourceShare{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResourceShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ram.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceShareAccepter",
	}:
		if err := (&ramv1alpha1.ResourceShareAccepter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResourceShareAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&rdsv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterEndpoint",
	}:
		if err := (&rdsv1alpha1.ClusterEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterInstance",
	}:
		if err := (&rdsv1alpha1.ClusterInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterParameterGroup",
	}:
		if err := (&rdsv1alpha1.ClusterParameterGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "rds.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalCluster",
	}:
		if err := (&rdsv1alpha1.GlobalCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GlobalCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&redshiftv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSubscription",
	}:
		if err := (&redshiftv1alpha1.EventSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ParameterGroup",
	}:
		if err := (&redshiftv1alpha1.ParameterGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ParameterGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&redshiftv1alpha1.SecurityGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SnapshotCopyGrant",
	}:
		if err := (&redshiftv1alpha1.SnapshotCopyGrant{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SnapshotCopyGrant")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SnapshotSchedule",
	}:
		if err := (&redshiftv1alpha1.SnapshotSchedule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SnapshotSchedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SnapshotScheduleAssociation",
	}:
		if err := (&redshiftv1alpha1.SnapshotScheduleAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SnapshotScheduleAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redshift.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubnetGroup",
	}:
		if err := (&redshiftv1alpha1.SubnetGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubnetGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resourcegroups.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&resourcegroupsv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&routev1alpha1.Route{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DelegationSet",
	}:
		if err := (&route53v1alpha1.DelegationSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DelegationSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HealthCheck",
	}:
		if err := (&route53v1alpha1.HealthCheck{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HealthCheck")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HostedZoneDnssec",
	}:
		if err := (&route53v1alpha1.HostedZoneDnssec{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HostedZoneDnssec")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeySigningKey",
	}:
		if err := (&route53v1alpha1.KeySigningKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeySigningKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QueryLog",
	}:
		if err := (&route53v1alpha1.QueryLog{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "QueryLog")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Record",
	}:
		if err := (&route53v1alpha1.Record{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Record")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverDnssecConfig",
	}:
		if err := (&route53v1alpha1.ResolverDnssecConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverDnssecConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverEndpoint",
	}:
		if err := (&route53v1alpha1.ResolverEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverFirewallConfig",
	}:
		if err := (&route53v1alpha1.ResolverFirewallConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverFirewallConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverFirewallDomainList",
	}:
		if err := (&route53v1alpha1.ResolverFirewallDomainList{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverFirewallDomainList")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverFirewallRule",
	}:
		if err := (&route53v1alpha1.ResolverFirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverFirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverFirewallRuleGroup",
	}:
		if err := (&route53v1alpha1.ResolverFirewallRuleGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverFirewallRuleGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverFirewallRuleGroupAssociation",
	}:
		if err := (&route53v1alpha1.ResolverFirewallRuleGroupAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverFirewallRuleGroupAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverQueryLogConfig",
	}:
		if err := (&route53v1alpha1.ResolverQueryLogConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverQueryLogConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverQueryLogConfigAssociation",
	}:
		if err := (&route53v1alpha1.ResolverQueryLogConfigAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverQueryLogConfigAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverRule",
	}:
		if err := (&route53v1alpha1.ResolverRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResolverRuleAssociation",
	}:
		if err := (&route53v1alpha1.ResolverRuleAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResolverRuleAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VpcAssociationAuthorization",
	}:
		if err := (&route53v1alpha1.VpcAssociationAuthorization{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VpcAssociationAuthorization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Zone",
	}:
		if err := (&route53v1alpha1.Zone{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Zone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route53.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ZoneAssociation",
	}:
		if err := (&route53v1alpha1.ZoneAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ZoneAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&routev1alpha1.Table{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableAssociation",
	}:
		if err := (&routev1alpha1.TableAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessPoint",
	}:
		if err := (&s3v1alpha1.AccessPoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessPoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountPublicAccessBlock",
	}:
		if err := (&s3v1alpha1.AccountPublicAccessBlock{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountPublicAccessBlock")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Bucket",
	}:
		if err := (&s3v1alpha1.Bucket{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Bucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketAnalyticsConfiguration",
	}:
		if err := (&s3v1alpha1.BucketAnalyticsConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketAnalyticsConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketInventory",
	}:
		if err := (&s3v1alpha1.BucketInventory{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketInventory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketMetric",
	}:
		if err := (&s3v1alpha1.BucketMetric{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketMetric")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketNotification",
	}:
		if err := (&s3v1alpha1.BucketNotification{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketNotification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketObject",
	}:
		if err := (&s3v1alpha1.BucketObject{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketObject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketOwnershipControls",
	}:
		if err := (&s3v1alpha1.BucketOwnershipControls{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketOwnershipControls")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketPolicy",
	}:
		if err := (&s3v1alpha1.BucketPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketPublicAccessBlock",
	}:
		if err := (&s3v1alpha1.BucketPublicAccessBlock{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketPublicAccessBlock")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ObjectCopy",
	}:
		if err := (&s3v1alpha1.ObjectCopy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ObjectCopy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3control.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Bucket",
	}:
		if err := (&s3controlv1alpha1.Bucket{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Bucket")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3control.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketLifecycleConfiguration",
	}:
		if err := (&s3controlv1alpha1.BucketLifecycleConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketLifecycleConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3control.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BucketPolicy",
	}:
		if err := (&s3controlv1alpha1.BucketPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BucketPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "s3outposts.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&s3outpostsv1alpha1.Endpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&sagemakerv1alpha1.App{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppImageConfig",
	}:
		if err := (&sagemakerv1alpha1.AppImageConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppImageConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CodeRepository",
	}:
		if err := (&sagemakerv1alpha1.CodeRepository{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CodeRepository")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&sagemakerv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&sagemakerv1alpha1.Endpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointConfiguration",
	}:
		if err := (&sagemakerv1alpha1.EndpointConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FeatureGroup",
	}:
		if err := (&sagemakerv1alpha1.FeatureGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FeatureGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&sagemakerv1alpha1.Image{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ImageVersion",
	}:
		if err := (&sagemakerv1alpha1.ImageVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ImageVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Model",
	}:
		if err := (&sagemakerv1alpha1.Model{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Model")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ModelPackageGroup",
	}:
		if err := (&sagemakerv1alpha1.ModelPackageGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ModelPackageGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotebookInstance",
	}:
		if err := (&sagemakerv1alpha1.NotebookInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NotebookInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotebookInstanceLifecycleConfiguration",
	}:
		if err := (&sagemakerv1alpha1.NotebookInstanceLifecycleConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NotebookInstanceLifecycleConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sagemaker.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UserProfile",
	}:
		if err := (&sagemakerv1alpha1.UserProfile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UserProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "schemas.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Discoverer",
	}:
		if err := (&schemasv1alpha1.Discoverer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Discoverer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "schemas.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Registry",
	}:
		if err := (&schemasv1alpha1.Registry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Registry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "schemas.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schema",
	}:
		if err := (&schemasv1alpha1.Schema{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Schema")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secretsmanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Secret",
	}:
		if err := (&secretsmanagerv1alpha1.Secret{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Secret")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secretsmanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecretPolicy",
	}:
		if err := (&secretsmanagerv1alpha1.SecretPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecretPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secretsmanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecretRotation",
	}:
		if err := (&secretsmanagerv1alpha1.SecretRotation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecretRotation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "secretsmanager.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecretVersion",
	}:
		if err := (&secretsmanagerv1alpha1.SecretVersion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecretVersion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&securityv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupRule",
	}:
		if err := (&securityv1alpha1.GroupRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&securityhubv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionTarget",
	}:
		if err := (&securityhubv1alpha1.ActionTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActionTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Insight",
	}:
		if err := (&securityhubv1alpha1.Insight{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Insight")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InviteAccepter",
	}:
		if err := (&securityhubv1alpha1.InviteAccepter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InviteAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Member",
	}:
		if err := (&securityhubv1alpha1.Member{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Member")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationAdminAccount",
	}:
		if err := (&securityhubv1alpha1.OrganizationAdminAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationAdminAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProductSubscription",
	}:
		if err := (&securityhubv1alpha1.ProductSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProductSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "securityhub.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StandardsSubscription",
	}:
		if err := (&securityhubv1alpha1.StandardsSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StandardsSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "serverlessapplicationrepository.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudformationStack",
	}:
		if err := (&serverlessapplicationrepositoryv1alpha1.CloudformationStack{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudformationStack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicediscovery.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HttpNamespace",
	}:
		if err := (&servicediscoveryv1alpha1.HttpNamespace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HttpNamespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicediscovery.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrivateDNSNamespace",
	}:
		if err := (&servicediscoveryv1alpha1.PrivateDNSNamespace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PrivateDNSNamespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicediscovery.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublicDNSNamespace",
	}:
		if err := (&servicediscoveryv1alpha1.PublicDNSNamespace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PublicDNSNamespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicediscovery.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&servicediscoveryv1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BudgetResourceAssociation",
	}:
		if err := (&servicecatalogv1alpha1.BudgetResourceAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BudgetResourceAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Constraint",
	}:
		if err := (&servicecatalogv1alpha1.Constraint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Constraint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OrganizationsAccess",
	}:
		if err := (&servicecatalogv1alpha1.OrganizationsAccess{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OrganizationsAccess")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Portfolio",
	}:
		if err := (&servicecatalogv1alpha1.Portfolio{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Portfolio")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PortfolioShare",
	}:
		if err := (&servicecatalogv1alpha1.PortfolioShare{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PortfolioShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrincipalPortfolioAssociation",
	}:
		if err := (&servicecatalogv1alpha1.PrincipalPortfolioAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PrincipalPortfolioAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Product",
	}:
		if err := (&servicecatalogv1alpha1.Product{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Product")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProductPortfolioAssociation",
	}:
		if err := (&servicecatalogv1alpha1.ProductPortfolioAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProductPortfolioAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProvisioningArtifact",
	}:
		if err := (&servicecatalogv1alpha1.ProvisioningArtifact{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProvisioningArtifact")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceAction",
	}:
		if err := (&servicecatalogv1alpha1.ServiceAction{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceAction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagOption",
	}:
		if err := (&servicecatalogv1alpha1.TagOption{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagOption")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicecatalog.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TagOptionResourceAssociation",
	}:
		if err := (&servicecatalogv1alpha1.TagOptionResourceAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TagOptionResourceAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicequotas.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceQuota",
	}:
		if err := (&servicequotasv1alpha1.ServiceQuota{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceQuota")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActiveReceiptRuleSet",
	}:
		if err := (&sesv1alpha1.ActiveReceiptRuleSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActiveReceiptRuleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConfigurationSet",
	}:
		if err := (&sesv1alpha1.ConfigurationSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConfigurationSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainDkim",
	}:
		if err := (&sesv1alpha1.DomainDkim{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainDkim")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainIdentity",
	}:
		if err := (&sesv1alpha1.DomainIdentity{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainIdentity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainIdentityVerification",
	}:
		if err := (&sesv1alpha1.DomainIdentityVerification{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainIdentityVerification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainMailFrom",
	}:
		if err := (&sesv1alpha1.DomainMailFrom{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainMailFrom")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EmailIdentity",
	}:
		if err := (&sesv1alpha1.EmailIdentity{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EmailIdentity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventDestination",
	}:
		if err := (&sesv1alpha1.EventDestination{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventDestination")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityNotificationTopic",
	}:
		if err := (&sesv1alpha1.IdentityNotificationTopic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityNotificationTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityPolicy",
	}:
		if err := (&sesv1alpha1.IdentityPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReceiptFilter",
	}:
		if err := (&sesv1alpha1.ReceiptFilter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReceiptFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReceiptRule",
	}:
		if err := (&sesv1alpha1.ReceiptRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReceiptRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReceiptRuleSet",
	}:
		if err := (&sesv1alpha1.ReceiptRuleSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReceiptRuleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ses.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Template",
	}:
		if err := (&sesv1alpha1.Template{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Template")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sfn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Activity",
	}:
		if err := (&sfnv1alpha1.Activity{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Activity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sfn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StateMachine",
	}:
		if err := (&sfnv1alpha1.StateMachine{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StateMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "shield.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Protection",
	}:
		if err := (&shieldv1alpha1.Protection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Protection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "signer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SigningJob",
	}:
		if err := (&signerv1alpha1.SigningJob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SigningJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "signer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SigningProfile",
	}:
		if err := (&signerv1alpha1.SigningProfile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SigningProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "signer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SigningProfilePermission",
	}:
		if err := (&signerv1alpha1.SigningProfilePermission{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SigningProfilePermission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "simpledb.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&simpledbv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "snapshot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CreateVolumePermission",
	}:
		if err := (&snapshotv1alpha1.CreateVolumePermission{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CreateVolumePermission")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sns.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlatformApplication",
	}:
		if err := (&snsv1alpha1.PlatformApplication{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PlatformApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sns.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SmsPreferences",
	}:
		if err := (&snsv1alpha1.SmsPreferences{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SmsPreferences")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sns.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&snsv1alpha1.Topic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sns.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicPolicy",
	}:
		if err := (&snsv1alpha1.TopicPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TopicPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sns.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicSubscription",
	}:
		if err := (&snsv1alpha1.TopicSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TopicSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatafeedSubscription",
	}:
		if err := (&spotv1alpha1.DatafeedSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatafeedSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FleetRequest",
	}:
		if err := (&spotv1alpha1.FleetRequest{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FleetRequest")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spot.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InstanceRequest",
	}:
		if err := (&spotv1alpha1.InstanceRequest{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InstanceRequest")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sqsqueue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqsQueue",
	}:
		if err := (&sqsqueuev1alpha1.SqsQueue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SqsQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sqsqueue.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&sqsqueuev1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Activation",
	}:
		if err := (&ssmv1alpha1.Activation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Activation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Association",
	}:
		if err := (&ssmv1alpha1.Association{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Association")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Document",
	}:
		if err := (&ssmv1alpha1.Document{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Document")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MaintenanceWindow",
	}:
		if err := (&ssmv1alpha1.MaintenanceWindow{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MaintenanceWindow")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MaintenanceWindowTarget",
	}:
		if err := (&ssmv1alpha1.MaintenanceWindowTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MaintenanceWindowTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MaintenanceWindowTask",
	}:
		if err := (&ssmv1alpha1.MaintenanceWindowTask{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MaintenanceWindowTask")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Parameter",
	}:
		if err := (&ssmv1alpha1.Parameter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Parameter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PatchBaseline",
	}:
		if err := (&ssmv1alpha1.PatchBaseline{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PatchBaseline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PatchGroup",
	}:
		if err := (&ssmv1alpha1.PatchGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PatchGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssm.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ResourceDataSync",
	}:
		if err := (&ssmv1alpha1.ResourceDataSync{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ResourceDataSync")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssoadmin.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountAssignment",
	}:
		if err := (&ssoadminv1alpha1.AccountAssignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssoadmin.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedPolicyAttachment",
	}:
		if err := (&ssoadminv1alpha1.ManagedPolicyAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagedPolicyAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssoadmin.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PermissionSet",
	}:
		if err := (&ssoadminv1alpha1.PermissionSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PermissionSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssoadmin.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PermissionSetInlinePolicy",
	}:
		if err := (&ssoadminv1alpha1.PermissionSetInlinePolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PermissionSetInlinePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cache",
	}:
		if err := (&storagegatewayv1alpha1.Cache{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CachedIscsiVolume",
	}:
		if err := (&storagegatewayv1alpha1.CachedIscsiVolume{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CachedIscsiVolume")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&storagegatewayv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NfsFileShare",
	}:
		if err := (&storagegatewayv1alpha1.NfsFileShare{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NfsFileShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SmbFileShare",
	}:
		if err := (&storagegatewayv1alpha1.SmbFileShare{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SmbFileShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StoredIscsiVolume",
	}:
		if err := (&storagegatewayv1alpha1.StoredIscsiVolume{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StoredIscsiVolume")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TapePool",
	}:
		if err := (&storagegatewayv1alpha1.TapePool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TapePool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "UploadBuffer",
	}:
		if err := (&storagegatewayv1alpha1.UploadBuffer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "UploadBuffer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storagegateway.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WorkingStorage",
	}:
		if err := (&storagegatewayv1alpha1.WorkingStorage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WorkingStorage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subnet",
	}:
		if err := (&subnetv1alpha1.Subnet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Subnet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "swf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&swfv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synthetics.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Canary",
	}:
		if err := (&syntheticsv1alpha1.Canary{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Canary")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "timestreamwrite.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&timestreamwritev1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "timestreamwrite.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&timestreamwritev1alpha1.Table{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "transfer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&transferv1alpha1.Server{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "transfer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SshKey",
	}:
		if err := (&transferv1alpha1.SshKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SshKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "transfer.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&transferv1alpha1.User{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "volume.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Attachment",
	}:
		if err := (&volumev1alpha1.Attachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Attachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Vpc",
	}:
		if err := (&vpcv1alpha1.Vpc{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Vpc")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DhcpOptions",
	}:
		if err := (&vpcv1alpha1.DhcpOptions{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DhcpOptions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DhcpOptionsAssociation",
	}:
		if err := (&vpcv1alpha1.DhcpOptionsAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DhcpOptionsAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&vpcv1alpha1.Endpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointConnectionNotification",
	}:
		if err := (&vpcv1alpha1.EndpointConnectionNotification{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointConnectionNotification")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointRouteTableAssociation",
	}:
		if err := (&vpcv1alpha1.EndpointRouteTableAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointRouteTableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointService",
	}:
		if err := (&vpcv1alpha1.EndpointService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointServiceAllowedPrincipal",
	}:
		if err := (&vpcv1alpha1.EndpointServiceAllowedPrincipal{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointServiceAllowedPrincipal")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointSubnetAssociation",
	}:
		if err := (&vpcv1alpha1.EndpointSubnetAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointSubnetAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ipv4CIDRBlockAssociation",
	}:
		if err := (&vpcv1alpha1.Ipv4CIDRBlockAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Ipv4CIDRBlockAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PeeringConnection",
	}:
		if err := (&vpcv1alpha1.PeeringConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PeeringConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PeeringConnectionAccepter",
	}:
		if err := (&vpcv1alpha1.PeeringConnectionAccepter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PeeringConnectionAccepter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpc.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PeeringConnectionOptions",
	}:
		if err := (&vpcv1alpha1.PeeringConnectionOptions{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PeeringConnectionOptions")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&vpnv1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionRoute",
	}:
		if err := (&vpnv1alpha1.ConnectionRoute{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectionRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&vpnv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayAttachment",
	}:
		if err := (&vpnv1alpha1.GatewayAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GatewayAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayRoutePropagation",
	}:
		if err := (&vpnv1alpha1.GatewayRoutePropagation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GatewayRoutePropagation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ByteMatchSet",
	}:
		if err := (&wafv1alpha1.ByteMatchSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ByteMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GeoMatchSet",
	}:
		if err := (&wafv1alpha1.GeoMatchSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GeoMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ipset",
	}:
		if err := (&wafv1alpha1.Ipset{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Ipset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RateBasedRule",
	}:
		if err := (&wafv1alpha1.RateBasedRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RateBasedRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegexMatchSet",
	}:
		if err := (&wafv1alpha1.RegexMatchSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegexMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegexPatternSet",
	}:
		if err := (&wafv1alpha1.RegexPatternSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegexPatternSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&wafv1alpha1.Rule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RuleGroup",
	}:
		if err := (&wafv1alpha1.RuleGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RuleGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SizeConstraintSet",
	}:
		if err := (&wafv1alpha1.SizeConstraintSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SizeConstraintSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlInjectionMatchSet",
	}:
		if err := (&wafv1alpha1.SqlInjectionMatchSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SqlInjectionMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACL",
	}:
		if err := (&wafv1alpha1.WebACL{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "waf.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "XssMatchSet",
	}:
		if err := (&wafv1alpha1.XssMatchSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "XssMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ByteMatchSet",
	}:
		if err := (&wafregionalv1alpha1.ByteMatchSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ByteMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GeoMatchSet",
	}:
		if err := (&wafregionalv1alpha1.GeoMatchSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GeoMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Ipset",
	}:
		if err := (&wafregionalv1alpha1.Ipset{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Ipset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RateBasedRule",
	}:
		if err := (&wafregionalv1alpha1.RateBasedRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RateBasedRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegexMatchSet",
	}:
		if err := (&wafregionalv1alpha1.RegexMatchSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegexMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegexPatternSet",
	}:
		if err := (&wafregionalv1alpha1.RegexPatternSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegexPatternSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&wafregionalv1alpha1.Rule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RuleGroup",
	}:
		if err := (&wafregionalv1alpha1.RuleGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RuleGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SizeConstraintSet",
	}:
		if err := (&wafregionalv1alpha1.SizeConstraintSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SizeConstraintSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlInjectionMatchSet",
	}:
		if err := (&wafregionalv1alpha1.SqlInjectionMatchSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SqlInjectionMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACL",
	}:
		if err := (&wafregionalv1alpha1.WebACL{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACLAssociation",
	}:
		if err := (&wafregionalv1alpha1.WebACLAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebACLAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafregional.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "XssMatchSet",
	}:
		if err := (&wafregionalv1alpha1.XssMatchSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "XssMatchSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IpSet",
	}:
		if err := (&wafv2v1alpha1.IpSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IpSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegexPatternSet",
	}:
		if err := (&wafv2v1alpha1.RegexPatternSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegexPatternSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RuleGroup",
	}:
		if err := (&wafv2v1alpha1.RuleGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RuleGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACL",
	}:
		if err := (&wafv2v1alpha1.WebACL{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebACL")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACLAssociation",
	}:
		if err := (&wafv2v1alpha1.WebACLAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebACLAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "wafv2.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebACLLoggingConfiguration",
	}:
		if err := (&wafv2v1alpha1.WebACLLoggingConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebACLLoggingConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "worklink.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Fleet",
	}:
		if err := (&worklinkv1alpha1.Fleet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Fleet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "worklink.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebsiteCertificateAuthorityAssociation",
	}:
		if err := (&worklinkv1alpha1.WebsiteCertificateAuthorityAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebsiteCertificateAuthorityAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "workspaces.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Directory",
	}:
		if err := (&workspacesv1alpha1.Directory{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Directory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "workspaces.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IpGroup",
	}:
		if err := (&workspacesv1alpha1.IpGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IpGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "workspaces.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workspace",
	}:
		if err := (&workspacesv1alpha1.Workspace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Workspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "xray.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EncryptionConfig",
	}:
		if err := (&xrayv1alpha1.EncryptionConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EncryptionConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "xray.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&xrayv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "xray.aws.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SamplingRule",
	}:
		if err := (&xrayv1alpha1.SamplingRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SamplingRule")
			return err
		}

	default:
		return fmt.Errorf("Invalid Webhook")
	}

	return nil
}
